p = Path('.')
x for x in p.iterdir() if x.is_dir()
PosixPath('.hg')
PosixPath('docs')
PosixPath('dist')
PosixPath('__pycache__')
PosixPath('build')
list(p.glob('**/*.py'))
PosixPath('test_pathlib.py')
PosixPath('setup.py')
PosixPath('pathlib.py')
PosixPath('docs/conf.py')
PosixPath('build/lib/pathlib.py')
p = Path('/etc')
PosixPath('/etc/init.d/reboot')
q.resolve()
PosixPath('/etc/rc.d/init.d/halt')
q.exists()
q.is_dir()
with q.open() as f: 
f.readline()
pathlib.PurePath(*pathsegments)
PurePath('setup.py')      
PurePosixPath('setup.py')
PurePath('foo', 'some/path', 'bar')
PurePosixPath('foo/some/path/bar')
PurePath(Path('foo'), Path('bar'))
PurePosixPath('foo/bar')
PurePath()
PurePosixPath('.')
os.path.join() 
PurePath('/etc', '/usr', 'lib64')
PurePosixPath('/usr/lib64')
PureWindowsPath('c:/Windows', 'd:bar')
PureWindowsPath('d:bar')
PureWindowsPath('c:/Windows', '/Program Files')
PureWindowsPath('c:/Program Files')
PurePath('foo//bar')
PurePosixPath('foo/bar')
PurePath('foo/./bar')
PurePosixPath('foo/bar')
PurePath('foo/../bar')
PurePosixPath('foo/../bar')
PurePosixPath('foo/../bar') 
PurePosixPath('bar') 
pathlib.PurePosixPath(*pathsegments)
PurePosixPath('/etc')
PurePosixPath('/etc')
pathlib.PureWindowsPath(*pathsegments)
PureWindowsPath('c:/Program Files/')
PureWindowsPath('c:/Program Files')
PurePosixPath('foo') == PurePosixPath('FOO')
PureWindowsPath('foo') == PureWindowsPath('FOO')
PureWindowsPath('FOO') in { PureWindowsPath('foo') }
PureWindowsPath('C:') < PureWindowsPath('d:')
PureWindowsPath('foo') == PurePosixPath('foo')
PureWindowsPath('foo') < PurePosixPath('foo')
os.path.join() 
p = PurePath('/etc')
PurePosixPath('/etc')
PurePosixPath('/etc/init.d/apache2')
q = PurePath('bin')
PurePosixPath('/usr/bin')
p = PurePath('/etc')
os.fspath(p)
p = PurePath('/etc')
str(p)
p = PureWindowsPath('c:/Program Files')
str(p)
os.fsencode() 
bytes(p)
p = PurePath('/usr/bin/python3')
p = PureWindowsPath('c:/Program Files/PSF')
PureWindowsPath('c:/Program Files/').drive
PureWindowsPath('/Program Files/').drive
PurePosixPath('/etc').drive
PureWindowsPath('//host/share/foo.txt').drive
PureWindowsPath('c:/Program Files/').root
PureWindowsPath('c:Program Files/').root
PurePosixPath('/etc').root
PureWindowsPath('//host/share').root
PureWindowsPath('c:/Program Files/').anchor
PureWindowsPath('c:Program Files/').anchor
PurePosixPath('/etc').anchor
PureWindowsPath('//host/share').anchor
p = PureWindowsPath('c:/foo/bar/setup.py')
PureWindowsPath('c:/foo/bar')
PureWindowsPath('c:/foo')
PureWindowsPath('c:/')
p = PurePosixPath('/a/b/c/d')
PurePosixPath('/a/b/c')
p = PurePosixPath('/')
PurePosixPath('/')
p = PurePosixPath('.')
PurePosixPath('.')
p = PurePosixPath('foo/..')
PurePosixPath('foo')
Path.resolve() 
PurePosixPath('my/library/setup.py').name
PureWindowsPath('//some/share/setup.py').name
PureWindowsPath('//some/share').name
PurePosixPath('my/library/setup.py').suffix
PurePosixPath('my/library.tar.gz').suffix
PurePosixPath('my/library').suffix
PurePosixPath('my/library.tar.gar').suffixes
PurePosixPath('my/library.tar.gz').suffixes
PurePosixPath('my/library').suffixes
PurePosixPath('my/library.tar.gz').stem
PurePosixPath('my/library.tar').stem
PurePosixPath('my/library').stem
PurePath.as_posix()
p = PureWindowsPath('c:\\windows')
str(p)
p.as_posix()
PurePath.as_uri()
p = PurePosixPath('/etc/passwd')
p.as_uri()
p = PureWindowsPath('c:/Windows')
p.as_uri()
PurePath.is_absolute()
PurePosixPath('/a/b').is_absolute()
PurePosixPath('a/b').is_absolute()
PureWindowsPath('c:/a/b').is_absolute()
PureWindowsPath('/a/b').is_absolute()
PureWindowsPath('c:').is_absolute()
PureWindowsPath('//some/share').is_absolute()
PurePath.is_relative_to(*other)
p = PurePath('/etc/passwd')
p.is_relative_to('/etc')
p.is_relative_to('/usr')
PurePath.is_reserved()
PureWindowsPath('nul').is_reserved()
PurePosixPath('nul').is_reserved()
PurePath.joinpath(*other)
PurePosixPath('/etc').joinpath('passwd')
PurePosixPath('/etc/passwd')
PurePosixPath('/etc').joinpath(PurePosixPath('passwd'))
PurePosixPath('/etc/passwd')
PurePosixPath('/etc').joinpath('init.d', 'apache2')
PurePosixPath('/etc/init.d/apache2')
PureWindowsPath('c:').joinpath('/Program Files')
PureWindowsPath('c:/Program Files')
PurePath.match(pattern)
PurePath('a/b.py').match('*.py')
PurePath('/a/b/c.py').match('b/*.py')
PurePath('/a/b/c.py').match('a/*.py')
PurePath('/a.py').match('/*.py')
PurePath('a/b.py').match('/*.py')
PurePosixPath('b.py').match('*.PY')
PureWindowsPath('b.py').match('*.PY')
PurePath.relative_to(*other)
p = PurePosixPath('/etc/passwd')
p.relative_to('/')
PurePosixPath('etc/passwd')
p.relative_to('/etc')
PurePosixPath('passwd')
p.relative_to('/usr')
format(str(self), str(formatted))
PurePath.with_name(name)
p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')
p.with_name('setup.py')
PureWindowsPath('c:/Downloads/setup.py')
p = PureWindowsPath('c:/')
p.with_name('setup.py')
raise ValueError("%r has an empty name" % (self,))
PurePath.with_stem(stem)
p = PureWindowsPath('c:/Downloads/draft.txt')
p.with_stem('final')
PureWindowsPath('c:/Downloads/final.txt')
p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')
p.with_stem('lib')
PureWindowsPath('c:/Downloads/lib.gz')
p = PureWindowsPath('c:/')
p.with_stem('')
return self.with_name(stem + self.suffix)
raise ValueError("%r has an empty name" % (self,))
PurePath.with_suffix(suffix)
p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')
p.with_suffix('.bz2')
PureWindowsPath('c:/Downloads/pathlib.tar.bz2')
p = PureWindowsPath('README')
p.with_suffix('.txt')
PureWindowsPath('README.txt')
p = PureWindowsPath('README.txt')
p.with_suffix('')
PureWindowsPath('README')
pathlib.Path(*pathsegments)
Path('setup.py')
PosixPath('setup.py')
pathlib.PosixPath(*pathsegments)
PosixPath('/etc')
PosixPath('/etc')
pathlib.WindowsPath(*pathsegments)
WindowsPath('c:/Program Files/')
WindowsPath('c:/Program Files')
Path('setup.py')
PosixPath('setup.py')
PosixPath('setup.py')
PosixPath('setup.py')
WindowsPath('setup.py')
exists()
is_dir()
is_file()
is_mount()
is_symlink()
is_block_device()
is_char_device()
is_fifo()
is_socket() 
Path.cwd()
os.getcwd() 
Path.cwd()
PosixPath('/home/antoine/pathlib')
Path.home()
os.path.expanduser() 
Path.home()
PosixPath('/home/antoine')
p = Path('setup.py')
p.stat().st_size
p.stat().st_mtime
Path.chmod(mode)
os.chmod() 
p = Path('setup.py')
p.stat().st_mode
p.stat().st_mode
Path.exists()
Path('.').exists()
Path('setup.py').exists()
Path('/etc').exists()
Path('nonexistentfile').exists()
exists() 
Path.expanduser()
os.path.expanduser() 
p = PosixPath('~/films/Monty Python')
p.expanduser()
PosixPath('/home/eric/films/Monty Python')
Path.glob(pattern)
sorted(Path('.').glob('*.py'))
PosixPath('pathlib.py')
PosixPath('setup.py')
PosixPath('test_pathlib.py')
sorted(Path('.').glob('*/*.py'))
PosixPath('docs/conf.py')
sorted(Path('.').glob('**/*.py'))
PosixPath('build/lib/pathlib.py')
PosixPath('docs/conf.py')
PosixPath('pathlib.py')
PosixPath('setup.py')
PosixPath('test_pathlib.py')
Path.group()
Path.is_dir()
Path.is_file()
Path.is_mount()
Path.is_symlink()
Path.is_socket()
Path.is_fifo()
Path.is_block_device()
Path.is_char_device()
Path.iterdir()
p = Path('docs')
for child in p.iterdir(): 
PosixPath('docs/conf.py')
PosixPath('docs/_templates')
PosixPath('docs/make.bat')
PosixPath('docs/index.rst')
PosixPath('docs/_build')
PosixPath('docs/_static')
PosixPath('docs/Makefile')
Path.lchmod(mode)
Path.chmod() 
Path.lstat()
Path.stat() 
Path.open(mode='r', buffering=-1, encoding=None, errors=None, newline=None)
open() 
p = Path('setup.py')
with p.open() as f:
f.readline()
Path.owner()
Path.read_bytes()
p = Path('my_binary_file')
p.read_bytes()
Path.read_text(encoding=None, errors=None)
p = Path('my_text_file')
p.write_text('Text file contents')
p.read_text()
open() 
p = Path('mylink')
p.symlink_to('setup.py')
p.readlink()
PosixPath('setup.py')
p = Path('foo')
p.open('w').write('some text')
target = Path('bar')
p.rename(target)
PosixPath('bar')
target.open().read()
Path.resolve(strict=False)
p = Path()
PosixPath('.')
p.resolve()
PosixPath('/home/antoine/pathlib')
p = Path('docs/../setup.py')
p.resolve()
PosixPath('/home/antoine/pathlib/setup.py')
sorted(Path().rglob("*.py"))
PosixPath('build/lib/pathlib.py')
PosixPath('docs/conf.py')
PosixPath('pathlib.py')
PosixPath('setup.py')
PosixPath('test_pathlib.py')
Path.rmdir()
Path.samefile(other_path)
os.path.samefile() 
os.path.samestat() 
p = Path('spam')
q = Path('eggs')
p.samefile(q)
p.samefile('spam')
Path.symlink_to(target, target_is_directory=False)
p = Path('mylink')
p.symlink_to('setup.py')
p.resolve()
PosixPath('/home/antoine/pathlib/setup.py')
p.stat().st_size
p.lstat().st_size
os.symlink() 
Path.unlink(missing_ok=False)
Path.rmdir() 
Path.write_bytes(data)
p = Path('my_binary_file')
p.read_bytes()
Path.write_text(data, encoding=None, errors=None)
p = Path('my_text_file')
p.write_text('Text file contents')
p.read_text()
os.path.relpath() 
PurePath.relative_to() 
os.path.abspath()
Path.resolve()
os.chmod()
Path.chmod()
os.mkdir()
Path.mkdir()
os.makedirs()
Path.mkdir()
os.rename()
Path.rename()
os.replace()
Path.replace()
os.rmdir()
Path.rmdir()
os.remove()
os.unlink()
Path.unlink()
os.getcwd()
Path.cwd()
os.path.exists()
Path.exists()
os.path.expanduser()
Path.expanduser() 
Path.home()
os.listdir()
Path.iterdir()
os.path.isdir()
Path.is_dir()
os.path.isfile()
Path.is_file()
os.path.islink()
Path.is_symlink()
os.link()
Path.link_to()
os.symlink()
Path.symlink_to()
os.readlink()
Path.readlink()
os.stat()
Path.stat()
Path.owner()
Path.group()
os.path.isabs()
PurePath.is_absolute()
os.path.join()
PurePath.joinpath()
os.path.basename()
os.path.dirname()
os.path.samefile()
Path.samefile()
os.path.splitext()
open() 
expanduser() 
expandvars() 
exists()
lexists()
isdir()
isfile()
islink()
ismount() 
os.path.abspath(path)
normpath() 
normpath(join(os.getcwd(), path))
os.path.basename(path)
split() 
basename() 
os.path.commonprefix(list)
commonpath() 
os.path.commonprefix(['/usr/lib', '/usr/local/lib'])
os.path.commonpath(['/usr/lib', '/usr/local/lib'])
os.path.dirname(path)
split() 
os.path.exists(path)
os.stat() 
os.path.lexists(path)
os.lstat() 
exists() 
os.path.expanduser(path)
os.path.expandvars(path)
os.path.getatime(path)
os.path.getmtime(path)
os.path.getctime(path)
os.path.getsize(path)
os.path.isabs(path)
os.path.isfile(path)
islink() 
isfile() 
os.path.isdir(path)
islink() 
isdir() 
os.path.islink(path)
os.path.ismount(path)
os.path.join("c:", "foo") 
os.path.normpath(path)
normcase() 
os.path.realpath(path)
os.path.relpath(path, start=os.curdir)
os.path.samefile(path1, path2)
os.stat() 
os.path.sameopenfile(fp1, fp2)
os.path.samestat(stat1, stat2)
os.fstat() 
os.lstat() 
os.stat() 
samefile() 
sameopenfile() 
os.path.split(path)
join(head, tail) 
dirname()
basename() 
os.path.splitdrive(path)
splitdrive("c:/dir") 
splitdrive("//host/computer/dir") 
os.path.splitext(path)
splitext('.cshrc') 
open() 
for line in fileinput.input():
process(line)
input() 
input() 
sys.stdin.seek(0) 
fileinput.input() 
FileInput() 
with fileinput.input(files=('spam.txt', 'eggs.txt')) as f:
process(line)
fileinput.input() 
fileinput.filename()
fileinput.fileno()
fileinput.lineno()
fileinput.filelineno()
fileinput.isfirstline()
fileinput.isstdin()
fileinput.nextfile()
fileinput.close()
filename() 
fileno() 
lineno() 
filelineno() 
isfirstline() 
isstdin() 
nextfile() 
close() 
readline() 
__getitem__() 
readline() 
open() 
with FileInput(files=('spam.txt', 'eggs.txt')) as input:
process(input)
fileinput.input() 
fileinput.hook_compressed(filename, mode)
open() 
fi = fileinput.FileInput(openhook=fileinput.hook_compressed)
fileinput.hook_encoded(encoding, errors=None)
open() 
fi = fileinput.FileInput(openhook=fileinput.hook_encoded("utf-8", "surrogateescape"))
stat --- stat() 
os.stat() 
os.lstat() 
os.fstat() 
stat() 
fstat() 
lstat() 
stat.S_ISDIR(mode)
stat.S_ISCHR(mode)
stat.S_ISBLK(mode)
stat.S_ISREG(mode)
stat.S_ISFIFO(mode)
stat.S_ISLNK(mode)
stat.S_ISSOCK(mode)
stat.S_ISDOOR(mode)
stat.S_ISPORT(mode)
stat.S_ISWHT(mode)
stat.S_IMODE(mode)
os.chmod() 
stat.S_IFMT(mode)
stat() 
def walktree(top, callback):
for f in os.listdir(top):
pathname = os.path.join(top, f)
mode = os.stat(pathname).st_mode
if S_ISDIR(mode):
walktree(pathname, callback)
elif S_ISREG(mode):
callback(pathname)
print('Skipping %s' % pathname)
def visitfile(file):
print('visiting', file)
walktree(sys.argv[1], visitfile)
stat.filemode(mode)
os.stat() 
os.fstat() 
os.lstat() 
os.stat() 
os.fstat() 
os.lstat() 
os.chmod() 
os.chflags() 
chflags(2) 
os.stat() 
os.lstat() 
filecmp.cmp(f1, f2, shallow=True)
os.stat() 
os.stat() 
clear_cache() 
filecmp.cmpfiles(dir1, dir2, common, shallow=True)
filecmp.cmp() 
cmpfiles('a', 'b', ['c', 'd/e']) 
filecmp.clear_cache()
filecmp.dircmp(a, b, ignore=None, hide=None)
filecmp.cmp() 
report()
report_partial_closure()
report_full_closure()
__getattr__() 
os.stat() 
def print_diff_files(dcmp):
for sub_dcmp in dcmp.subdirs.values():
print_diff_files(sub_dcmp)
dcmp = dircmp('dir1', 'dir2') 
print_diff_files(dcmp) 
mkstemp() 
mkdtemp() 
mkstemp() 
mkstemp() 
TemporaryFile() 
fileno() 
TemporaryFile() 
TemporaryFile() 
rollover() 
rollover() 
tempfile.TemporaryDirectory(suffix=None, prefix=None, dir=None)
mkdtemp() 
cleanup() 
tempfile.mkstemp(suffix=None, prefix=None, dir=None, text=False)
os.open() 
TemporaryFile() 
mkstemp() 
mkstemp() 
gettempprefix() 
gettempprefixb() 
os.popen() 
mkstemp() 
os.open() 
tempfile.mkdtemp(suffix=None, prefix=None, dir=None)
mkdtemp() 
mkstemp() 
mkdtemp() 
tempfile.gettempdir()
tempfile.gettempdirb()
gettempdir() 
tempfile.gettempprefix()
tempfile.gettempprefixb()
gettempprefix() 
gettempdir() 
gettempprefix() 
gettempdir() 
fp = tempfile.TemporaryFile()
fp.seek(0)
fp.read()
fp.close()
with tempfile.TemporaryFile() as fp:
fp.seek(0)
fp.read()
with tempfile.TemporaryDirectory() as tmpdirname:
print('created temporary directory', tmpdirname)
mktemp() 
mktemp() 
mkstemp() 
tempfile.mktemp(suffix='', prefix='tmp', dir=None)
mkstemp() 
mkstemp() 
mktemp() 
NamedTemporaryFile() 
f = NamedTemporaryFile(delete=False)
f.close()
os.unlink(f.name)
os.path.exists(f.name)
os.scandir() 
fnmatch.fnmatch() 
fnmatch.fnmatch() 
os.path.expanduser() 
os.path.expandvars() 
glob() 
glob.escape(pathname)
escape('//?/c:/Quo vadis?.txt') 
glob() 
glob.glob('./[0-9].*')
glob.glob('*.gif')
glob.glob('?.gif')
glob.glob('**/*.txt', recursive=True)
glob.glob('./**/', recursive=True)
glob.glob('*.gif')
glob.glob('.c*')
filter() 
fnmatch.fnmatch(filename, pattern)
os.path.normcase() 
fnmatchcase() 
for file in os.listdir('.'):
if fnmatch.fnmatch(file, '*.txt'):
print(file)
fnmatch.fnmatchcase(filename, pattern)
os.path.normcase() 
fnmatch.translate(pattern)
re.match() 
regex = fnmatch.translate('*.txt')
reobj = re.compile(regex)
reobj.match('foobar.txt')
span=(0, 10)
tokenize.open() 
tokenize.detect_encoding() 
linecache.getline(filename, lineno, module_globals=None)
get_source() 
linecache.clearcache()
getline() 
linecache.checkcache(filename=None)
linecache.lazycache(filename, module_globals)
getline() 
linecache.getline(linecache.__file__, 8)
shutil.copy()
shutil.copy2()
shutil.copyfileobj(fsrc, fdst[, length])
copyfile() 
copystat() 
copystat() 
copystat() 
copystat() 
copystat() 
copystat() 
copy() 
os.chmod() 
copy2() 
copy2() 
copy() 
copy2() 
copystat() 
copystat() 
shutil.ignore_patterns(*patterns)
copytree() 
shutil.copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2, ignore_dangling_symlinks=False, dirs_exist_ok=False)
os.symlink() 
copytree() 
os.listdir() 
copytree() 
ignore_patterns() 
shutil.rmtree(path, ignore_errors=False, onerror=None)
rmtree() 
rmtree() 
rmtree() 
sys.exc_info() 
rmtree() 
shutil.move(src, dst, copy_function=copy2)
os.rename() 
os.rename() 
shutil.chown(path, user=None, group=None)
os.chown() 
shutil.which(cmd, mode=os.F_OK | os.X_OK, path=None)
os.access() 
os.environ() 
shutil.which("python") 
which() 
shutil.which("python")
copytree() 
copytree() 
def copytree(src, dst, symlinks=False):
names = os.listdir(src)
os.makedirs(dst)
srcname = os.path.join(src, name)
dstname = os.path.join(dst, name)
if symlinks and os.path.islink(srcname):
linkto = os.readlink(srcname)
os.symlink(linkto, dstname)
elif os.path.isdir(srcname):
copytree(srcname, dstname, symlinks)
copy2(srcname, dstname)
errors.append((srcname, dstname, str(why)))
errors.extend(err.args[0])
copystat(src, dst)
errors.extend((src, dst, str(why)))
raise Error(errors)
ignore_patterns() 
copytree(source, destination, ignore=ignore_patterns('*.pyc', 'tmp*'))
def _logpath(path, names):
logging.info('Working in %s', path)
copytree(source, destination, ignore=_logpath)
def remove_readonly(func, path, _):
os.chmod(path, stat.S_IWRITE)
func(path)
shutil.rmtree(directory, onerror=remove_readonly)
shutil.make_archive(base_name, format[, root_dir[, base_dir[, verbose[, dry_run[, owner[, group[, logger]]]]]]])
shutil.get_archive_formats()
register_archive_format() 
shutil.register_archive_format(name, function[, extra_args[, description]])
make_archive() 
get_archive_formats() 
shutil.unregister_archive_format(name)
shutil.unpack_archive(filename[, extract_dir[, format]])
register_unpack_format() 
unpack_archive() 
shutil.register_unpack_format(name, extensions, function[, extra_args[, description]])
get_unpack_formats() 
shutil.unregister_unpack_format(name)
shutil.get_unpack_formats()
register_unpack_format() 
archive_name = os.path.expanduser(os.path.join('~', 'myarchive'))
root_dir = os.path.expanduser(os.path.join('~', '.ssh'))
make_archive(archive_name, 'gztar', root_dir)
archive_name = os.path.expanduser(os.path.join('~', 'myarchive'))
shutil.get_terminal_size(fallback=(columns, lines))
os.get_terminal_size() 
struct.unpack(format, buffer)
calcsize()
calcsize()
struct.iter_unpack(format, buffer)
calcsize()
AMD64 (x86-64) 
__index__() 
 の場合) 、 binary64 (
pack() 
unpack() 
pack('hhl', 1, 2, 3)
calcsize('hhl')
name, serialnum, school, gradelevel = unpack('<10sHHb', record)
Student = namedtuple('Student', 'name serialnum school gradelevel')
Student._make(unpack('<10sHHb', record))
calcsize('ci')
calcsize('ic')
pack('llh0l', 1, 2, 3)
struct.Struct(format)
pack() 
len(result) 
pack_into() 
unpack(buffer)
unpack() 
iter_unpack(buffer)
iter_unpack() 
pack() 
codecs.encode(obj, encoding='utf-8', errors='strict')
codecs.decode(obj, encoding='utf-8', errors='strict')
codecs.lookup(encoding)
codecs.CodecInfo(encode, decode, streamreader=None, streamwriter=None, incrementalencoder=None, incrementaldecoder=None, name=None)
encode() 
decode() 
lookup() 
codecs.getencoder(encoding)
codecs.getdecoder(encoding)
codecs.getincrementalencoder(encoding)
codecs.getincrementaldecoder(encoding)
codecs.getreader(encoding)
codecs.getwriter(encoding)
codecs.register(search_function)
open() 
codecs.open(filename, mode='r', encoding=None, errors='strict', buffering=-1)
open() 
codecs.EncodedFile(file, data_encoding, file_encoding=None, errors='strict')
codecs.iterencode(iterator, encoding, errors='strict', **kwargs)
codecs.iterdecode(iterator, encoding, errors='strict', **kwargs)
iterencode() 
backslashreplace_errors() 
codecs.register_error(name, error_handler)
codecs.lookup_error(name)
codecs.strict_errors(exception)
codecs.replace_errors(exception)
codecs.ignore_errors(exception)
codecs.xmlcharrefreplace_errors(exception)
codecs.backslashreplace_errors(exception)
codecs.namereplace_errors(exception)
Codec.encode(input[, errors])
Codec.decode(input[, errors])
encode()/decode() 
encode()/decode() 
codecs.IncrementalEncoder(errors='strict')
encode(object[, final])
encode() 
reset()
encode(object, final=True) 
getstate()
setstate(state)
getstate() 
codecs.IncrementalDecoder(errors='strict')
decode(object[, final])
decode() 
reset()
getstate()
setstate(state)
getstate() 
codecs.StreamWriter(stream, errors='strict')
write(object)
writelines(list)
write() 
reset()
codecs.StreamReader(stream, errors='strict')
register_error() 
read([size[, chars[, firstline]]])
read() 
readline([size[, keepends]])
read() 
readlines([sizehint[, keepends]])
read() 
reset()
lookup() 
codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')
lookup() 
codecs.StreamRecoder(stream, encode, decode, Reader, Writer, errors='strict')
read() 
write() 
ordinal not in range(256) 
base64.encodebytes() / base64.decodebytes()
bz2.compress() / bz2.decompress()
binascii.b2a_hex() / binascii.a2b_hex()
quopri.encode() / quopri.decode()
uu.encode() / uu.decode()
zlib.compress() / zlib.decompress()
encodings.idna.nameprep(label)
encodings.idna.ToASCII(label)
encodings.idna.ToUnicode(label)
abs()
hash()
memoryview()
set()
all()
dict()
help()
min()
setattr()
any()
dir()
hex()
next()
slice()
ascii()
divmod()
id()
object()
sorted()
bin()
enumerate()
input()
oct()
staticmethod()
bool()
eval()
int()
open()
str()
point()
exec()
isinstance()
ord()
sum()
bytearray()
filter()
issubclass()
pow()
super()
bytes()
float()
iter()
print()
tuple()
callable()
format()
len()
property()
type()
chr()
frozenset()
list()
range()
vars()
classmethod()
getattr()
locals()
repr()
zip()
compile()
map()
reversed()
__import__()
complex()
hasattr()
max()
round()
abs(x)
all(iterable)
def all(iterable):
any(iterable)
def any(iterable):
ascii(object)
repr() 
repr() 
repr() 
bin(x)
bin(3)
bin(-10)
format(14, '#b')
format(14, 'b')
format() 
bool([x])
point(*args, **kws)
sys.breakpointhook() 
sys.breakpointhook() 
pdb.set_trace() 
pdb.set_trace() 
sys.breakpointhook() 
point() 
bytearray([source[, encoding[, errors]]])
bytearray() 
str.encode() 
bytes([source[, encoding[, errors]]])
bytearray() 
callable(object)
__call__() 
chr(i)
chr(97) 
chr(8364) 
ord() 
C.f() 
C().f() 
compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)
exec() 
eval() 
ast.parse() 
complex([real[, imag]])
complex('1+2j') 
complex('1 + 2j') 
setattr() 
dict(**kwarg)
dict(mapping, **kwarg)
dict(iterable, **kwarg)
dir([object])
__dir__() 
__getattr__() 
__getattribute__() 
dir() 
__dir__() 
__getattr__() 
dir() 
dir()   
dir(struct)   
def __dir__(self):
s = Shape()
dir(s)
dir() 
divmod(a, b)
math.floor(a / b) 
0 <= abs(a % b) < abs(b) 
enumerate(iterable, start=0)
enumerate() 
__next__() 
list(enumerate(seasons))
list(enumerate(seasons, start=1))
def enumerate(sequence, start=0):
eval(expression[, globals[, locals]])
eval() 
eval() 
eval('x+1')
compile() 
eval() 
exec() 
locals() 
eval() 
exec() 
ast.literal_eval() 
exec() 
locals() 
exec() 
locals() 
exec() 
filter(function, iterable)
filter(function, iterable) 
item for item in iterable if function(item)
itertools.filterfalse() 
float([x])
NaN (not-a-number) 
float('+1.23')
float('   -12345\n')
float('1e-003')
float('+1E6')
float('-Infinity')
__float__() 
__index__() 
format(value[, format_spec])
str(value) 
format(value, format_spec) 
type(value).__format__(value, format_spec) 
__format__() 
object().__format__(format_spec) 
frozenset([iterable])
getattr(object, name[, default])
getattr(x, 'foobar') 
hasattr(object, name)
getattr(object, name) 
hash(object)
__hash__() 
hash() 
__hash__() 
help([object])
help() 
hex(x)
hex(255)
hex(-42)
format(255, '#x')
format(255, 'x')
format(255, 'X')
format() 
int() 
float.hex() 
id(object)
id() 
input([prompt])
s = input('--> ')  
input() 
int('010', 0) 
int('010') 
int('010', 8) 
isinstance(object, classinfo)
issubclass(class, classinfo)
iter(object[, sentinel])
__iter__() 
__getitem__() 
__next__() 
iter() 
with open('mydata.db', 'rb') as f:
partial(f.read, 64)
process_block(block)
len(s)
list([iterable])
locals()
locals() 
locals() 
itertools.starmap() 
max(arg1, arg2, *args[, key])
list.sort() 
sorted(iterable, key=keyfunc, reverse=True)[0] 
heapq.nlargest(1, iterable, key=keyfunc) 
memoryview(obj)
min(arg1, arg2, *args[, key])
list.sort() 
sorted(iterable, key=keyfunc)[0] 
heapq.nsmallest(1, iterable, key=keyfunc) 
next(iterator[, default])
__next__() 
oct(x)
oct(8)
oct(-56)
format(10, '#o')
format(10, 'o')
format() 
open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
locale.getpreferredencoding(False) 
updating (reading and writing)
isatty() 
locale.getpreferredencoding() 
codecs.register_error() 
os.open() 
dir_fd = os.open('somedir', os.O_RDONLY)
def opener(path, flags):
return os.open(path, flags, dir_fd=dir_fd)
with open('spamspam.txt', 'w', opener=opener) as f:
print('This will be written to somedir/spamspam.txt', file=f)
os.close(dir_fd)  
open() 
open() 
open() 
ord(c)
ord('a') 
ord('€') 
chr() 
pow(base, exp[, mod])
pow(base, exp) % mod
pow(base, exp) 
pow(inv_base, -exp, mod) is returned
pow(38, -1, mod=97)
print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
str() 
print() 
write(string) 
print() 
property(fget=None, fset=None, fdel=None, doc=None)
def __init__(self):
def getx(self):
def setx(self, value):
def delx(self):
x = property(getx, setx, delx, "I'm the 'x' property.")
property() 
def __init__(self):
def voltage(self):
voltage() 
def __init__(self):
def x(self):
def x(self, value):
def x(self):
range(stop)
range(start, stop[, step])
repr(object)
eval() 
__repr__() 
reversed(seq)
__reversed__() 
__len__() 
__getitem__() 
round(number[, ndigits])
round() 
round(0.5) 
round(-0.5) 
round(1.5) 
round() 
round(2.675, 2) 
set([iterable])
setattr(object, name, value)
getattr() 
setattr(x, 'foobar', 123) 
slice(stop)
slice(start, stop[, step])
range(start, stop, step) 
itertools.islice() 
functools.cmp_to_key() 
sort() 
C.f() 
C().f() 
classmethod() 
builtin_open = staticmethod(open)
str(object='')
str() 
sum() 
join(sequence) 
math.fsum() 
itertools.chain() 
isinstance(obj, type) 
issubclass(type2, type) 
class C(B
def method(self, arg):
super().method(arg)    
super(C, self).method(arg)
super() 
super().__getitem__(name) 
__getattribute__() 
super() 
super()[name] 
super() 
super() 
super() 
tuple([iterable])
type(object)
type(name, bases, dict)
isinstance() 
dict(a=1)
vars([object])
vars() 
locals() 
zip(*iterables)
def zip(*iterables):
zip('ABCD', 'xy') 
sentinel = object()
iterators = [iter(it) for it in iterables]
elem = next(it, sentinel)
result.append(elem)
yield tuple(result)
zip(*[iter(s)]*n) 
zip() 
itertools.zip_longest() 
zip() 
zipped = zip(x, y)
list(zipped)
x2, y2 = zip(*zip(x, y))
x == list(x2) and y == list(y2)
__import__() 
__import__() 
spam = __import__('spam', globals(), locals(), [], 0)
spam = __import__('spam.ham', globals(), locals(), [], 0)
__import__() 
_temp = __import__('spam.ham', globals(), locals(), ['eggs', 'sausage'], 0)
__import__() 
quit(code=None)
exit(code=None)
quit() or Ctrl-D (i.e. EOF) 
license() 
repr() 
str() 
print() 
__bool__() 
__len__() 
Decimal(0)
Fraction(0, 1)
set()
range(0)
not (a == b) 
__eq__() 
__lt__() 
__le__() 
__gt__() 
__ge__() 
__lt__() 
__eq__() 
__contains__() 
int() 
float() 
complex() 
abs(x)
abs()
int(x)
int()
float(x)
float()
complex(re, im)
complex()
c.conjugate()
divmod(x, y)
divmod()
pow(x, y)
pow()
1//(-2) 
abs() 
math.floor() 
math.ceil() 
Number (NaN)
pow(0, 0) 
math.trunc(x)
round(x[, n])
math.floor(x)
math.ceil(x)
pow(2, n) 
pow(2, n) 
1 + max(x.bit_length(), y.bit_length()) 
int.bit_length()
bin(n)
n.bit_length()
x.bit_length() 
2**(k-1) <= abs(x) < 2**k
abs(x) 
k = 1 + int(log(abs(x), 2)) 
x.bit_length() 
def bit_length(self):
s = bin(self)       
s = s.lstrip('-0b') 
return len(s)       
len('100101') 
to_bytes(2, byteorder='big')
to_bytes(10, byteorder='big')
to_bytes(10, byteorder='big', signed=True)
x.to_bytes((x.bit_length() + 7) // 8, byteorder='little')
int.from_bytes([255, 0, 0], byteorder='big')
float.as_integer_ratio()
float.is_integer()
is_integer()
is_integer()
float.hex()
float.fromhex(s)
float.fromhex() 
float.hex() 
float.hex() 
float.fromhex() 
float.fromhex('0x3.a7p10')
float.hex(3740.0)
hash(x) == hash(y) 
__hash__() 
invmod(n, P) 
hash(x) 
m * invmod(n, P) % P
hash(x) 
hash(x) 
-hash(-x) 
hash(z.real) + sys.hash_info.imag * hash(z.imag) 
range(-2**(sys.hash_info.width - 1), 2**(sys.hash_info.width - 1)) 
def hash_fraction(m, n):
hash(fractions.Fraction(m, n))
pow(n, P-2, P) 
hash_value = (abs(m) % P) * pow(n, P - 2, P) % P
def hash_float(x):
if math.isnan(x):
elif math.isinf(x):
return hash_fraction(*x.as_integer_ratio())
def hash_complex(z):
hash_value = hash_float(z.real) + sys.hash_info.imag * hash_float(z.imag)
M = 2**(sys.hash_info.width - 1)
hash_value = (hash_value & (M - 1)) - (hash_value & M)
container.__iter__()
iterator.__iter__()
iterator.__next__()
__next__() 
__iter__() 
__iter__() 
__next__() 
len(s)
min(s)
max(s)
s.index(x[, i[, j]])
s.count(x)
lists[0].append(3)
lists = [[] for i in range(3)]
lists[0].append(3)
lists[1].append(5)
lists[2].append(7)
len(s) + i
len(s) + j
len(s) 
len(s) 
len(s) 
0 <= n < (j-i)/k
len(s) 
len(s) 
len(s) - 1
len(s) - 1
str.join() 
bytes.join() 
s[i:j].index(x) 
hash() 
s.append(x)
s[len(s):len(s)] = [x] 
s.clear()
s.copy()
s.extend(t) 
s[len(s):len(s)] = t
s.insert(i, x)
s.pop([i])
s.remove(x)
s.reverse()
remove() 
reverse() 
clear() 
copy() 
copy() 
clear() 
copy() 
__index__() 
list([iterable])
list() 
list(iterable)
list('abc') 
list( (1, 2, 3) ) 
sorted() 
sort() 
functools.cmp_to_key() 
sorted() 
sort() 
enumerate() 
tuple([iterable])
tuple() 
tuple() 
tuple(iterable)
tuple('abc') 
tuple( [1, 2, 3] ) 
f(a, b, c) 
f((a, b, c)) 
collections.namedtuple() 
range(stop)
range(start, stop[, step])
len() 
list(range(10))
list(range(1, 11))
list(range(0, 30, 5))
list(range(0, 10, 3))
list(range(0, -10, -1))
list(range(0))
list(range(1, 0))
r = range(0, 20, 2)
range(0, 20, 2)
r.index(10)
range(0, 10, 2)
range(0) == range(2, 1, 3) 
range(0, 3, 2) == range(0, 4, 2)
r ("raw") 
str.join() 
str(object='')
str() 
str(object) 
object.__str__() 
__str__() 
str() 
repr(object) 
str(bytes, encoding, errors) 
bytes.decode(encoding, errors) 
bytes.decode() 
str() 
str.format()
str.capitalize()
str.casefold()
lower() 
casefold() 
str.center(width[, fillchar])
len(s) 
str.count(sub[, start[, end]])
str.encode(encoding="utf-8", errors="strict")
codecs.register_error() 
str.endswith(suffix[, start[, end]])
str.expandtabs(tabsize=8)
expandtabs()
expandtabs(4)
str.find(sub[, start[, end]])
find() 
str.format(*args, **kwargs)
format(1+2)
format(1234)
localeconv() 
str.format_map(mapping)
str.format(**mapping) 
class Default(dict
def __missing__(self, key):
format_map(Default(name='Guido'))
str.index(sub[, start[, end]])
find() 
str.isalnum()
c.isalpha() 
c.isdecimal() 
c.isdigit() 
c.isnumeric() 
str.isalpha()
str.isascii()
str.isdecimal()
str.isdigit()
str.isidentifier()
keyword.iskeyword() 
isidentifier()
iskeyword('hello')
isidentifier()
iskeyword('def')
str.islower()
str.isnumeric()
str.isprintable()
space (0x20) 
repr() 
str.isspace()
Zs ("Seperator, space") 
str.istitle()
str.isupper()
isupper()
isupper()
isupper()
isupper()
str.join(iterable)
str.ljust(width[, fillchar])
len(s) 
str.lower()
str.lstrip([chars])
lstrip()
lstrip('cmowz.')
str.removeprefix() 
lstrip('Arthur: ')
removeprefix('Arthur: ')
str.maketrans(x[, y[, z]])
str.translate() 
str.partition(sep)
string[len(prefix):] 
removeprefix('Test')
removeprefix('Test')
string[:-len(suffix)] 
removesuffix('Tests')
removesuffix('Tests')
str.replace(old, new[, count])
str.rfind(sub[, start[, end]])
str.rindex(sub[, start[, end]])
rfind() 
str.rjust(width[, fillchar])
len(s) 
str.rpartition(sep)
str.rsplit(sep=None, maxsplit=-1)
rsplit() 
split() 
str.rstrip([chars])
rstrip()
rstrip('ipz')
str.removesuffix() 
rstrip(' Python')
removesuffix(' Python')
str.split(sep=None, maxsplit=-1)
split(',') 
split('<>') 
split(',')
split(',', maxsplit=1)
split(',')
split()
split(maxsplit=1)
split()
str.splitlines([keepends])
splitlines()
splitlines(keepends=True)
split() 
splitlines()
splitlines()
split('\n') 
split('\n')
split('\n')
str.startswith(prefix[, start[, end]])
str.strip([chars])
strip()
strip('cmowz.')
comment_string.strip('.#! ')
str.swapcase()
s.swapcase().swapcase() == s
str.title()
title()
title()
def titlecase(s):
lambda mo: mo.group(0).capitalize()
titlecase("they're bill's friends.")
str.translate(table)
__getitem__() 
str.maketrans() 
str.upper()
s.upper().isupper() 
str.zfill(width)
len(s) 
zfill(5)
zfill(5)
str.format() 
sprintf() 
has %(number)
repr() 
str() 
ascii() 
bytes([source[, encoding[, errors]]])
bytes(10)
bytes(range(20))
bytes(obj)
fromhex(string)
bytes.fromhex('2Ef0 F1f2  ')
bytes.fromhex() 
hex([sep[, bytes_per_sep]])
hex()
value.hex('-')
value.hex('_', 2)
hex(' ', -4)
bytes.hex() 
bytes([46, 46, 46]) 
list(b) 
bytearray([source[, encoding[, errors]]])
bytearray()
bytearray(10)
bytearray(range(20))
fromhex(string)
bytearray.fromhex('2Ef0 F1f2  ')
bytearray.fromhex() 
hex([sep[, bytes_per_sep]])
hex()
bytes.hex()
bytearray.hex() 
bytearray([46, 46, 46]) 
list(b) 
b = a.replace("a", "f")
bytes.count(sub[, start[, end]])
bytearray.count(sub[, start[, end]])
return bytes[len(prefix):]. Otherwise, return 
return bytes[:-len(suffix)]. Otherwise, return 
bytes.decode(encoding="utf-8", errors="strict")
bytearray.decode(encoding="utf-8", errors="strict")
codecs.register_error() 
bytes.endswith(suffix[, start[, end]])
bytearray.endswith(suffix[, start[, end]])
bytes.find(sub[, start[, end]])
bytearray.find(sub[, start[, end]])
find() 
bytes.index(sub[, start[, end]])
bytearray.index(sub[, start[, end]])
find() 
bytes.join(iterable)
bytearray.join(iterable)
bytes.maketrans(from, to)
bytearray.maketrans(from, to)
bytes.translate() 
bytes.partition(sep)
bytearray.partition(sep)
bytes.replace(old, new[, count])
bytearray.replace(old, new[, count])
bytes.rfind(sub[, start[, end]])
bytearray.rfind(sub[, start[, end]])
bytes.rindex(sub[, start[, end]])
bytearray.rindex(sub[, start[, end]])
rfind() 
bytes.rpartition(sep)
bytearray.rpartition(sep)
bytes.startswith(prefix[, start[, end]])
bytearray.startswith(prefix[, start[, end]])
bytes.maketrans() 
bytes.center(width[, fillbyte])
bytearray.center(width[, fillbyte])
len(s) 
bytes.ljust(width[, fillbyte])
bytearray.ljust(width[, fillbyte])
len(s) 
bytes.lstrip([chars])
bytearray.lstrip([chars])
lstrip()
bytes.rjust(width[, fillbyte])
bytearray.rjust(width[, fillbyte])
len(s) 
bytes.rsplit(sep=None, maxsplit=-1)
bytearray.rsplit(sep=None, maxsplit=-1)
rsplit() 
split() 
bytes.rstrip([chars])
bytearray.rstrip([chars])
rstrip()
bytes.split(sep=None, maxsplit=-1)
bytearray.split(sep=None, maxsplit=-1)
split()
split(maxsplit=1)
split()
bytes.strip([chars])
bytearray.strip([chars])
strip()
bytes.capitalize()
bytearray.capitalize()
bytes.expandtabs(tabsize=8)
bytearray.expandtabs(tabsize=8)
expandtabs()
expandtabs(4)
bytes.isalnum()
bytearray.isalnum()
isalnum()
isalnum()
bytes.isalpha()
bytearray.isalpha()
isalpha()
isalpha()
bytes.isascii()
bytearray.isascii()
bytes.isdigit()
bytearray.isdigit()
isdigit()
isdigit()
bytes.islower()
bytearray.islower()
islower()
islower()
bytes.isspace()
bytearray.isspace()
bytes.istitle()
bytearray.istitle()
bytes.title() 
istitle()
istitle()
bytes.isupper()
bytearray.isupper()
isupper()
isupper()
bytes.lower()
bytearray.lower()
lower()
bytes.splitlines(keepends=False)
bytearray.splitlines(keepends=False)
splitlines()
splitlines(keepends=True)
split() 
splitlines()
splitlines()
bytes.swapcase()
bytearray.swapcase()
swapcase()
str.swapcase() 
bin.swapcase().swapcase() == bin
bytes.title()
bytearray.title()
title()
title()
def titlecase(s):
lambda mo: mo.group(0)[0:1].upper() 
mo.group(0)[1:].lower()
bytes.upper()
bytearray.upper()
upper()
bytes.zfill(width)
bytearray.zfill(width)
len(seq) 
zfill(5)
zfill(5)
sprintf() 
has %(number)
__bytes__() 
repr(obj).encode
memoryview(obj)
len(view) 
bytes(v[1:4])
a = array.array('l', [-11111111, 22222222, -33333333, 44444444])
m = memoryview(a)
m[::2].tolist()
v = memoryview(data)
hash(m) == hash(m.tobytes()) 
hash(v) == hash
hash(v[2:4]) == hash
hash(v[::-2]) == hash
__eq__(exporter)
tolist() 
v.tolist() == w.tolist() 
a = array.array('I', [1, 2, 3, 4, 5])
b = array.array('d', [1.0, 2.0, 3.0, 4.0, 5.0])
c = array.array('b', [5, 3, 1])
x = memoryview(a)
y = memoryview(b)
x.tolist() == a.tolist() == y.tolist() == b.tolist()
z.tolist() == c.tolist()
class BEPoint(BigEndianStructure
_fields_ = [("x", c_long), ("y", c_long)]
point = BEPoint(100, 200)
a = memoryview(point)
b = memoryview(point)
tobytes(order=None)
m.tobytes()
bytes(m)
tobytes() 
hex([sep[, bytes_per_sep]])
m.hex()
bytes.hex()
memoryview.hex() 
tolist()
tolist()
a = array.array('d', [1.1, 2.2, 3.3])
m = memoryview(a)
m.tolist()
tolist() 
toreadonly()
mm = m.toreadonly()
mm.tolist()
mm.tolist()
release()
release() 
release() 
m.release()
cast(format[, shape])
a = array.array('l', [1,2,3])
x = memoryview(a)
len(x)
y = x.cast('B')
len(y)
x = memoryview(b)
y = x.cast('c')
buf = struct.pack("i"*12, *list(range(12)))
x = memoryview(buf)
y = x.cast('i', shape=[2,2,3])
y.tolist()
len(y)
z = y.cast('b')
len(z)
buf = struct.pack("L"*6, *list(range(6)))
x = memoryview(buf)
y = x.cast('L', shape=[2,3])
len(y)
y.tolist()
m = memoryview(b)
nbytes == product(shape) * itemsize == len(m.tobytes())
len(m) 
a = array.array('i', [1,2,3,4,5])
m = memoryview(a)
len(m)
len(y)
len(y.tobytes())
buf = struct.pack("d"*12, *[1.5*x for x in range(12)])
x = memoryview(buf)
y = x.cast('d', shape=[3,4])
y.tolist()
len(y)
tolist()
m = memoryview(array.array('H', [32000, 32001, 32002]))
struct.calcsize('H') == m.itemsize
len(set)
add() 
remove() 
set([iterable])
frozenset([iterable])
set('foobar')
set(['a', 'b', 'foo'])
len(s)
isdisjoint(other)
issubset(other)
issuperset(other)
union(*others)
intersection(*others)
difference(*others)
symmetric_difference(other)
copy()
union()
intersection()
difference()
symmetric_difference()
issubset()
issuperset() 
set('abc') & 'cbs'
set('abc').intersection('cbs') 
set('abc') == frozenset('abc') 
set('abc') in set([frozenset('abc')]) 
list.sort() 
frozenset('ab') | set('bc') 
update(*others)
intersection_update(*others)
difference_update(*others)
symmetric_difference_update(other)
add(elem)
remove(elem)
discard(elem)
pop()
clear()
update()
intersection_update()
difference_update()
symmetric_difference_update() 
__contains__()
remove()
discard() 
dict(**kwarg)
dict(mapping, **kwarg)
dict(iterable, **kwarg)
2 for x in range(10)
dict([('foo', 100), ('bar', 200)])
dict(foo=100, bar=200)
a = dict(one=1, two=2, three=3)
c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
d = dict([('two', 2), ('one', 1), ('three', 3)])
e = dict({'three': 3, 'one': 1, 'two': 2})
f = dict({'one': 1, 'three': 3}, two=2)
list(d)
len(d)
__missing__() 
__missing__(key) 
__missing__() 
__missing__() 
__missing__() 
class Counter(dict
def __missing__(self, key):
c = Counter()
iter(d)
iter(d.keys()) 
clear()
copy()
fromkeys(iterable[, value])
get(key[, default])
items()
keys()
pop(key[, default])
popitem()
popitem() 
popitem() 
popitem() 
reversed(d)
setdefault(key[, default])
update([other])
update() 
d.update(red=1, blue=2)
values()
d.values() == d.values()
list(d)
list(d.values())
list(reversed(d))
list(reversed(d.values()))
list(reversed(d.items()))
dict.keys()
dict.values()
dict.items() 
len(dictview)
iter(dictview)
pairs = zip(d.values(), d.keys()) 
zip() 
pairs = [(v, k) for (k, v) in d.items()] 
reversed(dictview)
keys = dishes.keys()
values = dishes.values()
print(n)
list(keys)
list(values)
list(keys)
contextmanager.__enter__()
__enter__() 
open() 
decimal.localcontext() 
contextmanager.__exit__(exc_type, exc_val, exc_tb)
__exit__() 
__enter__() 
__exit__() 
def average(values: list[float]) -> float:
return sum(values) / len(values)
def send_post_request(url: str, body: dict[str, int]) -> None:
isinstance() and issubclass() 
isinstance([1, 2], list[str])
t([1, 2, 3])
type(t)
l = t()
type(l)
repr() or str() 
repr(list[int])
str(list[int])
__getitem__() 
Y = TypeVar('Y')
__class_getitem__() 
T = TypeVar('T')
__class_getitem__() -- Used
func(argument-list) 
append() 
def method(self):
c = C()
compile() 
exec() 
eval() 
type() 
type(None)() 
type(Ellipsis)() 
type(NotImplemented)() 
bool() 
dir() 
class.mro()
class.__subclasses__()
int.__subclasses__()
str() 
with_traceback(tb)
tb = sys.exc_info()[2]
with_traceback(tb)
codecs.lookup() 
input() 
end-of-file (EOF) 
io.IOBase.read() 
io.IOBase.readline() 
generator.close() 
coroutine.close() 
malloc() 
OSError([arg])
OSError(errno, strerror[, filename[, winerror[, filename2]]])
perror() 
FormatMessage() 
open() 
os.unlink()
os.rename()
sys.getrecursionlimit() 
weakref.proxy() 
next() 
__next__() 
__anext__() 
exec() 
eval() 
str() 
sys.exit() 
sys.exit() 
exit() 
sys.exit() 
os.fork() 
os._exit() 
os.remove() 
os.listdir() 
zlib.adler32(data[, value])
adler32(data) & 0xffffffff
zlib.compressobj(level=-1, method=DEFLATED, wbits=MAX_WBITS, memLevel=DEF_MEM_LEVEL, strategy=Z_DEFAULT_STRATEGY[, zdict])
zlib.crc32(data[, value])
crc32(data) & 0xffffffff
zlib.decompressobj(wbits=MAX_WBITS[, zdict])
decompressobj() 
decompress() 
Compress.compress(data)
compress() 
Compress.flush([mode])
flush() 
compress() 
Compress.copy()
copy.copy() and copy.deepcopy() 
decompress() 
decompress() 
Decompress.decompress(data, max_length=0)
decompress() 
Decompress.flush([length])
flush() 
decompress() 
Decompress.copy()
copy.copy() and copy.deepcopy() 
open()
compress()
decompress() 
gzip.open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None)
GzipFile(filename, mode, compresslevel) 
gzip.GzipFile(filename=None, mode=None, compresslevel=9, fileobj=None, mtime=None)
truncate() 
open() 
close() 
close() 
getvalue() 
truncate() 
peek(n)
peek() 
time.time() 
os.stat() 
io.BufferedIOBase.read1() 
read() 
gzip.decompress(data)
with gzip.open('/home/joe/file.txt.gz', 'rb') as f:
file_content = f.read()
with gzip.open('/home/joe/file.txt.gz', 'wb') as f:
f.write(content)
with open('/home/joe/file.txt', 'rb') as f_in:
with gzip.open('/home/joe/file.txt.gz', 'wb') as f_out:
shutil.copyfileobj(f_in, f_out)
s_out = gzip.compress(s_in)
open() 
compress() 
decompress() 
bz2.open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None)
BZ2File(filename, mode, compresslevel=compresslevel) 
detach() 
truncate() 
peek([n])
peek() 
fileno() 
readable() 
seekable() 
writable() 
read1() 
readinto() 
read() 
bz2.BZ2Compressor(compresslevel=9)
compress() 
compress(data)
flush() 
flush()
decompress() 
decompress() 
decompress(data, max_length=-1)
decompress() 
decompress() 
decompress() 
decompress() 
bz2.compress(data, compresslevel=9)
bz2.decompress(data)
compress() 
decompress() 
c = bz2.compress(data)
len(data) / len(c)  
d = bz2.decompress(c)
def gen_data(chunks=10, chunksize=1000):
for _ in range(chunks):
comp = bz2.BZ2Compressor()
for chunk in gen_data():
out = out + comp.compress(chunk)
out = out + comp.flush()
with bz2.open("myfile.bz2", "wb") as f:
unused = f.write(data)
with bz2.open("myfile.bz2", "rb") as f:
content = f.read()
detach() 
truncate() 
peek(size=-1)
peek() 
read() 
lzma.LZMACompressor(format=FORMAT_XZ, check=-1, preset=None, filters=None)
compress() 
compress(data)
compress() 
flush() 
compress() 
flush()
lzma.LZMADecompressor(format=FORMAT_AUTO, memlimit=None, filters=None)
decompress() 
decompress() 
decompress(data, max_length=-1)
decompress() 
decompress() 
decompress() 
decompress() 
lzma.compress(data, format=FORMAT_XZ, check=-1, preset=None, filters=None)
lzma.decompress(data, format=FORMAT_AUTO, memlimit=None, filters=None)
lzma.is_check_supported(check)
with lzma.open("file.xz") as f:
file_content = f.read()
with lzma.open("file.xz", "w") as f:
f.write(data)
data_out = lzma.compress(data_in)
lzc = lzma.LZMACompressor()
out4 = lzc.flush()
join([out1, out2, out3, out4])
with open("file.xz", "wb") as f:
with lzma.open(f, "w") as lzf:
with lzma.open("file.xz", "w", filters=my_filters) as f:
zipfile.ZipInfo(filename='NoName', date_time=(1980, 1, 1, 0, 0, 0))
getinfo() 
infolist() 
zipfile.is_zipfile(filename)
module (zlib, bz2 or lzma) is not available
with ZipFile('spam.zip', 'w') as myzip:
myzip.write('eggs.txt')
ZipFile.close()
close() 
ZipFile.getinfo(name)
getinfo() 
ZipFile.infolist()
ZipFile.namelist()
open() 
with ZipFile('spam.zip') as myzip:
with myzip.open('eggs.txt') as myfile:
print(myfile.read())
object (ZipExtFile) is read-only and provides
readline()
readlines()
seek()
tell()
__iter__()
__next__(). These
write() 
open()
read()
extract() 
open() 
open() 
ZipFile.extract(member, path=None, pwd=None)
extract() 
ZipFile.extractall(path=None, members=None, pwd=None)
namelist() 
extract() 
extractall() 
ZipFile.printdir()
ZipFile.setpassword(pwd)
ZipFile.read(name, pwd=None)
setpassword(). Calling
read() 
read() 
ZipFile.testzip()
testzip() 
ZipFile.write(filename, arcname=None, compress_type=None, compresslevel=None)
write() 
ZipFile.writestr(zinfo_or_arcname, data, compress_type=None, compresslevel=None)
writestr() 
zipfile.Path(root, at='')
ZipFile.open() 
ZipFile.open()
Path.iterdir()
Path.is_dir()
Path.is_file()
Path.exists()
Path.read_bytes()
zipfile.PyZipFile(file, mode='r', compression=ZIP_STORED, allowZip64=True, optimize=-1)
writepy(pathname, basename='', filterfunc=None)
compile() 
zf = PyZipFile('myprog.zip')
def notests(s):
fn = os.path.basename(s)
return (not (fn == 'test' or fn.startswith('test_')))
zf.writepy('myprog', filterfunc=notests)
writepy() 
getinfo() 
infolist() 
ZipInfo.is_dir()
1-1988 (ustar) 
1-2001 (pax) 
tarfile.open(name=None, mode='r', fileobj=None, bufsize=10240, **kwargs)
tarfile.open() 
tarfile.open() 
read() 
write() 
tarfile.open() 
tarfile.is_tarfile(name)
TarFile.extract() 
TarInfo.frombuf() 
sys.getfilesystemencoding() 
1-1988 (ustar) 
1-2001 (pax) 
tarfile.TarFile(name=None, mode='r', fileobj=None, format=DEFAULT_FORMAT, tarinfo=TarInfo, dereference=False, ignore_zeros=False, encoding=ENCODING, errors='surrogateescape', pax_headers=None, debug=0, errorlevel=0)
TarFile.extract() 
tarfile.open() 
TarFile.getmember(name)
TarFile.getmembers()
TarFile.getnames()
getmembers() 
getmembers() 
TarFile.next()
getmembers() 
extract() 
extractall() 
extractall() 
TarFile.extractfile(member)
TarFile.addfile(tarinfo, fileobj=None)
gettarinfo() 
TarFile.gettarinfo(name=None, arcname=None, fileobj=None)
os.stat() 
addfile() 
TarFile.close()
getmember()
getmembers() 
gettarinfo() 
tarfile.TarInfo(name="")
TarInfo.frombuf(buf, encoding, errors)
TarInfo.fromtarfile(tarfile)
TarInfo.tobuf(format=DEFAULT_FORMAT, encoding=ENCODING, errors='surrogateescape')
TarInfo.isfile()
TarInfo.isreg()
isfile() 
TarInfo.isdir()
TarInfo.issym()
TarInfo.islnk()
TarInfo.ischr()
TarInfo.isblk()
TarInfo.isfifo()
TarInfo.isdev()
tar = tarfile.open("sample.tar.gz")
tar.extractall()
tar.close()
TarFile.extractall() 
def py_files(members):
if os.path.splitext(tarinfo.name)[1] == ".py":
tar = tarfile.open("sample.tar.gz")
tar.extractall(members=py_files(tar))
tar.close()
tar = tarfile.open("sample.tar", "w")
tar.add(name)
tar.close()
with tarfile.open("sample.tar", "w") as tar:
tar.add(name)
tar = tarfile.open("sample.tar.gz", "r:gz")
print(tarinfo.name, "is", tarinfo.size, "bytes in size and is ", end="")
if tarinfo.isreg():
print("a regular file.")
elif tarinfo.isdir():
print("a directory.")
print("something else.")
tar.close()
TarFile.add() 
def reset(tarinfo):
tar = tarfile.open("sample.tar.gz", "w:gz")
tar.add("foo", filter=reset)
tar.close()
format (USTAR_FORMAT)
format (GNU_FORMAT)
format (PAX_FORMAT). It is the
sys.getfilesystemencoding() 
d.tzinfo.utcoffset(d) 
t.tzinfo.utcoffset(None) 
datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)
datetime.timedelta(days=64, seconds=29156, microseconds=10)
d = timedelta(microseconds=-1)
timedelta(-999999999) 
timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999) 
timedelta(microseconds=1) 
t1 * i == t1 * (i-1) + t1
q, r = divmod(t1, t2)
q = t1 // t2 (3) 
timedelta(-t1.days, -t1.seconds, -t1.microseconds)
abs(t)
str(t)
repr(t)
timedelta(hours=-5)
datetime.timedelta(days=-1, seconds=68400)
print(_)
t2 + (-t3) 
divmod() 
timedelta(seconds=57)
timedelta(hours=25, seconds=2)
timedelta(0) 
timedelta.total_seconds()
td / timedelta(seconds=1) 
td / timedelta(microseconds=1)
year = timedelta(days=365)
year.total_seconds()
year = timedelta(days=365)
datetime.timedelta(days=3650)
datetime.timedelta(days=3285)
datetime.timedelta(days=1095)
datetime.date(year, month, day)
date.today()
date.fromtimestamp(time.time()) 
date.fromtimestamp(timestamp)
time.time() 
localtime() 
localtime() 
fromtimestamp() 
localtime() 
localtime() 
date.fromordinal(ordinal)
1 <= ordinal <= date.max.toordinal() 
date.fromordinal(d.toordinal()) == d
date.fromisoformat(date_string)
date.fromisoformat('2019-12-04')
datetime.date(2019, 12, 4)
date.isoformat() 
date.fromisocalendar(year, week, day)
date.isocalendar() 
date(MINYEAR, 1, 1) 
date(MAXYEAR, 12, 31) 
timedelta(days=1) 
date1.toordinal() < date2.toordinal() 
timetuple() 
timetuple() 
date.replace(year=self.year, month=self.month, day=self.day)
d = date(2002, 12, 31)
d.replace(day=26)
datetime.date(2002, 12, 26)
date.timetuple()
time.localtime() 
d.timetuple() 
time.struct_time((d.year, d.month, d.day, 0, 0, 0, d.weekday(), yday, -1))
yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1
date.toordinal()
date.fromordinal(d.toordinal()) == d
date.weekday()
date(2002, 12, 4).weekday() == 2
isoweekday() 
date.isoweekday()
date(2002, 12, 4).isoweekday() == 3
weekday()
isocalendar() 
date.isocalendar()
date(2003, 12, 29).isocalendar()
datetime.IsoCalendarDate(year=2004, week=1, weekday=1)
date(2004, 1, 4).isocalendar()
datetime.IsoCalendarDate(year=2004, week=1, weekday=7)
date.isoformat()
date(2002, 12, 4).isoformat()
date.fromisoformat() 
date.__str__()
str(d) 
d.isoformat() 
date.ctime()
date(2002, 12, 4).ctime()
d.ctime() 
time.ctime(time.mktime(d.timetuple()))
time.ctime() 
date.ctime() 
ctime() 
date.strftime(format)
strftime() 
strptime() 
date.__format__(format)
date.strftime() 
str.format() 
strftime() 
strptime() 
today = date.today()
datetime.date(2007, 12, 5)
today == date.fromtimestamp(time.time())
my_birthday = date(today.year, 6, 24)
my_birthday = my_birthday.replace(year=today.year + 1)
datetime.date(2008, 6, 24)
time_to_birthday = abs(my_birthday - today)
d = date.fromordinal(730920) 
datetime.date(2002, 3, 11)
d.isoformat()
d.strftime("%d/%m/%y")
d.strftime("%A %d. %B %Y")
d.ctime()
format(d, "day", "month")
t = d.timetuple()
print(i)
weekday (0 = Monday)
ic = d.isocalendar()
print(i)
number ( 1 = Monday )
d.replace(year=2005)
datetime.date(2005, 3, 11)
datetime.today()
datetime.fromtimestamp(time.time())
now()
fromtimestamp() 
now() 
datetime.now(tz=None)
today() 
time.time() 
gettimeofday() 
today() 
utcnow() 
datetime.utcnow()
now() 
datetime.now(timezone.utc) 
now() 
datetime.now(timezone.utc) 
datetime.fromtimestamp(timestamp, tz=None)
time.time() 
localtime() 
gmtime() 
fromtimestamp() 
localtime() 
gmtime() 
fromtimestamp() 
utcfromtimestamp() 
localtime() 
gmtime() 
localtime() 
gmtime() 
fromtimestamp() 
datetime.utcfromtimestamp(timestamp)
localtime() 
gmtime() 
fromtimestamp() 
datetime.fromtimestamp(timestamp, timezone.utc)
datetime(1970, 1, 1, tzinfo=timezone.utc) + timedelta(seconds=timestamp)
datetime.fromtimestamp(timestamp, tz=timezone.utc) 
gmtime() 
gmtime() 
datetime.fromordinal(ordinal)
1 <= ordinal <= datetime.max.toordinal() 
datetime.combine(date, time, tzinfo=self.tzinfo)
d == datetime.combine(d.date(), d.time(), d.tzinfo) 
datetime.fromisoformat(date_string)
date.isoformat() 
datetime.isoformat() 
datetime.isoformat() 
datetime.fromisoformat('2011-11-04')
datetime.datetime(2011, 11, 4, 0, 0)
datetime.fromisoformat('2011-11-04T00:05:23')
datetime.datetime(2011, 11, 4, 0, 5, 23)
datetime.fromisoformat('2011-11-04 00:05:23.283')
datetime.datetime(2011, 11, 4, 0, 5, 23, 283000)
datetime.fromisoformat('2011-11-04 00:05:23.283+00:00')
datetime.datetime(2011, 11, 4, 0, 5, 23, 283000, tzinfo=datetime.timezone.utc)
datetime.fromisoformat('2011-11-04T00:05:23+04:00')   
tzinfo=datetime.timezone(datetime.timedelta(seconds=14400))
datetime.fromisocalendar(year, week, day)
datetime.isocalendar() 
datetime.strptime(date_string, format)
datetime(*(time.strptime(date_string, format)[0:6]))
time.strptime() 
strftime() 
strptime() 
datetime(MINYEAR, 1, 1, tzinfo=None) 
datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None) 
timedelta(microseconds=1) 
range(24) 
range(60) 
range(60) 
range(1000000) 
0 (1) 
date1 + (-timedelta) 
a.replace(tzinfo=None) - a.utcoffset()
- (b.replace(tzinfo=None) - b.utcoffset()) 
self.utcoffset() 
timetuple() 
datetime.date()
datetime.time()
timetz() 
datetime.timetz()
time() 
datetime.astimezone(tz=None)
utcoffset() 
dst() 
self.astimezone(tz) 
astz = dt.astimezone(tz) 
astz - astz.utcoffset() 
dt - dt.utcoffset() 
dt.replace(tzinfo=tz) 
dt.replace(tzinfo=None) 
tzinfo.fromutc() 
astimezone() 
astimezone() 
def astimezone(self, tz):
utc = (self - self.utcoffset()).replace(tzinfo=tz)
return tz.fromutc(utc)
datetime.datetime.astimezone() 
datetime.utcoffset()
self.tzinfo.utcoffset(self) 
datetime.dst()
self.tzinfo.dst(self) 
datetime.tzname()
self.tzinfo.tzname(self) 
datetime.timetuple()
time.localtime() 
d.timetuple() 
d.weekday()
yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1
dst() 
dst() 
dst() 
datetime.utctimetuple()
d.timetuple() 
d.dst() 
d.utcoffset() 
datetime.timetuple() 
datetime.replace(tzinfo=timezone.utc) 
datetime.toordinal()
self.date().toordinal() 
datetime.timestamp()
time.time() 
mktime() 
mktime() 
dt - datetime(1970, 1, 1, tzinfo=timezone.utc)
total_seconds()
timestamp() 
timestamp = dt.replace(tzinfo=timezone.utc).timestamp()
timestamp = (dt - datetime(1970, 1, 1)) / timedelta(seconds=1)
datetime.weekday()
self.date().weekday() 
isoweekday() 
datetime.isoweekday()
self.date().isoweekday() 
weekday() 
isocalendar() 
datetime.isocalendar()
self.date().isocalendar()
datetime.isoformat(sep='T', timespec='auto')
utcoffset() 
datetime(2019, 5, 18, 15, 17, 8, 132263).isoformat()
datetime(2019, 5, 18, 15, 17, tzinfo=timezone.utc).isoformat()
class TZ(tzinfo
def utcoffset(self, dt):
return timedelta(hours=-6, minutes=-39)
datetime(2002, 12, 25, tzinfo=TZ()).isoformat(' ')
datetime(2009, 11, 27, microsecond=100, tzinfo=TZ()).isoformat()
datetime.now().isoformat(timespec='minutes')   
dt = datetime(2015, 1, 1, 12, 30, 59, 0)
dt.isoformat(timespec='microseconds')
datetime.__str__()
str(d) 
d.isoformat(' ') 
datetime.ctime()
datetime(2002, 12, 4, 20, 30, 40).ctime()
d.ctime() 
time.ctime(time.mktime(d.timetuple()))
time.ctime() 
datetime.ctime() 
ctime() 
datetime.strftime(format)
strftime() 
strptime() 
datetime.__format__(format)
datetime.strftime() 
str.format() 
strftime() 
strptime() 
datetime.combine()
d = date(2005, 7, 14)
t = time(12, 30)
datetime.combine(d, t)
datetime.datetime(2005, 7, 14, 12, 30)
datetime.now()
datetime.now()   
datetime.datetime(2007, 12, 6, 16, 29, 43, 79043)   
datetime.now(timezone.utc)   
datetime.datetime(2007, 12, 6, 15, 29, 43, 79060, tzinfo=datetime.timezone.utc)
datetime.strptime()
dt = datetime.strptime("21/11/06 16:30", "%d/%m/%y %H:%M")
datetime.datetime(2006, 11, 21, 16, 30)
datetime.timetuple() 
tt = dt.timetuple()
print(it)
weekday (0 = Monday)
tzinfo.dst() 
ic = dt.isocalendar()
print(it)
dt.strftime("%A, %d. %B %Y %I:%M%p")
format(dt, "day", "month", "time")
class KabulTz(tzinfo
UTC_MOVE_DATE = datetime(1944, 12, 31, 20, tzinfo=timezone.utc)
def utcoffset(self, dt):
return timedelta(hours=4)
elif (1945, 1, 1, 0, 0) <= dt.timetuple()[:5] < (1945, 1, 1, 0, 30):
ambiguous ("imaginary") 
return timedelta(hours=4, minutes=(30 if dt.fold else 0))
return timedelta(hours=4, minutes=30)
def fromutc(self, dt):
if not isinstance(dt, datetime):
raise TypeError("fromutc() requires a datetime argument")
raise ValueError("dt.tzinfo is not self")
if dt.replace(tzinfo=timezone.utc) >= self.UTC_MOVE_DATE:
return dt + timedelta(hours=4, minutes=30)
return dt + timedelta(hours=4)
def dst(self, dt):
return timedelta(0)
def tzname(self, dt):
tz1 = KabulTz()
dt1 = datetime(1900, 11, 21, 16, 30, tzinfo=tz1)
print(dt1.utcoffset())
dt2 = datetime(2006, 6, 14, 13, 0, tzinfo=tz1)
print(dt2.utcoffset())
dt3 = dt2.astimezone(timezone.utc)
datetime.datetime(2006, 6, 14, 8, 30, tzinfo=datetime.timezone.utc)
datetime.datetime(2006, 6, 14, 13, 0, tzinfo=KabulTz())
time(0, 0, 0, 0) 
time(23, 59, 59, 999999) 
timedelta(microseconds=1) 
range(24) 
range(60) 
range(60) 
range(1000000) 
0 (1) 
self.utcoffset() 
time.fromisoformat(time_string)
time.isoformat() 
time.isoformat() 
time.fromisoformat('04:23:01')
datetime.time(4, 23, 1)
time.fromisoformat('04:23:01.000384')
datetime.time(4, 23, 1, 384)
time.fromisoformat('04:23:01+04:00')
datetime.time(4, 23, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=14400)))
time.isoformat(timespec='auto')
utcoffset() 
utcoffset() 
time(hour=12, minute=34, second=56, microsecond=123456).isoformat(timespec='minutes')
dt = time(hour=12, minute=34, second=56, microsecond=0)
dt.isoformat(timespec='microseconds')
dt.isoformat(timespec='auto')
time.__str__()
str(t) 
t.isoformat() 
time.strftime(format)
strftime() 
strptime() 
time.__format__(format)
time.strftime() 
str.format() 
strftime() 
strptime() 
time.utcoffset()
self.tzinfo.utcoffset(None) 
time.dst()
self.tzinfo.dst(None) 
time.tzname()
self.tzinfo.tzname(None) 
class TZ1(tzinfo
def utcoffset(self, dt):
return timedelta(hours=1)
def dst(self, dt):
return timedelta(0)
def tzname(self,dt):
def  __repr__(self):
return f"{self.__class__.__name__}()
t = time(12, 10, 30, tzinfo=TZ1())
datetime.time(12, 10, 30, tzinfo=TZ1())
t.isoformat()
t.dst()
datetime.timedelta(0)
t.tzname()
t.strftime("%H:%M:%S %Z")
format("time", t)
__init__() 
tzinfo.utcoffset(dt)
utcoffset() 
-timedelta(hours=24) 
timedelta(hours=24) 
utcoffset() 
return CONSTANT + self.dst(dt)  
utcoffset() 
dst() 
utcoffset() 
tzinfo.dst(dt)
timedelta(0) 
utcoffset() 
utcoffset() 
dst() 
datetime.timetuple() 
dst() 
tzinfo.fromutc() 
dst() 
tz.utcoffset(dt) - tz.dst(dt)
datetime.astimezone() 
tzinfo.fromutc() 
astimezone() 
dst() 
def dst(self, dt):
return timedelta(0)
def dst(self, dt):
if dston <= dt.replace(tzinfo=None) < dstoff:
return timedelta(hours=1)
return timedelta(0)
dst() 
tzinfo.tzname(dt)
tzname() 
utcoffset(None) 
datetime() 
tzinfo.fromutc(dt)
datetime.astimezone() 
datetime.astimezone() 
fromutc() 
fromutc() 
fromutc() 
astimezone() 
fromutc() 
fromutc() 
def fromutc(self, dt):
dtoff = dt.utcoffset()
dtdst = dt.dst()
dtdst = dt.dst()
ZERO = timedelta(0)
HOUR = timedelta(hours=1)
SECOND = timedelta(seconds=1)
STDOFFSET = timedelta(seconds = -_time.timezone)
DSTOFFSET = timedelta(seconds = -_time.altzone)
class LocalTimezone(tzinfo
def fromutc(self, dt):
stamp = (dt - datetime(1970, 1, 1, tzinfo=self)) // SECOND
args = _time.localtime(stamp)[:6]
fold = (args == _time.localtime(stamp - dst_diff))
def utcoffset(self, dt):
if self._isdst(dt):
def dst(self, dt):
if self._isdst(dt):
def tzname(self, dt):
return _time.tzname[self._isdst(dt)]
def _isdst(self, dt):
dt.weekday()
stamp = _time.mktime(tt)
tt = _time.localtime(stamp)
Local = LocalTimezone()
def first_sunday_on_or_after(dt):
days_to_go = 6 - dt.weekday()
dt += timedelta(days_to_go)
DSTSTART_2007 = datetime(1, 3, 8, 2)
DSTEND_2007 = datetime(1, 11, 1, 2)
DSTSTART_1987_2006 = datetime(1, 4, 1, 2)
DSTEND_1987_2006 = datetime(1, 10, 25, 2)
DSTSTART_1967_1986 = datetime(1, 4, 24, 2)
def us_dst_range(year):
return (datetime(year, 1, 1), ) * 2
start = first_sunday_on_or_after(dststart.replace(year=year))
end = first_sunday_on_or_after(dstend.replace(year=year))
class USTimeZone(tzinfo
def __init__(self, hours, reprname, stdname, dstname):
self.stdoffset = timedelta(hours=hours)
def __repr__(self):
def tzname(self, dt):
if self.dst(dt):
def utcoffset(self, dt):
return self.stdoffset + self.dst(dt)
def dst(self, dt):
fromutc() 
astimezone()
start, end = us_dst_range(dt.year)
dt = dt.replace(tzinfo=None)
def fromutc(self, dt):
start, end = us_dst_range(dt.year)
start = start.replace(tzinfo=self)
end = end.replace(tzinfo=self)
return std_time.replace(fold=1)
Eastern  = USTimeZone(-5, "Eastern",  "EST", "EDT")
Central  = USTimeZone(-6, "Central",  "CST", "CDT")
Mountain = USTimeZone(-7, "Mountain", "MST", "MDT")
Pacific  = USTimeZone(-8, "Pacific",  "PST", "PDT")
59 (EST) 
astimezone(Eastern) 
u0 = datetime(2016, 3, 13, 5, tzinfo=timezone.utc)
for i in range(4):
t = u.astimezone(Eastern)
print(u.time(), 'UTC =', t.time(), t.tzname())
astimezone() 
u0 = datetime(2016, 11, 6, 4, tzinfo=timezone.utc)
for i in range(4):
t = u.astimezone(Eastern)
print(u.time(), 'UTC =', t.time(), t.tzname(), t.fold)
datetime.timezone(offset, name=None)
-timedelta(hours=24) 
timedelta(hours=24) 
datetime.tzname() 
timezone.utcoffset(dt)
timezone.tzname(dt)
tzname(dt) 
timedelta(0) 
offset=timedelta(0) 
timezone.dst(dt)
timezone.fromutc(dt)
timezone(timedelta(0)) 
strftime() 
strptime() 
strftime(format) 
datetime.strptime() 
strftime() 
strptime() 
strftime(format)
strptime(date_string, format)
strftime() 
strptime() 
Sat (en_US)
Sa (de_DE)
Saturday (en_US)
Samstag (de_DE)
Dec (en_US)
Dez (de_DE)
December (en_US)
Dezember (de_DE)
PM (en_US)
pm (de_DE)
1988 (en_US)
1988 (de_DE)
08/16/88 (None)
08/16/1988 (en_US)
1988 (de_DE)
00 (en_US)
00 (de_DE)
strftime() 
strptime() 
strftime() 
strftime(3) 
d.strftime(fmt) 
time.strftime(fmt, d.timetuple()) 
timetuple() 
datetime.strptime() 
datetime.strptime(date_string, format) 
datetime(*(time.strptime(date_string, format)[0:6]))
locale.getlocale() 
strptime() 
strftime() 
strftime() 
strptime() 
strptime() 
utcoffset() 
utcoffset() 
timedelta(hours=-3, minutes=-30) 
strptime() 
strftime()
tzname() 
strptime() 
strptime() 
strptime() 
strptime() 
strptime() 
setfirstweekday() 
calendar.Calendar(firstweekday=0)
iterweekdays()
itermonthdates(year, month)
month (1--12) 
itermonthdays(year, month)
itermonthdates()
itermonthdays2(year, month)
itermonthdates()
itermonthdays3(year, month)
itermonthdates()
itermonthdays4(year, month)
itermonthdates()
monthdatescalendar(year, month)
monthdays2calendar(year, month)
monthdayscalendar(year, month)
yeardatescalendar(year, width=3)
yeardays2calendar(year, width=3)
yeardatescalendar() 
yeardayscalendar(year, width=3)
yeardatescalendar() 
calendar.TextCalendar(firstweekday=0)
formatmonth(theyear, themonth, w=0, l=0)
setfirstweekday() 
prmonth(theyear, themonth, w=0, l=0)
formatmonth() 
formatyear(theyear, w=2, l=1, c=6, m=3)
setfirstweekday() 
pryear(theyear, w=2, l=1, c=6, m=3)
formatyear() 
calendar.HTMLCalendar(firstweekday=0)
formatmonth(theyear, themonth, withyear=True)
formatyear(theyear, width=3)
formatyearpage(theyear, width=3, css='calendar.css', encoding=None)
formatmonthname()
formatmonth()
formatyear()
formatyear()
CustomHTMLCal(calendar.HTMLCalendar)
calendar.LocaleTextCalendar(firstweekday=0, locale=None)
calendar.LocaleHTMLCalendar(firstweekday=0, locale=None)
formatweekday() 
formatmonthname() 
calendar.setfirstweekday(weekday)
calendar.setfirstweekday(calendar.SUNDAY)
calendar.firstweekday()
calendar.isleap(year)
calendar.leapdays(y1, y2)
calendar.weekday(year, month, day)
month (1--12)
day (1--31) 
calendar.weekheader(n)
calendar.monthrange(year, month)
calendar.monthcalendar(year, month)
setfirstweekday()
calendar.prmonth(theyear, themonth, w=0, l=0)
month() 
calendar.month(theyear, themonth, w=0, l=0)
formatmonth() 
calendar.prcal(year, w=0, l=0, c=6, m=3)
calendar() 
calendar.calendar(year, w=2, l=1, c=6, m=3)
formatyear() 
calendar.timegm(tuple)
gmtime() 
time.gmtime() 
timegm() 
namedtuple()
update() 
collections.ChainMap(*maps)
new_child(m=None)
d.new_child() 
ChainMap({}, *d.maps) 
super() 
ChainMap(*d.maps[1:]) 
ChainMap() 
list(ChainMap(adjustments, baseline))
dict.update() 
combined = baseline.copy()
combined.update(adjustments)
list(combined)
new_child() 
pylookup = ChainMap(locals(), globals(), vars(builtins))
parser = argparse.ArgumentParser()
parser.add_argument('-u', '--user')
parser.add_argument('-c', '--color')
namespace = parser.parse_args()
command_line_args = {k: v for k, v in vars(namespace).items() if v is not None}
combined = ChainMap(command_line_args, os.environ, defaults)
print(combined['color'])
print(combined['user'])
c = ChainMap()        
d = c.new_child()     
e = c.new_child()     
locals()
list(d)               
len(d)                
d.items()             
dict(d)               
class DeepChainMap(ChainMap
def __setitem__(self, key, value):
def __delitem__(self, key):
raise KeyError(key)
d = DeepChainMap({'zebra': 'black'}, {'elephant': 'blue'}, {'lion': 'yellow'})
DeepChainMap({'zebra': 'black', 'snake': 'red'}, {}, {'lion': 'orange'})
cnt = Counter()
Counter({'blue': 3, 'red': 2, 'green': 1})
w+', open('
read().lower()
Counter(words).most_common(10)
collections.Counter([iterable-or-mapping])
c = Counter()                           
c = Counter('gallahad')                 
c = Counter({'red': 4, 'blue': 2})      
c = Counter(cats=4, dogs=8)             
c = Counter(['eggs', 'ham'])
elements()
elements() 
c = Counter(a=4, b=2, c=0, d=-2)
sorted(c.elements())
most_common([n])
most_common() 
Counter('abracadabra').most_common(3)
subtract([iterable-or-mapping])
dict.update() 
c = Counter(a=4, b=2, c=0, d=-2)
d = Counter(a=1, b=2, c=3, d=4)
c.subtract(d)
Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})
fromkeys(iterable)
update([iterable-or-mapping])
dict.update() 
sum(c.values())                 
c.clear()                       
list(c)                         
set(c)                          
dict(c)                         
c.items()                       
of (elem, cnt) 
Counter(dict(list_of_pairs))    
of (elem, cnt) 
c.most_common()[:-n-1:-1]       
c = Counter(a=3, b=1)
d = Counter(a=1, b=2)
Counter({'a': 4, 'b': 3})
Counter({'a': 2})
Counter({'a': 1, 'b': 1})
Counter({'a': 3, 'b': 2})
c = Counter(a=2, b=-4)
Counter({'a': 2})
Counter({'b': 4})
most_common() 
update() 
subtract() 
elements() 
itertools.combinations_with_replacement() 
map(Counter, combinations_with_replacement('ABC', 2)) 
collections.deque([iterable[, maxlen]])
append() 
O(1) 
pop(0) 
insert(0, v) 
O(n) 
append(x)
appendleft(x)
clear()
copy()
count(x)
extend(iterable)
extendleft(iterable)
index(x[, start[, stop]])
insert(i, x)
pop()
popleft()
remove(value)
reverse()
rotate(n=1)
d.appendleft(d.pop()) 
d.append(d.popleft()) 
len(d)
reversed(d)
copy.copy(d)
copy.deepcopy(d)
access is O(1) 
O(n) in the
__add__()
__mul__()
__imul__() 
d = deque('ghi')                 
print(elem.upper())
d.append('j')                    
d.appendleft('f')                
deque(['f', 'g', 'h', 'i', 'j'])
d.pop()                          
d.popleft()                      
list(d)                          
list(reversed(d))                
d.extend('jkl')                  
deque(['g', 'h', 'i', 'j', 'k', 'l'])
d.rotate(1)                      
deque(['l', 'g', 'h', 'i', 'j', 'k'])
d.rotate(-1)                     
deque(['g', 'h', 'i', 'j', 'k', 'l'])
deque(reversed(d))               
deque(['l', 'k', 'j', 'i', 'h', 'g'])
d.clear()                        
d.pop()                          
d.pop()
d.extendleft('abc')              
extendleft() 
deque(['c', 'b', 'a'])
def tail(filename, n=10):
with open(filename) as f:
return deque(f, n)
def moving_average(iterable, n=3):
moving_average([40, 30, 50, 46, 39, 44]) 
it = iter(iterable)
d = deque(itertools.islice(it, n-1))
d.appendleft(0)
s = sum(d)
s += elem - d.popleft()
d.append(elem)
popleft() 
rotate() 
def roundrobin(*iterables):
roundrobin('ABC', 'D', 'EF') 
iterators = deque(map(iter, iterables))
yield next(iterators[0])
iterators.rotate(-1)
iterators.popleft()
rotate() 
rotate() 
def delete_nth(d, n):
d.rotate(-n)
d.popleft()
d.rotate(n)
rotate() 
popleft() 
extend() 
__missing__(key)
__getitem__() 
__getitem__() 
__missing__() 
__getitem__() 
get() 
__missing__() 
s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
d = defaultdict(list)
d[k].append(v)
sorted(d.items())
list.append() 
list.append() 
dict.setdefault() 
d.setdefault(k, []).append(v)
sorted(d.items())
d = defaultdict(int)
sorted(d.items())
int() 
int() 
def constant_factory(value):
d = defaultdict(constant_factory('<missing>'))
d.update(name='John', action='ran')
s %(action)
to %(object)
s = [('red', 1), ('blue', 2), ('red', 3), ('blue', 4), ('red', 1), ('blue', 4)]
d = defaultdict(set)
d[k].add(v)
sorted(d.items())
namedtuple() 
__repr__() 
Point = namedtuple('Point', ['x', 'y'])
p = Point(11, y=22)     
tuple (11, 22)
Point(x=11, y=22)
EmployeeRecord = namedtuple('EmployeeRecord', 'name, age, title, department, paygrade')
for emp in map(EmployeeRecord._make, csv.reader(open("employees.csv", "rb"))):
print(emp.name, emp.title)
conn = sqlite3.connect('/companydata')
cursor = conn.cursor()
cursor.execute('SELECT name, age, title, department, paygrade FROM employees')
for emp in map(EmployeeRecord._make, cursor.fetchall()):
print(emp.name, emp.title)
somenamedtuple._make(iterable)
Point._make(t)
Point(x=11, y=22)
somenamedtuple._asdict()
p = Point(x=11, y=22)
p._asdict()
nt._asdict()
somenamedtuple._replace(**kwargs)
p = Point(x=11, y=22)
p._replace(x=33)
Point(x=33, y=22)
for partnum, record in inventory.items():
inventory[partnum] = record._replace(price=newprices[partnum], timestamp=time.now())
Color = namedtuple('Color', 'red green blue')
Pixel = namedtuple('Pixel', Point._fields + Color._fields)
Pixel(11, 22, 128, 255, 0)
Pixel(x=11, y=22, red=128, green=255, blue=0)
Account = namedtuple('Account', ['type', 'balance'], defaults=[0])
Account('premium')
Account(type='premium', balance=0)
getattr() 
getattr(p, 'x')
Point(**d)
Point(x=11, y=22)
Point(namedtuple('Point', ['x', 'y']))
def hypot(self):
return (self.x ** 2 + self.y ** 2) ** 0.5
def __str__(self):
return 'Point: x=%6.3f  y=%6.3f  hypot=%6.3f' % (self.x, self.y, self.hypot)
p in Point(3, 4)
Point(14, 5/7)
print(p)
Point3D = namedtuple('Point3D', Point._fields + ('z',))
Book = namedtuple('Book', ['id', 'title', 'authors'])
class Component(NamedTuple
types.SimpleNamespace() 
popitem() 
move_to_end() 
__reversed__() 
collections.OrderedDict([items])
popitem(last=True)
popitem() 
move_to_end(key, last=True)
d = OrderedDict.fromkeys('abcde')
d.move_to_end('b')
join(d.keys())
d.move_to_end('b', last=False)
join(d.keys())
reversed() 
list(od1.items())==list(od2.items()) 
reversed() 
update() 
class LastUpdatedOrderedDict(OrderedDict
def __setitem__(self, key, value):
super().__setitem__(key, value)
self.move_to_end(key)
functools.lru_cache() 
class LRU(OrderedDict
super().__init__(*args, **kwds)
def __getitem__(self, key):
value = super().__getitem__(key)
self.move_to_end(key)
def __setitem__(self, key, value):
self.move_to_end(key)
super().__setitem__(key, value)
if len(self) > self.maxsize:
oldest = next(iter(self))
collections.UserDict([initialdata])
collections.UserList([list])
collections.UserString(seq)
str() 
__contains__() 
__hash__() 
__len__() 
__call__() 
__iter__() 
isinstance(obj, Iterable) 
__iter__() 
__getitem__() 
iter(obj) 
__iter__() 
__next__() 
__reversed__() 
send()
throw()
close() 
__iter__()
__reversed__()
index() 
__getitem__() 
__getitem__() 
index() 
__await__() 
types.coroutine() 
asyncio.coroutine() 
__await__() 
isinstance(gencoro, Awaitable) 
inspect.isawaitable() 
send()
throw()
close() 
__await__() 
types.coroutine() 
asyncio.coroutine() 
__await__() 
isinstance(gencoro, Coroutine) 
inspect.isawaitable() 
if isinstance(myvar, collections.abc.Sized):
size = len(myvar)
__contains__()
__iter__()
__len__() 
__and__() 
isdisjoint() 
ListBasedSet(collections.abc.Set)
def __init__(self, iterable):
lst.append(value)
def __iter__(self):
return iter(self.elements)
def __contains__(self, value):
def __len__(self):
return len(self.elements)
s1 = ListBasedSet('abcdef')
s2 = ListBasedSet('defghi')
__and__() 
ClassName(iterable). That
_from_iterable() 
cls(iterable) 
_from_iterable() 
__le__() 
__ge__() 
_hash() 
__hash__() 
heap.sort() 
heapify() 
heapq.heappush(heap, item)
heapq.heappop(heap)
heapq.heappushpop(heap, item)
heappush() 
heappop() 
heapq.heapify(x)
heapq.heapreplace(heap, item)
heappop() 
heappush() 
heappushpop() 
heapq.merge(*iterables, key=None, reverse=False)
sorted(itertools.chain(*iterables)) 
sorted(itertools.chain(*iterables), reverse=True)
heapq.nlargest(n, iterable, key=None)
heapq.nsmallest(n, iterable, key=None)
sorted() 
min() 
max() 
def heapsort(iterable):
heappush(h, value)
return [heappop(h) for i in range(len(h))]
heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])
sorted(iterable) 
sorted() 
heappush(h, (5, 'write code'))
heappush(h, (7, 'release product'))
heappush(h, (1, 'write spec'))
heappush(h, (3, 'create tests'))
heappop(h)
dataclass(order=True)
item: Any=field(compare=False)
counter = itertools.count()     
def add_task(task, priority=0):
remove_task(task)
count = next(counter)
heappush(pq, entry)
def remove_task(task):
entry = entry_finder.pop(task)
def pop_task():
priority, count, task = heappop(pq)
raise KeyError('pop from an empty priority queue')
bisect.bisect_left(a, x, lo=0, hi=len(a))
list.insert() 
all(val < x for val in a[lo:i]) 
all(val >= x for val in a[i:hi]) 
bisect.bisect_right(a, x, lo=0, hi=len(a))
bisect.bisect(a, x, lo=0, hi=len(a))
bisect_left() 
all(val <= x for val in a[lo:i]) 
all(val > x for val in a[i:hi]) 
bisect.insort_left(a, x, lo=0, hi=len(a))
a.insert(bisect.bisect_left(a, x, lo, hi), x) 
O(n) 
bisect.insort_right(a, x, lo=0, hi=len(a))
bisect.insort(a, x, lo=0, hi=len(a))
insort_left() 
bisect() 
def index(a, x):
i = bisect_left(a, x)
if i != len(a) and a[i] == x:
def find_lt(a, x):
i = bisect_left(a, x)
def find_le(a, x):
i = bisect_right(a, x)
def find_gt(a, x):
i = bisect_right(a, x)
if i != len(a):
def find_ge(a, x):
i = bisect_left(a, x)
if i != len(a):
bisect() 
bisect() 
def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):
i = bisect(breakpoints, score)
grade(score) for score in [33, 99, 77, 70, 89, 90, 100]
sorted() 
bisect() 
data = [('red', 5), ('blue', 1), ('yellow', 8), ('black', 0)]
data[bisect_left(keys, 0)]
data[bisect_left(keys, 1)]
data[bisect_left(keys, 5)]
data[bisect_left(keys, 8)]
array('u') 
array.array(typecode[, initializer])
fromlist() 
frombytes() 
fromunicode() 
extend() 
array.append(x)
array.buffer_info()
array.buffer_info()[1] * array.itemsize
ioctl() 
buffer_info() 
array.byteswap()
array.count(x)
array.extend(iterable)
array.frombytes(s)
fromfile() 
fromstring() 
frombytes() 
array.fromfile(f, n)
read() 
array.fromlist(list)
a.append(x) 
array.fromunicode(s)
array.frombytes(unicodestring.encode(enc)) 
array.index(x)
array.insert(i, x)
array.pop([i])
array.remove(x)
array.reverse()
array.tobytes()
tofile() 
tostring() 
tobytes() 
array.tofile(f)
array.tolist()
array.tounicode()
array.tobytes().decode(enc) 
array(typecode, initializer) 
eval() 
array('l')
array('u', 'hello \u2641')
array('l', [1, 2, 3, 4, 5])
array('d', [1.0, 2.0, 3.14])
written in Python (but not in C)
class Dict(dict
obj = Dict(red=1, green=2, blue=3)   
weakref.ref(object[, callback])
__del__() 
hash() 
weakref.proxy(object[, callback])
ref() 
weakref.getweakrefcount(object)
weakref.getweakrefs(object)
weakref.WeakKeyDictionary([dict])
WeakKeyDictionary.keyrefs()
weakref.WeakValueDictionary([dict])
keyrefs() 
WeakValueDictionary.valuerefs()
weakref.WeakSet([elements])
weakref.WeakMethod(method)
def method(self):
print("method called!")
c = C()
r = weakref.ref(c.method)
r()
r = weakref.WeakMethod(c.method)
r()
r()()
gc.collect()
r()
func(*arg, **kwargs) 
__del__() 
__call__()
func(*args, **kwargs). If
detach()
tuple (obj, func, args, kwargs). If
peek()
tuple (obj, func, args, kwargs). If
o = Object()
r = weakref.ref(o)
o2 = r()
print(r())
ref() is not None
o = r()
print("Object has been deallocated; can't frobnicate.")
print("Object is still live!")
o.do_something_useful()
if r() is not None: 
r().do_something() 
r()
ExtendedRef(weakref.ref)
super(ExtendedRef, self).__init__(ob, callback)
for k, v in annotations.items():
setattr(self, k, v)
def __call__(self):
ob = super(ExtendedRef, self).__call__()
ob = (ob, self.__counter)
_id2obj_dict = weakref.WeakValueDictionary()
def remember(obj):
oid = id(obj)
def id2obj(oid):
kenny = Object()
weakref.finalize(kenny, print, "You killed Kenny!")  
def callback(x, y, z):
print("CALLBACK")
obj = Object()
f = weakref.finalize(obj, callback, 1, 2, z=3)
assert f() == 6
f()                     
detach() 
obj = Object()
f = weakref.finalize(obj, callback, 1, 2, z=3)
f.detach()                                           
assert func(*args, **kwargs) == 6
obj = Object()
weakref.finalize(obj, print, "obj dead or exiting")
exit()
__del__() 
remove() 
__del__() 
def __init__(self):
self.name = tempfile.mkdtemp()
def remove(self):
shutil.rmtree(self.name)
def removed(self):
def __del__(self):
self.remove()
__del__() 
__del__() 
def __init__(self):
self.name = tempfile.mkdtemp()
self._finalizer = weakref.finalize(self, shutil.rmtree, self.name)
def remove(self):
self._finalizer()
def removed(self):
def unloading_module():
weakref.finalize(sys.modules[__name__], unloading_module)
types.resolve_bases(bases)
isinstance() 
issubclass() 
types.CodeType(**kwargs)
compile() 
replace(**kwargs)
len() 
sys.exit() 
object.__init__() or object.__lt__()
object().__str__
str.join()
types.ModuleType(name, doc=None)
getattr(module, "__loader__", None) 
getattr(module, "__package__", None) 
types.GenericAlias(t_origin, t_args)
list[int] == GenericAlias(list, (int,))
dict[str, int] == GenericAlias(dict, (str, int))
types.TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)
sys.exc_info()[2] 
types.MappingProxyType(mapping)
iter(proxy)
iter(proxy.keys()) 
len(proxy)
copy()
get(key[, default])
items()
keys()
values()
reversed(proxy)
self.__dict__.update(kwargs)
def __repr__(self):
v in self.__dict__.items()
return "{}({})".format(type(self).__name__, ", ".join(items))
def __eq__(self, other):
if isinstance(self, SimpleNamespace) and isinstance(other, SimpleNamespace):
namedtuple() 
types.DynamicClassAttribute(fget=None, fset=None, fdel=None, doc=None)
types.coroutine(gen_func)
__await__() 
copy.copy(x)
copy.deepcopy(x[, memo])
deepcopy() 
dict.copy() 
__copy__() 
__deepcopy__() 
__deepcopy__() 
deepcopy() 
write() 
stuff.insert(0, stuff[:])
pp = pprint.PrettyPrinter(indent=4)
pp.pprint(stuff)
pp = pprint.PrettyPrinter(width=41, compact=True)
pp.pprint(stuff)
pp = pprint.PrettyPrinter(depth=6)
pp.pprint(tup)
pprint.pp(object, *args, sort_dicts=False, **kwargs)
pprint() 
print() 
stuff.insert(0, stuff)
pprint.pprint(stuff)
pprint.isreadable(object)
eval(). This
pprint.isreadable(stuff)
pprint.isrecursive(object)
pprint.saferepr(object)
pprint.saferepr(stuff)
PrettyPrinter.pformat(object)
PrettyPrinter.pprint(object)
PrettyPrinter.isreadable(object)
eval() 
PrettyPrinter.isrecursive(object)
saferepr() 
PrettyPrinter.format(object, context, maxlevels, level)
id() 
format() 
pprint() 
with urlopen('https://pypi.org/pypi/sampleproject/json') as resp:
project_info = json.load(resp)['info']
pprint() 
pprint.pprint(project_info)
pprint.pprint(project_info, depth=1)
pprint.pprint(project_info, depth=1, width=60)
repr() 
repr() 
repr() 
repr() 
reprlib.repr(obj)
repr() 
__repr__() 
reprlib.recursive_repr(fillvalue="...")
__repr__() 
__repr__() 
class MyList(list
recursive_repr()
def __repr__(self):
return '<' + '|'.join(map(repr, self)) + '>'
m = MyList('abc')
m.append(m)
m.append('x')
print(m)
Repr.repr(obj)
repr() 
Repr.repr1(obj, level)
repr() 
repr1() 
Repr.repr_TYPE(obj, level)
join(type(obj).__name__.split()) 
repr1() 
self.repr1(subobj, level - 1) 
Repr.repr1() 
MyRepr(reprlib.Repr)
def repr_TextIOWrapper(self, obj, level):
return repr(obj)
aRepr = MyRepr()
print(aRepr.repr(sys.stdin))         
unique() 
enum.unique()
class Color(Enum
print(Color.RED)
print(repr(Color.RED))
type(Color.RED)
isinstance(Color.GREEN, Color)
print(Color.RED.name)
class Shake(Enum
print(shake)
Color(1)
Color(3)
class Shape(Enum
class Shape(Enum
Shape(2)
class Mistake(Enum
class Color(Enum
RED = auto()
BLUE = auto()
GREEN = auto()
list(Color)
_generate_next_value_() 
class AutoName(Enum
def _generate_next_value_(name, start, count, last_values):
class Ordinal(AutoName
NORTH = auto()
SOUTH = auto()
EAST = auto()
WEST = auto()
list(Ordinal)
_generate_next_value_() 
_generate_next_value_() 
list(Shape)
for name, member in Shape.__members__.items():
name for name, member in Shape.__members__.items() if member.name != name
class Mood(Enum
def describe(self):
def __str__(self):
return 'my custom str! {0}'.format(self.value)
def favorite_mood(cls):
Mood.favorite_mood()
Mood.HAPPY.describe()
str(Mood.FUNKY)
__str__()
__add__()
__new__() 
__init__() 
value(s) 
class MoreColor(Color
class Foo(Enum
def some_behavior(self):
class Bar(Foo
Fruit.TOMATO is loads(dumps(Fruit.TOMATO))
__reduce_ex__() 
Animal = Enum('Animal', 'ANT BEE CAT DOG')
list(Animal)
class Animal(Enum
Animal = Enum('Animal', 'ANT BEE CAT DOG', module=__name__)
Animal = Enum('Animal', 'ANT BEE CAT DOG', qualname='SomeData.Animal')
class Shape(IntEnum
class Request(IntEnum
class Shape(IntEnum
class Color(Enum
int(Shape.CIRCLE)
i for i in range(Shape.SQUARE)
class Perm(IntFlag
class Perm(IntFlag
bool(Perm.R & Perm.X)
class Color(Flag
RED = auto()
BLUE = auto()
GREEN = auto()
bool(Color.RED & Color.GREEN)
class Color(Flag
RED = auto()
BLUE = auto()
GREEN = auto()
class Color(Flag
RED = auto()
BLUE = auto()
GREEN = auto()
bool(Color.BLACK)
IntEnum(int, Enum)
__str__() 
__repr__() 
str.format()
format() 
__format__() 
__str__() or __format__() is overridden in the
__str__() and __repr__() 
__new__() 
vs. __init__()
__new__() 
__new__() or __init__()
__init__() 
Coordinate(bytes, Enum)
def __new__(cls, value, label, unit):
obj = bytes.__new__(cls, [value])
PX = (0, 'P.X', 'km')
PY = (1, 'P.Y', 'km')
VX = (2, 'V.X', 'km/s')
VY = (3, 'V.Y', 'km/s')
print(Coordinate['PY'])
print(Coordinate(3))
__new__() 
repr() 
class NoValue(Enum
def __repr__(self):
return '<%s.%s>' % (self.__class__.__name__, self.name)
class Color(NoValue
RED = auto()
BLUE = auto()
GREEN = auto()
class Color(NoValue
RED = object()
GREEN = object()
BLUE = object()
class Color(NoValue
__new__() 
__new__() 
class AutoNumber(NoValue
def __new__(cls):
value = len(cls.__members__) + 1
obj = object.__new__(cls)
class Color(AutoNumber
class AutoNumber(NoValue
def __new__(cls, *args):      
value = len(cls.__members__) + 1
obj = object.__new__(cls)
class Swatch(AutoNumber
def __init__(self, pantone='unknown'):
__new__() 
__new__() 
class OrderedEnum(Enum
def __ge__(self, other):
def __gt__(self, other):
def __le__(self, other):
def __lt__(self, other):
class Grade(OrderedEnum
class DuplicateFreeEnum(Enum
def __init__(self, *args):
if any(self.value == e.value for e in cls):
e = cls(self.value).name
class Color(DuplicateFreeEnum
unique() 
__new__() 
__init__() 
class Planet(Enum
MERCURY = (3.303e+23, 2.4397e6)
VENUS   = (4.869e+24, 6.0518e6)
EARTH   = (5.976e+24, 6.37814e6)
MARS    = (6.421e+23, 3.3972e6)
JUPITER = (1.9e+27,   7.1492e7)
SATURN  = (5.688e+26, 6.0268e7)
URANUS  = (8.686e+25, 2.5559e7)
NEPTUNE = (1.024e+26, 2.4746e7)
def __init__(self, mass, radius):
def surface_gravity(self):
return G * self.mass / (self.radius * self.radius)
Period(timedelta, Enum)
Period = vars()
for i in range(367):
list(Period)[:2]
datetime.timedelta(0)
datetime.timedelta(days=1)
list(Period)[-2:]
datetime.timedelta(days=365)
datetime.timedelta(days=366)
__contains__()
__dir__()
__iter__() and other
list(Color) or some_enum_var in Color. EnumMeta is responsible
__new__()
__getnewargs__()
__str__() and __repr__()
__new__() 
__new__() 
__new__() 
class Color(Enum
class FieldTypes(Enum
def __bool__(self):
return bool(self.value)
dir() 
dir() 
dir(Planet)
dir(Planet.EARTH)
repr() 
class Color(Flag
RED = auto()
GREEN = auto()
BLUE = auto()
Color(3)  
Color(7)      
csv.reader(csvfile, dialect='excel', **fmtparams)
__next__() 
list_dialects() 
with open('eggs.csv', newline='') as csvfile:
spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
print(', '.join(row))
csv.writer(csvfile, dialect='excel', **fmtparams)
write() 
list_dialects() 
str() 
with open('eggs.csv', 'w', newline='') as csvfile:
spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])
spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])
csv.unregister_dialect(name)
csv.get_dialect(name)
csv.list_dialects()
csv.field_size_limit([new_limit])
csv.DictReader(f, fieldnames=None, restkey=None, restval=None, dialect='excel', *args, **kwds)
with open('names.csv', newline='') as csvfile:
reader = csv.DictReader(csvfile)
print(row['first_name'], row['last_name'])
print(row)
csv.DictWriter(f, fieldnames, restval='', extrasaction='raise', dialect='excel', *args, **kwds)
writerow() 
writerow() 
with open('names.csv', 'w', newline='') as csvfile:
writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
writer.writeheader()
writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'})
writer.writerow({'first_name': 'Lovely', 'last_name': 'Spam'})
writer.writerow({'first_name': 'Wonderful', 'last_name': 'Spam'})
sniff(sample, delimiters=None)
has_header(sample)
with open('example.csv', newline='') as csvfile:
dialect = csv.Sniffer().sniff(csvfile.read(1024))
csvfile.seek(0)
reader = csv.reader(csvfile, dialect)
validate() 
reader() 
csvreader.__next__()
reader() 
next(reader) 
writer() 
str() 
csvwriter.writerow(row)
csvwriter.writerows(rows)
DictWriter.writeheader()
csvwriter.writerow() 
writeheader() 
csvwriter.writerow() 
with open('some.csv', newline='') as f:
reader = csv.reader(f)
print(row)
with open('passwd', newline='') as f:
reader = csv.reader(f, delimiter=':', quoting=csv.QUOTE_NONE)
print(row)
with open('some.csv', 'w', newline='') as f:
writer = csv.writer(f)
writer.writerows(someiterable)
open() 
locale.getpreferredencoding() 
with open('some.csv', newline='', encoding='utf-8') as f:
reader = csv.reader(f)
print(row)
csv.register_dialect('unixpwd', delimiter=':', quoting=csv.QUOTE_NONE)
with open('passwd', newline='') as f:
reader = csv.reader(f, 'unixpwd')
with open(filename, newline='') as f:
reader = csv.reader(f)
print(row)
sys.exit('file {}, line {}: {}'.format(filename, reader.line_num, e))
for row in csv.reader(['one,two,three']):
print(row)
1(1,2)
config = configparser.ConfigParser()
with open('example.ini', 'w') as configfile:
config.write(configfile)
config = configparser.ConfigParser()
config.sections()
config.read('example.ini')
config.sections()
print(key)
int(topsecret['Port'])
float(topsecret['CompressionLevel'])
bool() 
bool('False') 
getboolean() 
topsecret.getboolean('ForwardX11')
config['bitbucket.org'].getboolean('ForwardX11')
config.getboolean('bitbucket.org', 'Compression')
getboolean() 
getint() 
getfloat() 
get() 
topsecret.get('Port')
topsecret.get('CompressionLevel')
topsecret.get('Cipher')
topsecret.get('Cipher', '3des-cbc')
topsecret.get('CompressionLevel', '3')
get() 
getint() 
getfloat() 
getboolean() 
topsecret.getboolean('BatchMode', fallback=True)
topsecret.getboolean('BatchMode', fallback=True)
get() 
BasicInterpolation() 
clear() 
parser.clear() 
parser.popitem() 
parser.get(section, option, **kwargs) 
get() 
parser.items() 
parser.items(section, raw, vars) 
__init__() 
read_dict() 
parser = configparser.ConfigParser()
parser.sections()
config = configparser.ConfigParser(allow_no_value=True)
config.read_string(sample_config)
ConfigParser.write() 
comment_prefixes=('#',';') 
inline_comment_prefixes=(';',) 
parser = ConfigParser(interpolation=ExtendedInterpolation())
print(parser['hashes']['shebang'])
print(parser['hashes']['extensions'])
print(parser['hashes']['interpolation not necessary'])
print(parser['hashes']['even in multiline values'])
read_file()
read_string() 
read_dict() 
ExtendedInterpolation() 
getint()
getfloat()
getboolean() 
getdecimal() 
parser_instance.getdecimal('section', 'key', fallback=0) 
parser_instance['section'].getdecimal('key', 0) 
getdecimal() 
getboolean() 
custom = configparser.ConfigParser()
custom['section1'].getboolean('funky')
custom['section1'].getboolean('funky')
ConfigParser.optionxform(option)
typical = configparser.ConfigParser()
typical.read_string(config)
list(typical['Section1'].keys())
list(typical['Section2'].keys())
custom = configparser.RawConfigParser()
custom.read_string(config)
list(custom['Section1'].keys())
list(custom['Section2'].keys())
typical = configparser.ConfigParser()
typical.read_string(config)
typical.sections()
custom = configparser.ConfigParser()
custom.read_string(config)
custom.sections()
config = configparser.RawConfigParser()
set() 
config.add_section('Section1')
config.set('Section1', 'an_int', '15')
config.set('Section1', 'a_bool', 'true')
config.set('Section1', 'a_float', '3.1415')
config.set('Section1', 'baz', 'fun')
config.set('Section1', 'bar', 'Python')
config.set('Section1', 'foo', '%(bar)s is %(baz)s!')
with open('example.cfg', 'w') as configfile:
config.write(configfile)
config = configparser.RawConfigParser()
config.read('example.cfg')
getfloat() 
getint() and getboolean() 
a_float = config.getfloat('Section1', 'a_float')
an_int = config.getint('Section1', 'an_int')
print(a_float + an_int)
RawConfigParser()
if config.getboolean('Section1', 'a_bool'):
print(config.get('Section1', 'foo'))
cfg = configparser.ConfigParser()
cfg.read('example.cfg')
get() 
print(cfg.get('Section1', 'foo', raw=False))  
print(cfg.get('Section1', 'foo', raw=True))   
is %(baz)
print(cfg.get('Section1', 'foo'))
print(cfg.get('Section1', 'foo', fallback='Monty is not.'))
print(cfg.get('Section1', 'monster', fallback='No such things as monsters.'))
print(cfg.get('Section1', 'monster')) 
print(cfg.get('Section1', 'monster', fallback=None))
config = configparser.ConfigParser({'bar': 'Life', 'baz': 'hard'})
config.read('example.cfg')
print(config.get('Section1', 'foo'))     
config.remove_option('Section1', 'bar')
config.remove_option('Section1', 'baz')
print(config.get('Section1', 'foo'))     
configparser.ConfigParser(defaults=None, dict_type=dict, allow_no_value=False, delimiters=('=', ':'), comment_prefixes=('#', ';'), inline_comment_prefixes=None, strict=True, empty_lines_in_values=True, default_section=configparser.DEFAULTSECT, interpolation=BasicInterpolation(), converters={})
ExtendedInterpolation() 
optionxform() 
optionxform() 
foo %(bar)
foo %(BAR)
read_dict()
defaults()
sections()
add_section(section)
has_section(section)
options(section)
has_option(section, option)
read(filenames, encoding=None)
read() 
read_file() 
config = configparser.ConfigParser()
config.read_file(open('defaults.cfg'))
os.path.expanduser('~/.myapp.cfg')
open() 
read_file(f, source=None)
readfp() 
read_string(string, source='<string>')
read_dict(dictionary, source='<dict>')
items() 
get() 
get() 
get() 
items(raw=False, vars=None)
items(section, raw=False, vars=None)
get() 
set(section, option, value)
write(fileobject, space_around_delimiters=True)
read() 
remove_option(section, option)
remove_section(section)
optionxform(option)
cfgparser = ConfigParser()
optionxform() 
readfp(fp, filename=None)
read_file() 
readfp() 
fp.readline() 
readfp() 
def readline_generator(fp):
line = fp.readline()
line = fp.readline()
parser.readfp(fp) 
parser.read_file(readline_generator(fp)) 
get() 
comment_prefixes=('#', ';')
ConfigParser(interpolation=None) 
add_section(section)
set(section, option, value)
add_section() 
__init__() 
__init__() 
netrc.netrc([file])
os.path.expanduser() 
os.path.expanduser() 
netrc.authenticators(host)
netrc.__repr__()
xdrlib.Unpacker(data)
Packer.get_buffer()
Packer.reset()
pack_type() 
pack_uint() 
pack_int() 
pack_enum() 
pack_bool() 
pack_uhyper() 
pack_hyper() 
Packer.pack_float(value)
Packer.pack_double(value)
Packer.pack_fstring(n, s)
Packer.pack_fopaque(n, data)
pack_fstring() 
Packer.pack_string(s)
pack_fstring() 
Packer.pack_opaque(data)
pack_string() 
Packer.pack_bytes(bytes)
pack_string() 
Packer.pack_list(list, pack_item)
p = xdrlib.Packer()
p.pack_list([1, 2, 3], p.pack_int)
Packer.pack_farray(n, array, pack_item)
len(array) 
Packer.pack_array(list, pack_item)
pack_farray() 
Unpacker.reset(data)
Unpacker.get_position()
Unpacker.set_position(position)
get_position() 
set_position() 
Unpacker.get_buffer()
Unpacker.done()
unpack_type() 
Unpacker.unpack_float()
Unpacker.unpack_double()
unpack_float() 
Unpacker.unpack_fstring(n)
Unpacker.unpack_fopaque(n)
unpack_fstring() 
Unpacker.unpack_string()
unpack_fstring() 
Unpacker.unpack_opaque()
unpack_string() 
Unpacker.unpack_bytes()
unpack_string() 
Unpacker.unpack_list(unpack_item)
Unpacker.unpack_farray(n, unpack_item)
Unpacker.unpack_array(unpack_item)
unpack_farray() 
p = xdrlib.Packer()
p.pack_double(8.01)
print('packing the double failed:', instance.msg)
dump() 
load() 
dumps() 
loads() 
load() 
dump() 
plistlib.UID(data)
aDate = datetime.datetime.fromtimestamp(time.mktime(time.gmtime()))
with open(fileName, 'wb') as fp:
dump(pl, fp)
with open(fileName, 'rb') as fp:
pl = load(fp)
print(pl["aKey"])
tabulate(f) 
f(0)
f(1)
map() 
count() 
map(f, count()) 
sum(map(operator.mul, vector1, vector2)) 
count()
count(10) 
cycle()
cycle('ABCD') 
repeat()
repeat(10, 3) 
accumulate()
accumulate([1,2,3,4,5]) 
chain()
chain('ABC', 'DEF') 
chain.from_iterable()
chain.from_iterable(['ABC', 'DEF']) 
compress()
compress('ABCDEF', [1,0,1,0,1,1]) 
dropwhile()
dropwhile(lambda x: x<5, [1,4,6,4,1]) 
filterfalse()
pred(elem) 
filterfalse(lambda x: x%2, range(10)) 
groupby()
key(v) 
islice()
islice('ABCDEFG', 2, None) 
starmap()
func(*seq[0])
func(*seq[1])
starmap(pow, [(2,5), (3,2), (10,3)]) 
takewhile()
takewhile(lambda x: x<5, [1,4,6,4,1]) 
tee()
zip_longest()
zip_longest('ABCD', 'xy', fillvalue='-') 
product()
permutations()
combinations()
combinations_with_replacement()
product('ABCD', repeat=2)
permutations('ABCD', 2)
combinations('ABCD', 2)
combinations_with_replacement('ABCD', 2)
accumulate([1,2,3,4,5]) 
accumulate([1,2,3,4,5], initial=100) 
accumulate([1,2,3,4,5], operator.mul) 
it = iter(iterable)
total = next(it)
total = func(total, element)
min() 
max() 
operator.mul() 
list(accumulate(data, operator.mul))     
list(accumulate(data, max))              
list(accumulate(cashflows, lambda bal, pmt: bal*1.05 + pmt))
logistic_map = lambda x, _:  r * x * (1 - x)
inputs = repeat(x0, 36)     
format(x, '.2f') for x in accumulate(inputs, logistic_map)
functools.reduce() 
itertools.chain(*iterables)
def chain(*iterables):
chain('ABC', 'DEF') 
chain.from_iterable(iterable)
chain() 
def from_iterable(iterables):
chain.from_iterable(['ABC', 'DEF']) 
itertools.combinations(iterable, r)
def combinations(iterable, r):
combinations('ABCD', 2) 
combinations(range(4), 3) 
pool = tuple(iterable)
n = len(pool)
indices = list(range(r))
yield tuple(pool[i] for i in indices)
for i in reversed(range(r)):
for j in range(i+1, r):
yield tuple(pool[i] for i in indices)
combinations() 
permutations() 
def combinations(iterable, r):
pool = tuple(iterable)
n = len(pool)
for indices in permutations(range(n), r):
if sorted(indices) == list(indices):
yield tuple(pool[i] for i in indices)
itertools.combinations_with_replacement(iterable, r)
def combinations_with_replacement(iterable, r):
combinations_with_replacement('ABC', 2) 
pool = tuple(iterable)
n = len(pool)
yield tuple(pool[i] for i in indices)
for i in reversed(range(r)):
indices[i:] = [indices[i] + 1] * (r - i)
yield tuple(pool[i] for i in indices)
combinations_with_replacement() 
product() 
def combinations_with_replacement(iterable, r):
pool = tuple(iterable)
n = len(pool)
for indices in product(range(n), repeat=r):
if sorted(indices) == list(indices):
yield tuple(pool[i] for i in indices)
itertools.compress(data, selectors)
def compress(data, selectors):
compress('ABCDEF', [1,0,1,0,1,1]) 
return (d for d, s in zip(data, selectors) if s)
itertools.count(start=0, step=1)
map() 
zip() 
def count(start=0, step=1):
count(10) 
count(2.5, 0.5) 
start + step * i for i in count()
itertools.cycle(iterable)
def cycle(iterable):
cycle('ABCD') 
saved.append(element)
cycle() 
itertools.dropwhile(predicate, iterable)
def dropwhile(predicate, iterable):
dropwhile(lambda x: x<5, [1,4,6,4,1]) 
iterable = iter(iterable)
if not predicate(x):
itertools.filterfalse(predicate, iterable)
def filterfalse(predicate, iterable):
filterfalse(lambda x: x%2, range(10)) 
if not predicate(x):
itertools.groupby(iterable, key=None)
groupby() 
groupby() 
groupby() 
data = sorted(data, key=keyfunc)
for k, g in groupby(data, keyfunc):
groups.append(list(g))      
uniquekeys.append(k)
groupby() 
k for k, g in groupby('AAAABBBCCDAABBB')
list(g) for k, g in groupby('AAAABBBCCD')
def __init__(self, iterable, key=None):
self.it = iter(iterable)
self.tgtkey = self.currkey = self.currvalue = object()
def __iter__(self):
def __next__(self):
self.id = object()
self.currvalue = next(self.it)    
self.currkey = self.keyfunc(self.currvalue)
return (self.currkey, self._grouper(self.tgtkey, self.id))
def _grouper(self, tgtkey, id):
self.currvalue = next(self.it)
self.currkey = self.keyfunc(self.currvalue)
itertools.islice(iterable, stop)
itertools.islice(iterable, start, stop[, step])
def islice(iterable, *args):
islice('ABCDEFG', 2) 
islice('ABCDEFG', 2, 4) 
islice('ABCDEFG', 2, None) 
islice('ABCDEFG', 0, None, 2) 
s = slice(*args)
it = iter(range(start, stop, step))
nexti = next(it)
for i, element in zip(range(start), iterable):
for i, element in enumerate(iterable):
nexti = next(it)
for i, element in zip(range(i + 1, stop), iterable):
itertools.permutations(iterable, r=None)
def permutations(iterable, r=None):
permutations('ABCD', 2) 
permutations(range(3)) 
pool = tuple(iterable)
n = len(pool)
indices = list(range(n))
cycles = list(range(n, n-r, -1))
yield tuple(pool[i] for i in indices[:r])
for i in reversed(range(r)):
yield tuple(pool[i] for i in indices[:r])
permutations() 
product() 
def permutations(iterable, r=None):
pool = tuple(iterable)
n = len(pool)
for indices in product(range(n), repeat=r):
if len(set(indices)) == r:
yield tuple(pool[i] for i in indices)
itertools.product(*iterables, repeat=1)
product(A, B) 
product(A, repeat=4) 
product(A, A, A, A) 
def product(*args, repeat=1):
product('ABCD', 'xy') 
product(range(2), repeat=3) 
pools = [tuple(pool) for pool in args] * repeat
yield tuple(prod)
product() 
itertools.repeat(object[, times])
map() 
zip() 
def repeat(object, times=None):
repeat(10, 3) 
for i in range(times):
list(map(pow, range(10), repeat(2)))
itertools.starmap(function, iterable)
map() 
map() 
starmap() 
function(a,b) 
function(*c) 
def starmap(function, iterable):
starmap(pow, [(2,5), (3,2), (10,3)]) 
yield function(*args)
itertools.takewhile(predicate, iterable)
def takewhile(predicate, iterable):
takewhile(lambda x: x<5, [1,4,6,4,1]) 
if predicate(x):
itertools.tee(iterable, n=2)
def tee(iterable, n=2):
it = iter(iterable)
deques = [collections.deque() for i in range(n)]
def gen(mydeque):
newval = next(it)   
d.append(newval)
yield mydeque.popleft()
return tuple(gen(d) for d in deques)
tee() 
tee() 
tee() 
tee() 
tee() 
list() 
itertools.zip_longest(*iterables, fillvalue=None)
def zip_longest(*args, fillvalue=None):
zip_longest('ABCD', 'xy', fillvalue='-') 
iterators = [iter(it) for it in args]
num_active = len(iterators)
for i, it in enumerate(iterators):
value = next(it)
iterators[i] = repeat(fillvalue)
values.append(value)
yield tuple(values)
zip_longest() 
islice() or takewhile()
def take(n, iterable):
return list(islice(iterable, n))
def prepend(value, iterator):
prepend(1, [2, 3, 4]) 
return chain([value], iterator)
def tabulate(function, start=0):
function(0)
function(1)
return map(function, count(start))
def tail(n, iterable):
tail(3, 'ABCDEFG') 
return iter(collections.deque(iterable, maxlen=n))
def consume(iterator, n=None):
collections.deque(iterator, maxlen=0)
next(islice(iterator, n, n), None)
def nth(iterable, n, default=None):
return next(islice(iterable, n, None), default)
def all_equal(iterable):
g = groupby(iterable)
return next(g, True) and not next(g, False)
def quantify(iterable, pred=bool):
return sum(map(pred, iterable))
def pad_none(iterable):
map() 
return chain(iterable, repeat(None))
def ncycles(iterable, n):
return chain.from_iterable(repeat(tuple(iterable), n))
def dotproduct(vec1, vec2):
return sum(map(operator.mul, vec1, vec2))
def convolve(signal, kernel):
convolve(data, [0.25, 0.25, 0.25, 0.25]) 
average (blur)
convolve(data, [1, -1]) 
convolve(data, [1, -2, 1]) 
kernel = tuple(kernel)[::-1]
n = len(kernel)
window = collections.deque([0], maxlen=n) * n
for x in chain(signal, repeat(0, n-1)):
window.append(x)
yield sum(map(operator.mul, kernel, window))
def flatten(list_of_lists):
return chain.from_iterable(list_of_lists)
def repeatfunc(func, times=None, *args):
return starmap(func, repeat(args))
return starmap(func, repeat(args, times))
def pairwise(iterable):
a, b = tee(iterable)
next(b, None)
return zip(a, b)
def grouper(iterable, n, fillvalue=None):
grouper('ABCDEFG', 3, 'x') 
args = [iter(iterable)] * n
return zip_longest(*args, fillvalue=fillvalue)
def roundrobin(*iterables):
roundrobin('ABC', 'D', 'EF') 
num_active = len(iterables)
nexts = cycle(iter(it).__next__ for it in iterables)
yield next()
nexts = cycle(islice(nexts, num_active))
def partition(pred, iterable):
partition(is_odd, range(10)) 
t1, t2 = tee(iterable)
return filterfalse(pred, t1), filter(pred, t2)
def powerset(iterable):
powerset([1,2,3]) 
s = list(iterable)
return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))
def unique_everseen(iterable, key=None):
unique_everseen('AAAABBBCCDAABBB') 
unique_everseen('ABBCcAD', str.lower) 
seen = set()
for element in filterfalse(seen.__contains__, iterable):
seen_add(element)
k = key(element)
seen_add(k)
def unique_justseen(iterable, key=None):
unique_justseen('AAAABBBCCDAABBB') 
unique_justseen('ABBCcAD', str.lower) 
return map(next, map(operator.itemgetter(1), groupby(iterable, key)))
def iter_except(func, exception, first=None):
builtins.iter(func, sentinel) 
iter_except(functools.partial(heappop, h), IndexError)   
iter_except(d.popitem, KeyError)                         
iter_except(d.popleft, IndexError)                       
iter_except(q.get_nowait, Queue.Empty)                   
iter_except(s.pop, KeyError)                             
yield first()            
db.first()
yield func()
def first_true(iterable, default=False, pred=None):
pred(item) is true
first_true([a,b,c], x) 
first_true([a,b], x, f) 
a if f(a) else b if f(b) else x
return next(filter(pred, iterable), default)
def random_product(*args, repeat=1):
itertools.product(*args, **kwds)
pools = [tuple(pool) for pool in args] * repeat
return tuple(map(random.choice, pools))
def random_permutation(iterable, r=None):
itertools.permutations(iterable, r)
pool = tuple(iterable)
r = len(pool) if r is None else r
return tuple(random.sample(pool, r))
def random_combination(iterable, r):
itertools.combinations(iterable, r)
pool = tuple(iterable)
n = len(pool)
indices = sorted(random.sample(range(n), r))
return tuple(pool[i] for i in indices)
def random_combination_with_replacement(iterable, r):
itertools.combinations_with_replacement(iterable, r)
pool = tuple(iterable)
n = len(pool)
indices = sorted(random.choices(range(n), k=r))
return tuple(pool[i] for i in indices)
def nth_combination(iterable, r, index):
list(combinations(iterable, r))[index]
pool = tuple(iterable)
n = len(pool)
k = min(r, n-r)
for i in range(1, k+1):
c = c * (n - k + i) // i
c, n = c*(n-r)//n, n-1
result.append(pool[-1-n])
return tuple(result)
functools.cache(user_function)
lru_cache(maxsize=None)
lru_cache() 
def factorial(n):
return n * factorial(n-1) if n else 1
factorial(10)      
factorial(5)       
factorial(12)      
functools.cached_property(func)
property()
def __init__(self, sequence_of_numbers):
self._data = tuple(sequence_of_numbers)
def stdev(self):
return statistics.stdev(self._data)
cached_property() 
property(). A
cached_property() 
property() 
cache()
def __init__(self, sequence_of_numbers):
def stdev(self):
return statistics.stdev(self._data)
functools.cmp_to_key(func)
sorted()
min()
max()
heapq.nlargest()
heapq.nsmallest()
itertools.groupby() 
sorted(iterable, key=cmp_to_key(locale.strcoll))  
functools.lru_cache(user_function)
functools.lru_cache(maxsize=128, typed=False)
f(a=1, b=2) 
f(b=2, a=1) 
def count_vowels(sentence):
sentence = sentence.casefold()
return sum(sentence.count(vowel) for vowel in 'aeiou')
f(3) 
f(3.0) 
cache_parameters() 
cache_info() 
cache_clear() 
time() 
random() 
lru_cache(maxsize=32)
def get_pep(num):
with urllib.request.urlopen(resource) as s:
return s.read()
pep = get_pep(n)
print(n, len(pep))
get_pep.cache_info()
CacheInfo(hits=3, misses=8, maxsize=32, currsize=8)
lru_cache(maxsize=None)
def fib(n):
return fib(n-1) + fib(n-2)
fib(n) for n in range(16)
fib.cache_info()
CacheInfo(hits=28, misses=16, maxsize=None, currsize=16)
cache_parameters()
__lt__()
__le__()
__gt__()
__ge__() 
__eq__() 
def _is_valid_operand(self, other):
hasattr(other, "lastname") 
hasattr(other, "firstname")
def __eq__(self, other):
if not self._is_valid_operand(other):
self.lastname.lower()
self.firstname.lower()
other.lastname.lower()
other.firstname.lower()
def __lt__(self, other):
if not self._is_valid_operand(other):
self.lastname.lower()
self.firstname.lower()
other.lastname.lower()
other.firstname.lower()
def newfunc(*fargs, **fkeywords):
return func(*args, *fargs, **newkeywords)
partial() 
partial() 
int() 
basetwo = partial(int, base=2)
basetwo('10010')
classmethod()
staticmethod()
abstractmethod() 
def __init__(self):
def alive(self):
def set_state(self, state):
self._alive = bool(state)
set_alive = partialmethod(set_state, True)
set_dead = partialmethod(set_state, False)
c = Cell()
c.set_alive()
functools.reduce(function, iterable[, initializer])
reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) 
calculates ((((1+2)+3)+4)+5). The
def reduce(function, iterable, initializer=None):
it = iter(iterable)
value = next(it)
value = function(value, element)
itertools.accumulate() 
def fun(arg, verbose=False):
print("Let me just say,", end=" ")
print(arg)
register() 
def _(arg: int, verbose=False):
print("Strength in numbers, eh?", end=" ")
print(arg)
def _(arg: list, verbose=False):
print("Enumerate this:")
for i, elem in enumerate(arg):
print(i, elem)
fun.register(complex)
def _(arg, verbose=False):
print("Better than complicated.", end=" ")
print(arg.real, arg.imag)
register() 
def nothing(arg, verbose=False):
print("Nothing.")
fun.register(type(None), nothing)
register() 
fun.register(float)
fun.register(Decimal)
def fun_num(arg, verbose=False):
print("Half of your number:", end=" ")
print(arg / 2)
fun("Hello, world.")
fun("test.", verbose=True)
fun(42, verbose=True)
fun(['spam', 'spam', 'eggs', 'spam'], verbose=True)
fun(None)
fun(1.23)
def _(arg: Mapping, verbose=False):
print("Keys & Values")
for key, value in arg.items():
print(key, "=>", value)
fun({"a": "b"})
dispatch() 
fun.dispatch(float)
fun.dispatch(dict)    
fun.registry.keys()
register() 
functools.singledispatchmethod(func)
def neg(self, arg):
raise NotImplementedError("Cannot negate a")
def _(self, arg: int):
def _(self, arg: bool):
def neg(cls, arg):
raise NotImplementedError("Cannot negate a")
def _(cls, arg: int):
def _(cls, arg: bool):
functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)
lru_cache() 
update_wrapper() 
functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)
update_wrapper() 
partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated) 
def my_decorator(f):
wraps(f)
def wrapper(*args, **kwds):
print('Calling decorated function')
return f(*args, **kwds)
def example():
print('Called example function')
example()
example() 
partial() 
operator.add(x, y) 
operator.lt(a, b)
operator.le(a, b)
operator.eq(a, b)
operator.ne(a, b)
operator.ge(a, b)
operator.gt(a, b)
operator.__lt__(a, b)
operator.__le__(a, b)
operator.__eq__(a, b)
operator.__ne__(a, b)
operator.__ge__(a, b)
operator.__gt__(a, b)
lt(a, b) 
le(a, b) 
eq(a, b) 
ne(a, b) 
gt(a, b) 
ge(a, b) 
operator.not_(obj)
operator.__not__(obj)
__not__() 
__bool__() 
__len__() 
operator.truth(obj)
operator.is_(a, b)
operator.is_not(a, b)
operator.abs(obj)
operator.__abs__(obj)
operator.add(a, b)
operator.__add__(a, b)
operator.and_(a, b)
operator.__and__(a, b)
operator.floordiv(a, b)
operator.__floordiv__(a, b)
operator.index(a)
operator.__index__(a)
a.__index__() 
operator.inv(obj)
operator.invert(obj)
operator.__inv__(obj)
operator.__invert__(obj)
operator.lshift(a, b)
operator.__lshift__(a, b)
operator.mod(a, b)
operator.__mod__(a, b)
operator.mul(a, b)
operator.__mul__(a, b)
operator.matmul(a, b)
operator.__matmul__(a, b)
operator.neg(obj)
operator.__neg__(obj)
obj (-obj) 
operator.or_(a, b)
operator.__or__(a, b)
operator.pos(obj)
operator.__pos__(obj)
obj (+obj) 
operator.pow(a, b)
operator.__pow__(a, b)
operator.rshift(a, b)
operator.__rshift__(a, b)
operator.sub(a, b)
operator.__sub__(a, b)
operator.truediv(a, b)
operator.__truediv__(a, b)
operator.xor(a, b)
operator.__xor__(a, b)
operator.concat(a, b)
operator.__concat__(a, b)
operator.contains(a, b)
operator.__contains__(a, b)
operator.countOf(a, b)
operator.delitem(a, b)
operator.__delitem__(a, b)
operator.getitem(a, b)
operator.__getitem__(a, b)
operator.indexOf(a, b)
operator.setitem(a, b, c)
operator.__setitem__(a, b, c)
operator.length_hint(obj, default=0)
object.__length_hint__() 
map()
sorted()
itertools.groupby()
operator.attrgetter(attr)
operator.attrgetter(*attrs)
f = attrgetter('name') 
f(b) 
f = attrgetter('name', 'date') 
f(b) 
f = attrgetter('name.first', 'name.last') 
f(b) 
def attrgetter(*items):
if any(not isinstance(item, str) for item in items):
raise TypeError('attribute name must be a string')
if len(items) == 1:
def g(obj):
return resolve_attr(obj, attr)
def g(obj):
return tuple(resolve_attr(obj, attr) for attr in items)
def resolve_attr(obj, attr):
for name in attr.split("."):
obj = getattr(obj, name)
operator.itemgetter(item)
operator.itemgetter(*items)
__getitem__() 
f = itemgetter(2) 
f(r) 
g = itemgetter(2, 5, 3) 
g(r) 
def itemgetter(*items):
if len(items) == 1:
def g(obj):
def g(obj):
return tuple(obj[item] for item in items)
__getitem__() 
itemgetter('name')({'name': 'tu', 'age': 18})
itemgetter(1)('ABCDEFG')
itemgetter(1,3,5)('ABCDEFG')
itemgetter(slice(2,None))('ABCDEFG')
soldier = dict(rank='captain', name='dotterbart')
itemgetter('rank')(soldier)
itemgetter() 
inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)]
getcount = itemgetter(1)
list(map(getcount, inventory))
sorted(inventory, key=getcount)
f = methodcaller('name') 
f(b) 
b.name() 
f = methodcaller('name', 'foo', bar=1) 
f(b) 
b.name('foo', bar=1) 
def caller(obj):
return getattr(obj, name)(*args, **kwargs)
add(a, b)
concat(seq1, seq2)
contains(seq, obj)
div(a, b)
floordiv(a, b)
and_(a, b)
xor(a, b)
invert(a)
or_(a, b)
pow(a, b)
is_(a, b)
is_not(a, b)
setitem(obj, k, v)
getitem(obj, k)
lshift(a, b)
mod(a, b)
mul(a, b)
matmul(a, b)
neg(a)
not_(a)
pos(a)
rshift(a, b)
setitem(seq, slice(i, j), values)
slice(i, j)
getitem(seq, slice(i, j))
mod(s, obj)
sub(a, b)
truth(obj)
lt(a, b)
le(a, b)
eq(a, b)
ne(a, b)
ge(a, b)
gt(a, b)
x = operator.iadd(x, y) 
z = operator.iadd(x, y) 
iadd(a, ' world')
iadd(s, [' ', 'w', 'o', 'r', 'l', 'd'])
operator.iadd(a, b)
operator.__iadd__(a, b)
a = iadd(a, b) 
operator.iand(a, b)
operator.__iand__(a, b)
a = iand(a, b) 
operator.iconcat(a, b)
operator.__iconcat__(a, b)
a = iconcat(a, b) 
operator.ifloordiv(a, b)
operator.__ifloordiv__(a, b)
a = ifloordiv(a, b) 
operator.ilshift(a, b)
operator.__ilshift__(a, b)
a = ilshift(a, b) 
operator.imod(a, b)
operator.__imod__(a, b)
a = imod(a, b) 
operator.imul(a, b)
operator.__imul__(a, b)
a = imul(a, b) 
operator.imatmul(a, b)
operator.__imatmul__(a, b)
a = imatmul(a, b) 
operator.ior(a, b)
operator.__ior__(a, b)
a = ior(a, b) 
operator.ipow(a, b)
operator.__ipow__(a, b)
a = ipow(a, b) 
operator.irshift(a, b)
operator.__irshift__(a, b)
a = irshift(a, b) 
operator.isub(a, b)
operator.__isub__(a, b)
a = isub(a, b) 
operator.itruediv(a, b)
operator.__itruediv__(a, b)
a = itruediv(a, b) 
operator.ixor(a, b)
operator.__ixor__(a, b)
a = ixor(a, b) 
isinstance(x, Number) 
abs()
conjugate()
conjugate()
conjugate() 
math.trunc()
round()
math.floor()
math.ceil()
divmod()
complex()
conjugate() 
float() 
float()
hash() 
def __hash__(self):
return hash(self.numerator)
if self == float(self):
return hash(float(self))
return hash((self.numerator, self.denominator))
class MyFoo(Complex
MyFoo.register(Real)
__add__() 
__radd__() 
class MyIntegral(Integral
def __add__(self, other):
if isinstance(other, MyIntegral):
return do_my_adding_stuff(self, other)
elif isinstance(other, OtherTypeIKnowAbout):
return do_my_other_adding_stuff(self, other)
def __radd__(self, other):
if isinstance(other, MyIntegral):
return do_my_adding_stuff(other, self)
elif isinstance(other, OtherTypeIKnowAbout):
return do_my_other_adding_stuff(other, self)
elif isinstance(other, Integral):
return int(other) + int(self)
elif isinstance(other, Real):
return float(other) + float(self)
elif isinstance(other, Complex):
return complex(other) + complex(self)
__add__() 
__add__() 
__radd__() 
__add__() 
__add__() 
__radd__() 
__radd__() 
def _operator_fallbacks(monomorphic_operator, fallback_operator):
def forward(a, b):
if isinstance(b, (int, Fraction)):
return monomorphic_operator(a, b)
elif isinstance(b, float):
return fallback_operator(float(a), b)
elif isinstance(b, complex):
return fallback_operator(complex(a), b)
def reverse(b, a):
if isinstance(a, Rational):
return monomorphic_operator(a, b)
elif isinstance(a, numbers.Real):
return fallback_operator(float(a), float(b))
elif isinstance(a, numbers.Complex):
return fallback_operator(complex(a), complex(b))
def _add(a, b):
__add__, __radd__ = _operator_fallbacks(_add, operator.add)
math.ceil(x)
x.__ceil__() 
math.comb(n, k)
expression (1 + x) ** n
math.copysign(x, y)
copysign(1.0, -0.0) 
math.fabs(x)
math.factorial(x)
math.floor(x)
x.__floor__() 
math.fmod(x, y)
fmod(x, y) 
fmod() 
abs(y) 
fmod(x, y) 
fmod(-1e-100, 1e100) 
fmod() 
math.frexp(x)
0.5 <= abs(m) < 1
math.fsum(iterable)
sum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1])
fsum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1])
math.gcd(*integers)
gcd() 
abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol) 
math.isfinite(x)
math.isinf(x)
math.isnan(x)
math.isqrt(n)
a = 1 + isqrt(n - 1)
math.lcm(*integers)
lcm() 
math.ldexp(x, i)
x * (2**i) 
frexp() 
math.modf(x)
math.nextafter(x, y)
math.nextafter(x, math.inf) 
math.nextafter(x, -math.inf) 
math.nextafter(x, 0.0) 
math.nextafter(x, math.copysign(math.inf, x)) 
math.ulp()
math.perm(n, k=None)
math.remainder(x, y)
r = remainder(x, y) 
abs(r) <= 0.5 * abs(y) 
remainder(x, math.inf) 
remainder(x, 0) 
remainder(math.inf, x) 
math.trunc(x)
x.__trunc__() 
math.ulp(x)
return ulp(-x)
x is x - ulp(x)
x is x + ulp(x)
math.nextafter() and sys.float_info.epsilon
frexp() 
modf() 
ceil() 
floor() 
modf() 
abs(x) >= 2**52
math.exp(x)
pow(math.e, x) 
math.expm1(x)
exp(x) - 1
expm1() 
exp(1e-5) - 1
expm1(1e-5)    
math.log(x[, base])
log(x)/log(base) 
math.log1p(x)
math.log2(x)
log(x, 2) 
int.bit_length() 
math.log10(x)
log(x, 10) 
math.pow(x, y)
pow(1.0, x) 
pow(x, 0.0) 
pow(x, y) 
math.pow() 
pow() 
math.sqrt(x)
math.acos(x)
math.asin(x)
math.atan(x)
math.atan2(y, x)
atan(y / x) 
atan2() 
atan(1) 
atan2(1, 1) 
atan2(-1, -1) 
math.cos(x)
math.dist(p, q)
sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))
math.hypot(*coordinates)
sqrt(sum(x**2 for x in coordinates)). This is the
point (x, y)
sqrt(x*x + y*y)
math.sin(x)
math.tan(x)
math.degrees(x)
math.radians(x)
math.acosh(x)
math.asinh(x)
math.atanh(x)
math.cosh(x)
math.sinh(x)
math.tanh(x)
math.erf(x)
erf() 
def phi(x):
return (1.0 + erf(x / sqrt(2.0))) / 2.0
math.erfc(x)
1.0 - erf(x) 
math.gamma(x)
math.lgamma(x)
Pi is (still) 
float('inf') 
float('nan') 
sqrt(-1.0) 
log(0.0) 
exp(1000.0) 
pow(float('nan'), 0.0) 
hypot(float('nan'), float('inf')) 
__complex__() 
__float__() 
cmath.phase(x)
phase(x) 
math.atan2(x.imag, x.real) 
phase(complex(-1.0, 0.0))
phase(complex(-1.0, -0.0))
abs() 
cmath.polar(x)
polar(x) 
abs(x)
phase(x)
cmath.rect(r, phi)
math.cos(phi) + math.sin(phi)*1
cmath.exp(x)
cmath.log(x[, base])
cmath.log10(x)
log() 
cmath.sqrt(x)
log() 
cmath.acos(x)
cmath.asin(x)
acos() 
cmath.atan(x)
cmath.cos(x)
cmath.sin(x)
cmath.tan(x)
cmath.acosh(x)
cmath.asinh(x)
cmath.atanh(x)
cmath.cosh(x)
cmath.sinh(x)
cmath.tanh(x)
cmath.isfinite(x)
cmath.isinf(x)
cmath.isnan(x)
abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol) 
float('inf') 
complex(0.0, float('inf')) 
float('nan') 
complex(0.0, float('nan')) 
math.sqrt(-1) 
getcontext().prec = 6
Decimal(1) / Decimal(7)
Decimal('0.142857')
getcontext().prec = 28
Decimal(1) / Decimal(7)
Decimal('0.1428571428571428571428571429')
getcontext() 
getcontext()
getcontext().prec = 7
getcontext().prec = 28
Decimal(10)
Decimal('10')
Decimal('3.14')
Decimal('3.14')
Decimal(3.14)
Decimal('3.140000000000000124344978758017532527446746826171875')
Decimal((0, (3, 1, 4), -2))
Decimal('3.14')
Decimal(str(2.0 ** 0.5))
Decimal('1.4142135623730951')
Decimal(2) ** Decimal('0.5')
Decimal('1.414213562373095048801688724')
Decimal('NaN')
Decimal('NaN')
Decimal('-Infinity')
Decimal('-Infinity')
c = getcontext()
Decimal(3.14)
Decimal('3.5') < 3.7
Decimal('3.5') == 3.5
getcontext().prec = 6
Decimal('3.0')
Decimal('3.0')
Decimal('3.1415926535')
Decimal('3.1415926535')
Decimal('3.1415926535') + Decimal('2.7182818285')
Decimal('5.85987')
getcontext().rounding = ROUND_UP
Decimal('3.1415926535') + Decimal('2.7182818285')
Decimal('5.85988')
Decimal("1e9999999999999999999")
data = list(map(Decimal, '1.34 1.87 3.45 2.35 1.00 0.03 9.25'.split()))
max(data)
Decimal('9.25')
min(data)
Decimal('0.03')
sorted(data)
Decimal('0.03')
Decimal('1.00')
Decimal('1.34')
Decimal('1.87')
Decimal('2.35')
Decimal('3.45')
Decimal('9.25')
sum(data)
Decimal('19.29')
str(a)
float(a)
round(a, 1)
Decimal('1.3')
int(a)
Decimal('6.70')
Decimal('2.5058')
Decimal('0.77')
getcontext().prec = 28
Decimal(2).sqrt()
Decimal('1.414213562373095048801688724')
Decimal(1).exp()
Decimal('2.718281828459045235360287471')
Decimal('10').ln()
Decimal('2.302585092994045684017991455')
Decimal('10').log10()
Decimal('1')
quantize() 
Decimal('7.325').quantize(Decimal('.01'), rounding=ROUND_DOWN)
Decimal('7.32')
Decimal('7.325').quantize(Decimal('1.'), rounding=ROUND_UP)
Decimal('8')
getcontext() 
Context() 
setcontext() 
myothercontext = Context(prec=60, rounding=ROUND_HALF_DOWN)
setcontext(myothercontext)
Decimal(1) / Decimal(7)
Decimal('0.142857142857142857142857142857142857142857142857142857142857')
setcontext(ExtendedContext)
Decimal(1) / Decimal(7)
Decimal('0.142857143')
Decimal(42) / Decimal(0)
Decimal('Infinity')
setcontext(BasicContext)
Decimal(42) / Decimal(0)
Decimal(42) / Decimal(0)
clear_flags() 
setcontext(ExtendedContext)
getcontext().clear_flags()
Decimal(355) / Decimal(113)
Decimal('3.14159292')
getcontext()
setcontext(ExtendedContext)
Decimal(1) / Decimal(0)
Decimal('Infinity')
getcontext().traps[DivisionByZero] = 1
Decimal(1) / Decimal(0)
Decimal(1) / Decimal(0)
decimal.Decimal(value="0", context=None)
Decimal('0') 
Decimal((0, (1, 4, 1, 4), -3)) 
Decimal('1.414') 
Decimal(float('1.1')) 
Decimal('1.100000000000000088817841970012523233890533447265625') 
Decimal('3.00000') 
Decimal(-7) % Decimal(4)
Decimal('-3')
x == (x // y) * y + x % y
Decimal(-7) // Decimal(4)
Decimal('-1')
adjusted()
Decimal('321e+5').adjusted() 
as_integer_ratio()
Decimal('-3.14').as_integer_ratio()
as_tuple()
DecimalTuple(sign, digittuple, exponent) 
canonical()
compare(other, context=None)
compare() 
Decimal('NaN')
Decimal('-1')
Decimal('0')
Decimal('1')
compare_signal(other, context=None)
compare() 
compare_total(other, context=None)
compare() 
Decimal('12.0').compare_total(Decimal('12'))
Decimal('-1')
Decimal('0') 
Decimal('-1')
Decimal('1') 
compare_total_mag(other, context=None)
compare_total() 
x.compare_total_mag(y) 
x.copy_abs().compare_total(y.copy_abs()) 
conjugate()
copy_abs()
copy_negate()
copy_sign(other, context=None)
Decimal('2.3').copy_sign(Decimal('-1.5'))
Decimal('-2.3')
exp(context=None)
Decimal(1).exp()
Decimal('2.718281828459045235360287471')
Decimal(321).exp()
Decimal('2.561702493119680037517373933E+139')
from_float(f)
Decimal.from_float(0.1) 
Decimal('0.1') 
Decimal.from_float(0.1)
Decimal('0.1000000000000000055511151231257827021181583404541015625')
Decimal.from_float(float('nan'))
Decimal('NaN')
Decimal.from_float(float('inf'))
Decimal('Infinity')
Decimal.from_float(float('-inf'))
Decimal('-Infinity')
fma(other, third, context=None)
Decimal(2).fma(3, 5)
Decimal('11')
is_canonical()
is_finite()
is_infinite()
is_nan()
is_normal(context=None)
is_qnan()
is_signed()
is_snan()
is_subnormal(context=None)
is_zero()
ln(context=None)
log10(context=None)
logb(context=None)
Decimal('-Infinity') 
Decimal('Infinity') 
logical_and(other, context=None)
logical_and() 
logical_invert(context=None)
logical_invert() 
logical_or(other, context=None)
logical_or() 
logical_xor(other, context=None)
logical_xor() 
max(other, context=None)
max(self, other) 
max_mag(other, context=None)
max() 
min(other, context=None)
min(self, other) 
min_mag(other, context=None)
min() 
next_minus(context=None)
next_plus(context=None)
next_toward(other, context=None)
normalize(context=None)
Decimal('0') 
Decimal('0e0') 
Decimal('32.100') 
Decimal('0.321000e+2') 
Decimal('32.1') 
number_class(context=None)
quantize(exp, rounding=None, context=None)
Decimal('1.41421356').quantize(Decimal('1.000'))
Decimal('1.414')
radix()
Decimal(10) 
remainder_near(other, context=None)
Decimal(18).remainder_near(Decimal(10))
Decimal('-2')
Decimal(25).remainder_near(Decimal(10))
Decimal('5')
Decimal(35).remainder_near(Decimal(10))
Decimal('-5')
rotate(other, context=None)
same_quantum(other, context=None)
scaleb(other, context=None)
shift(other, context=None)
sqrt(context=None)
to_eng_string(context=None)
Decimal('123E+1') 
Decimal('1.23E+3') 
to_integral(rounding=None, context=None)
to_integral_value() 
to_integral_exact(rounding=None, context=None)
to_integral_value(rounding=None, context=None)
logical_and()
logical_invert()
logical_or()
logical_xor() 
getcontext() 
setcontext() 
decimal.getcontext()
decimal.setcontext(c)
localcontext() 
decimal.localcontext(ctx=None)
with localcontext() as ctx:
s = calculate_something()
decimal.Context(prec=None, rounding=None, Emin=None, Emax=None, capitals=None, clamp=None, flags=None, traps=None)
Decimal('6.02e+23') 
Context(prec=6, Emax=999, clamp=1).create_decimal('1.23e999')
Decimal('1.23000E+999')
adjusted() 
as_tuple() 
C.exp(x) 
x.exp(context=C) 
clear_flags()
clear_traps()
copy()
copy_decimal(num)
create_decimal(num)
getcontext().prec = 3
Decimal('3.4445') + Decimal('1.0023')
Decimal('4.45')
Decimal('3.4445') + Decimal(0) + Decimal('1.0023')
Decimal('4.44')
create_decimal_from_float(f)
Decimal.from_float() 
context = Context(prec=5, rounding=ROUND_DOWN)
context.create_decimal_from_float(math.pi)
Decimal('3.1415')
context = Context(prec=5, traps=[Inexact])
context.create_decimal_from_float(math.pi)
Etiny()
Etop()
abs(x)
add(x, y)
canonical(x)
compare(x, y)
compare_signal(x, y)
compare_total(x, y)
compare_total_mag(x, y)
copy_abs(x)
copy_negate(x)
copy_sign(x, y)
divide(x, y)
divide_int(x, y)
divmod(x, y)
exp(x)
fma(x, y, z)
is_canonical(x)
is_finite(x)
is_infinite(x)
is_nan(x)
is_normal(x)
is_qnan(x)
is_signed(x)
is_snan(x)
is_subnormal(x)
is_zero(x)
ln(x)
log10(x)
logb(x)
logical_and(x, y)
logical_invert(x)
logical_or(x, y)
logical_xor(x, y)
max(x, y)
max_mag(x, y)
min(x, y)
min_mag(x, y)
minus(x)
multiply(x, y)
next_minus(x)
next_plus(x)
next_toward(x, y)
normalize(x)
number_class(x)
plus(x)
power(x, y, modulo=None)
Decimal(0) ** Decimal(0) 
results in Decimal('NaN')
power() 
exp() 
ln() 
Context.power(x, y, modulo) 
quantize(x, y)
radix()
remainder(x, y)
remainder_near(x, y)
rotate(x, y)
same_quantum(x, y)
scaleb(x, y)
shift(x, y)
sqrt(x)
subtract(x, y)
to_eng_string(x)
to_integral_exact(x)
to_sci_string(x)
sqrt(-x) and x > 0
x ** (non-integer)
create_decimal() 
from_float() 
create_decimal_from_float() 
exceptions.ArithmeticError(exceptions.Exception)
DivisionByZero(DecimalException, exceptions.ZeroDivisionError)
Overflow(Inexact, Rounded)
Underflow(Inexact, Rounded, Subnormal)
FloatOperation(DecimalException, exceptions.TypeError)
getcontext().prec = 8
u, v, w = Decimal(11111113), Decimal(-11111111), Decimal('7.51111111')
Decimal('9.5111111')
u + (v + w)
Decimal('10')
u, v, w = Decimal(20000), Decimal(-6), Decimal('6.0000003')
+ (u*w)
Decimal('0.01')
u * (v+w)
Decimal('0.0060000')
getcontext().prec = 20
u, v, w = Decimal(11111113), Decimal(-11111111), Decimal('7.51111111')
Decimal('9.51111111')
u + (v + w)
Decimal('9.51111111')
u, v, w = Decimal(20000), Decimal(-6), Decimal('6.0000003')
+ (u*w)
Decimal('0.0060000')
u * (v+w)
Decimal('0.0060000')
Decimal('Infinity') 
Decimal('NaN')==Decimal('NaN') 
compare() 
compare-signal() 
1 / Decimal('Infinity')
Decimal('0E-1000026')
getcontext() 
getcontext().prec=10
setcontext() 
getcontext() 
setcontext() 
getcontext() 
getcontext() 
DefaultContext.traps = ExtendedContext.traps.copy()
setcontext(DefaultContext)
t1.start()
t2.start()
t3.start()
indicator (comma or period)
d = Decimal('-1234567.8901')
moneyfmt(d, curr='$')
moneyfmt(d, places=0, sep='.', dp='', neg='', trailneg='-')
moneyfmt(d, curr='$', neg='(', trailneg=')')
moneyfmt(Decimal(123456789), sep=' ')
moneyfmt(Decimal('-0.02'), neg='<', trailneg='>')
q = Decimal(10) ** -places
sign, digits, exp = value.quantize(q).as_tuple()
digits = list(map(str, digits))
build(trailneg)
for i in range(places):
build(next() if digits else '0')
build(dp)
build('0')
build(next())
build(sep)
build(curr)
build(neg if sign else pos)
return ''.join(reversed(result))
def pi():
print(pi())
getcontext().prec
three = Decimal(3)      
t = (t * n) / d
getcontext().prec
def exp(x):
print(exp(Decimal(1)))
print(exp(Decimal(2)))
print(exp(2.0))
getcontext().prec
getcontext().prec
def cos(x):
x = x % (2 * pi)
print(cos(Decimal('0.5')))
print(cos(0.5))
getcontext().prec
fact *= i * (i-1)
getcontext().prec
def sin(x):
x = x % (2 * pi)
print(sin(Decimal('0.5')))
print(sin(0.5))
getcontext().prec
fact *= i * (i-1)
getcontext().prec
Q. decimal.Decimal('1234.5') 
D('1.23') + D('3.45')
Decimal('4.68')
A. quantize() 
TWOPLACES = Decimal(10) ** -2
Decimal('0.01')
Decimal('3.214').quantize(TWOPLACES)
Decimal('3.21')
Decimal('3.21').quantize(TWOPLACES, context=Context(traps=[Inexact]))
Decimal('3.21')
Decimal('3.214').quantize(TWOPLACES, context=Context(traps=[Inexact]))
quantize() 
a = Decimal('102.72')           
b = Decimal('3.17')
Decimal('105.89')
Decimal('99.55')
Decimal('4314.24')
quantize(TWOPLACES)     
Decimal('325.62')
quantize(TWOPLACES)     
Decimal('0.03')
quantize() 
def mul(x, y, fp=TWOPLACES):
return (x * y).quantize(fp)
def div(x, y, fp=TWOPLACES):
return (x / y).quantize(fp)
mul(a, b)                       
Decimal('325.62')
div(b, a)
Decimal('0.03')
A. normalize() 
values = map(Decimal, '200 200.000 2E2 .02E+4'.split())
v.normalize() for v in values
Decimal('2E+2')
Decimal('2E+2')
Decimal('2E+2')
Decimal('2E+2')
def remove_exponent(d):
return d.quantize(Decimal(1)) if d == d.to_integral() else d.normalize()
remove_exponent(Decimal('5E+3'))
Decimal('5000')
Decimal(math.pi)
Decimal('3.141592653589793115997963468544185161590576171875')
getcontext().prec = 3
Decimal('3.104') + Decimal('2.104')
Decimal('5.21')
Decimal('3.104') + Decimal('0.000') + Decimal('2.104')
Decimal('5.20')
getcontext().prec = 3
+Decimal('1.23456789')      
Decimal('1.23')
Context.create_decimal() 
Context(prec=5, rounding=ROUND_DOWN).create_decimal('1.2345678')
Decimal('1.2345')
setcontext(Context(prec=MAX_PREC, Emax=MAX_EMAX, Emin=MIN_EMIN))
x = Decimal(2) ** 256
Decimal('904625697166532776746648320380374280103671755200316906558262375061821325312')
Decimal(1) / 3
overallocation (e.g. Linux)
maxdigits = 19 * ((500 * 1024**2) // 8)
c = Context(prec=maxdigits, Emax=MAX_EMAX, Emin=MIN_EMIN)
setcontext(c)
x = Decimal(0).logical_invert() * 9
sys.getsizeof(x)
fractions.Fraction(numerator=0, denominator=1)
fractions.Fraction(other_fraction)
fractions.Fraction(float)
fractions.Fraction(decimal)
fractions.Fraction(string)
Fraction(1.1) 
Fraction(1.1) 
Fraction(11, 10) 
limit_denominator() 
Fraction(16, -10)
Fraction(-8, 5)
Fraction(123)
Fraction(123, 1)
Fraction()
Fraction(0, 1)
Fraction('3/7')
Fraction(3, 7)
Fraction(' -3/7 ')
Fraction(-3, 7)
Fraction('1.414213 \t\n')
Fraction(1414213, 1000000)
Fraction('-.125')
Fraction(-1, 8)
Fraction('7e-6')
Fraction(7, 1000000)
Fraction(2.25)
Fraction(9, 4)
Fraction(1.1)
Fraction(2476979795053773, 2251799813685248)
Fraction(Decimal('1.1'))
Fraction(11, 10)
math.gcd() 
numerator and denominator. math.gcd() 
as_integer_ratio()
from_float(flt)
Fraction.from_float(0.3) 
Fraction(3, 10) 
from_decimal(dec)
limit_denominator(max_denominator=1000000)
Fraction('3.1415926535897932').limit_denominator(1000)
Fraction(355, 113)
Fraction(cos(pi/3))
Fraction(4503599627370497, 9007199254740992)
Fraction(cos(pi/3)).limit_denominator()
Fraction(1, 2)
Fraction(1.1).limit_denominator()
Fraction(11, 10)
__floor__()
math.floor() 
floor(Fraction(355, 113))
__ceil__()
math.ceil() 
__round__()
__round__(ndigits)
Fraction(1, 10**ndigits) 
round() 
random() 
random()
seed()
getstate()
setstate() 
getrandbits() 
randrange() 
os.urandom() 
random.seed(a=None, version=2)
os.urandom() 
random.getstate()
setstate() 
random.setstate(state)
getstate() 
setstate() 
getstate() 
random.randbytes(n)
secrets.token_bytes() 
random.randrange(stop)
random.randrange(start, stop[, step])
range(start, stop, step) 
choice(range(start, stop, step)) 
range() 
randrange() 
int(random()*n) 
random.randint(a, b)
randrange(a, b+1) 
random.getrandbits(k)
getrandbits() 
randrange() 
random.choice(seq)
itertools.accumulate() 
random() 
choices() 
choice() 
choices() 
choice() 
random.shuffle(x[, random])
random() 
sample(x, k=len(x)) 
len(x) 
sample(['red', 'blue'], counts=[4, 2], k=5) is equivalent
sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
range() 
sample(range(10000000), k=60)
random.random()
random.uniform(a, b)
a + (b-a) * random() 
random.triangular(low, high, mode)
random.betavariate(alpha, beta)
random.expovariate(lambd)
random.gammavariate(alpha, beta)
x ** (alpha - 1) * math.exp(-x / beta)
pdf(x) 
math.gamma(alpha) * beta ** alpha
random.gauss(mu, sigma)
normalvariate() 
normalvariate() 
random.lognormvariate(mu, sigma)
random.normalvariate(mu, sigma)
random.vonmisesvariate(mu, kappa)
random.paretovariate(alpha)
random.weibullvariate(alpha, beta)
random.Random([seed])
random.SystemRandom([seed])
os.urandom() 
seed() 
getstate() 
setstate() 
random() 
random()                             
uniform(2.5, 10.0)                   
expovariate(1 / 5)                   
randrange(10)                        
randrange(0, 101, 2)                 
choice(['win', 'lose', 'draw'])      
deck = 'ace two three four'.split()
shuffle(deck)                        
sample([10, 20, 30, 40, 50], k=4)    
choices(['red', 'black', 'green'], [18, 18, 2], k=6)
dealt = sample(['tens', 'low cards'], counts=[16, 36], k=20)
dealt.count('tens') / 20
def trial():
return choices('HT', cum_weights=(0.60, 1.00), k=7).count('H') >= 5
sum(trial() for i in range(10_000)) / 10_000
def trial():
return 2_500 <= sorted(choices(range(10_000), k=5))[2] < 7_500
sum(trial() for i in range(10_000)) / 10_000
means = sorted(mean(choices(data, k=len(data))) for i in range(100))
The sample mean of {mean(data):.1f} has a 90% confidence 
observed_diff = mean(drug) - mean(placebo)
for i in range(n):
shuffle(combined)
new_diff = mean(combined[:len(drug)]) - mean(combined[len(drug):])
count += (new_diff >= observed_diff)
print(f'{n} label reshufflings produced only {count} instances with a difference')
print(f'at least as extreme as the observed difference of {observed_diff:.1f}.')
print(f'The one-sided p-value of {count / n:.4f} leads us to reject the null')
print(f'hypothesis that there is no difference between the drug and the placebo.')
for i in range(100_000):
arrival_time += expovariate(1.0 / average_arrival_interval)
next_server_available = heappop(servers)
wait = max(0.0, next_server_available - arrival_time)
waits.append(wait)
service_duration = gauss(average_service_time, stdev_service_time)
heappush(servers, service_completed)
print(f'Mean wait: {mean(waits):.1f}.  Stdev wait: {stdev(waits):.1f}.')
print(f'Median wait: {median(waits):.1f}.  Max wait: {max(waits):.1f}.')
random() 
class FullRandom(Random
def random(self):
mantissa = 0x10_0000_0000_0000 | self.getrandbits(52)
x = self.getrandbits(32)
exponent += x.bit_length() - 32
return ldexp(mantissa, exponent)
fr = FullRandom()
fr.random()
fr.expovariate(0.25)
math.ulp(0.0)
numeric (Real-valued) 
map() 
mean()
fmean()
geometric_mean()
harmonic_mean()
median()
median_low()
median_high()
median_grouped()
mode()
multimode()
quantiles()
pstdev()
pvariance()
stdev()
variance()
statistics.mean(data)
mean([1, 2, 3, 4, 4])
mean([-1.0, 2.5, 3.25, 5.75])
mean([F(3, 7), F(1, 21), F(5, 3), F(1, 3)])
Fraction(13, 21)
mean([D("0.5"), D("0.75"), D("0.625"), D("0.375")])
Decimal('0.5625')
median() and mode()
mean(sample) 
mean(data) is equivalent
statistics.fmean(data)
mean() 
fmean([3.5, 4.0, 5.25])
statistics.geometric_mean(data)
round(geometric_mean([54, 24, 36]), 1)
statistics.harmonic_mean(data)
mean() 
3/(1/a + 1/b + 1/c). If
harmonic_mean([40, 60])
harmonic_mean([2.5, 3, 10])  
statistics.median(data)
median([1, 3, 5])
median([1, 3, 5, 7])
median_low() or median_high() 
statistics.median_low(data)
median_low([1, 3, 5])
median_low([1, 3, 5, 7])
statistics.median_high(data)
median_high([1, 3, 5])
median_high([1, 3, 5, 7])
statistics.median_grouped(data, interval=1)
median_grouped([52, 52, 53, 54])
median_grouped([1, 2, 2, 3, 4, 4, 4, 4, 4, 5])
median_grouped([1, 3, 3, 5, 7], interval=1)
median_grouped([1, 3, 3, 5, 7], interval=2)
median_grouped() 
statistics.mode(data)
min(multimode(data)) or max(multimode(data)). If
mode([1, 1, 2, 3, 3, 3, 3, 4])
nominal (non-numeric) 
mode(["red", "blue", "blue", "red", "green", "red", "red"])
statistics.multimode(data)
multimode('aabbbbccddddeeffffgg')
multimode('')
statistics.pstdev(data, mu=None)
pvariance() 
pstdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])
statistics.pvariance(data, mu=None)
variability (spread or dispersion) 
variance() 
pvariance(data)
mu = mean(data)
pvariance(data, mu)
pvariance([D("27.5"), D("30.25"), D("30.25"), D("34.5"), D("41.75")])
Decimal('24.815')
pvariance([F(1, 4), F(5, 4), F(1, 2)])
Fraction(13, 72)
statistics.stdev(data, xbar=None)
variance() 
stdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])
statistics.variance(data, xbar=None)
pvariance() 
variance(data)
m = mean(data)
variance(data, m)
variance([D("27.5"), D("30.25"), D("30.25"), D("34.5"), D("41.75")])
Decimal('31.01875')
variance([F(1, 6), F(1, 2), F(5, 3)])
Fraction(67, 108)
pvariance() 
i / (m + 1). Given
as (i - 1) / (m - 1). Given
round(q, 1) for q in quantiles(data, n=10)
statistics.NormalDist(mu=0.0, sigma=1.0)
from_samples(data)
fmean() and stdev()
pdf(x)
function (pdf)
P(x <= X < x+dx) / dx
cdf(x)
function (cdf)
P(X <= x)
inv_cdf(p)
overlap(other)
quantiles(n=4)
of (n - 1) 
zscore(x)
temperature_february = NormalDist(5, 2.5)             
temperature_february * (9/5) + 32
NormalDist(mu=41.0, sigma=4.5)
birth_weights = NormalDist.from_samples([2.5, 3.1, 2.1, 2.4, 2.7, 3.5])
drug_effects = NormalDist(0.4, 0.15)
round(combined.mean, 1)
round(combined.stdev, 1)
sat = NormalDist(1060, 195)
fraction = sat.cdf(1200 + 0.5) - sat.cdf(1100 - 0.5)
round(fraction * 100.0, 1)
list(map(round, sat.quantiles()))
list(map(round, sat.quantiles(n=10)))
def model(x, y, z):
return (3*x + 7*x*y - 5*y) / (11 * z)
X = NormalDist(10, 2.5).samples(n, seed=3652260728)
Y = NormalDist(15, 1.75).samples(n, seed=4582495471)
Z = NormalDist(50, 1.25).samples(n, seed=6582483453)
quantiles(map(model, X, Y, Z))       
round(NormalDist(mu=n*p, sigma=sqrt(n*p*q)).cdf(k + 0.5), 4)
round(fsum(comb(n, r) * p**r * q**(n-r) for r in range(k+1)), 4)
seed(8675309)
def trial():
return choices(('Python', 'Ruby'), (p, q), k=n).count('Python')
mean(trial() <= k for i in range(10_000))
height_male = NormalDist.from_samples([6, 5.92, 5.58, 5.92])
height_female = NormalDist.from_samples([5, 5.5, 5.42, 5.75])
weight_male = NormalDist.from_samples([180, 190, 170, 165])
weight_female = NormalDist.from_samples([100, 150, 130, 150])
foot_size_male = NormalDist.from_samples([12, 11, 12, 10])
foot_size_female = NormalDist.from_samples([6, 8, 7, 9])
prior_male * height_male.pdf(ht) 
weight_male.pdf(wt) * foot_size_male.pdf(fs)
prior_female * height_female.pdf(ht) 
weight_female.pdf(wt) * foot_size_female.pdf(fs)
def main():
print('Hello ...')
asyncio.sleep(1)
print('... World!')
asyncio.run(main())
socket() 
read() 
write() 
four-tuple (host, port, flowinfo, scope_id) is used
omitted (recommended)
tuple (interface, rx_addr, tx_addr) 
identifier (standard or extended)
tuple (interface, name, pgn, addr) 
Number (PGN)
hmac(sha256)
cbc(aes) 
a (CID, port) 
tuple (ifname, proto[, pkttype[, hatype[, addr]]]) 
a (node, port) 
change. self.setsockopt(IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV, length) 
checksum and self.setsockopt(IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV, length) 
be in range(8, 2**16, 8)
socket(AF_INET, SOCK_DGRAM, IPPROTO_UDPLITE) 
IPv4 or socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDPLITE) 
setblocking() 
settimeout() 
gethostbyname_ex() 
gethostbyaddr() 
hstrerror() 
getaddrinfo() 
getnameinfo() 
gai_strerror() 
settimeout() 
setdefaulttimeout() 
socket() 
socket() 
setsockopt() 
getsockopt() 
WSAIoctl() 
ioctl() 
socket.socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None)
socket.getpeername() 
socket.fromfd()
socket.close()
socket() 
socket.socketpair([family[, type[, proto]]])
socket() 
socket.create_connection(address[, timeout[, source_address]])
socket.connect() 
getdefaulttimeout() 
2-tuple (host, port)
socket.listen()
socket.getpeername() 
default (e.g. Linux). This
has_dualstack_ipv6()
addr = ("", 8080)  
if socket.has_dualstack_ipv6():
s = socket.create_server(addr, family=socket.AF_INET6, dualstack_ipv6=True)
s = socket.create_server(addr)
socket.has_dualstack_ipv6()
socket.fromfd(fd, family, type, proto=0)
fileno() 
socket() 
socket.fromshare(data)
socket.share() 
socket.close(fd)
os.close()
os.close() 
socket.getaddrinfo(host, port, family=0, type=0, proto=0, flags=0)
socket() 
a (address, port) 
a (address, port, flowinfo, scope_id) 
socket.connect() 
socket.getaddrinfo("example.org", 80, proto=socket.IPPROTO_TCP)
socket.getfqdn([name])
gethostbyaddr() 
gethostname() 
socket.gethostbyname(hostname)
gethostbyname() 
gethostbyname_ex() 
gethostbyname() 
getaddrinfo() 
socket.gethostbyname_ex(hostname)
gethostbyname_ex() 
getaddrinfo() 
socket.gethostname()
gethostname() 
getfqdn() 
socket.gethostbyaddr(ip_address)
getfqdn() 
gethostbyaddr() 
socket.getnameinfo(sockaddr, flags)
getnameinfo(3)
socket.getprotobyname(protocolname)
socket() 
socket.getservbyname(servicename[, protocolname])
socket.getservbyport(port[, protocolname])
socket.ntohl(x)
socket.ntohs(x)
socket.htonl(x)
socket.htons(x)
socket.inet_aton(ip_string)
inet_aton() 
inet(3) 
inet_aton() 
inet_aton() 
inet_pton() 
socket.inet_ntoa(packed_ip)
inet_ntoa() 
inet_ntop() 
socket.inet_pton(address_family, ip_string)
inet_pton() 
inet_aton() 
inet_pton() 
socket.inet_ntop(address_family, packed_ip)
inet_ntop() 
inet_ntoa() 
inet_ntop() 
socket.CMSG_LEN(length)
recvmsg() 
CMSG_SPACE() 
socket.CMSG_SPACE(length)
recvmsg() 
CMSG_SPACE() 
socket.getdefaulttimeout()
socket.setdefaulttimeout(timeout)
settimeout() 
socket.sethostname(name)
socket.if_nameindex()
socket.if_nametoindex(if_name)
documented in if_nameindex()
socket.if_indextoname(if_index)
documented in if_nameindex()
makefile() 
close() 
socket.accept()
socket.bind(address)
socket.close()
makefile() 
close() 
close() 
close() 
close() 
shutdown() 
socket.connect(address)
socket.connect_ex(address)
connect(address) 
connect() 
socket.detach()
socket.dup()
socket.fileno()
select.select() 
os.fdopen() 
socket.get_inheritable()
socket.getpeername()
socket.getsockname()
socket.getsockopt(level, optname[, buflen])
getsockopt(2) 
socket.getblocking()
socket.gettimeout() == 0.
socket.gettimeout()
setblocking() 
settimeout() 
socket.ioctl(control, option)
ioctl() 
fcntl.fcntl() 
fcntl.ioctl() 
socket.listen([backlog])
makefile() 
open() 
makefile() 
socket.close() 
subprocess.Popen() 
makefile() 
socket.recv(bufsize[, flags])
recv(2) 
socket.recvfrom(bufsize[, flags])
recv(2) 
getnameinfo()
socket.recvmsg(bufsize[, ancbufsize[, flags]])
CMSG_SPACE() 
CMSG_LEN() 
recv() 
sendmsg() 
recvmsg() 
recvmsg() 
recvmsg() 
recvmsg() 
sendmsg() 
def recv_fds(sock, msglen, maxfds):
fds = array.array("i")   
msg, ancdata, flags, addr = sock.recvmsg(msglen, socket.CMSG_LEN(maxfds * fds.itemsize))
fds.frombytes(cmsg_data[:len(cmsg_data) - (len(cmsg_data) % fds.itemsize)])
return msg, list(fds)
socket.recvmsg_into(buffers[, ancbufsize[, flags]])
recvmsg() 
sysconf() 
recvmsg() 
recvmsg() 
s1, s2 = socket.socketpair()
s2.recvmsg_into([b1, memoryview(b2)[2:9], b3])
socket.recvfrom_into(buffer[, nbytes[, flags]])
recv(2) 
socket.recv_into(buffer[, nbytes[, flags]])
recv(2) 
socket.send(bytes[, flags])
recv() 
socket.sendall(bytes[, flags])
recv() 
send() 
socket.sendto(bytes, address)
socket.sendto(bytes, flags, address)
recv() 
socket.sendmsg(buffers[, ancdata[, flags[, address]]])
sysconf() 
CMSG_SPACE() 
send() 
recvmsg() 
def send_fds(sock, msg, fds):
return sock.sendmsg([msg], [(socket.SOL_SOCKET, socket.SCM_RIGHTS, array.array("i", fds))])
sendmsg() 
socket.send_fds(sock, buffers, fds[, flags[, address]])
sendmsg() 
sendmsg() and SCM_RIGHTS
socket.recv_fds(sock, bufsize, maxfds[, flags])
descriptors. Return (msg, list(fds), flags, addr). Consult
recvmsg() 
recvmsg() and SCM_RIGHTS
socket.sendfile(file, offset=0, count=None)
send() 
file.tell()  
socket.set_inheritable(inheritable)
socket.setblocking(flag)
settimeout() 
sock.setblocking(True) 
sock.settimeout(None) 
sock.setblocking(False) 
sock.settimeout(0.0) 
socket.settimeout(value)
setsockopt(2) 
setsockopt() 
socket.shutdown(how)
socket.share(process_id)
fromshare() 
read() 
write() 
recv() 
send() 
setdefaulttimeout() 
fileno() 
connect() 
settimeout() 
connect() 
create_connection() 
getdefaulttimeout() 
accept() 
accept() 
accept() 
socket() 
bind() 
listen() 
accept() 
accept() 
socket() 
connect() 
sendall() / recv() 
accept() 
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
s.bind((HOST, PORT))
s.listen(1)
conn, addr = s.accept()
print('Connected by', addr)
data = conn.recv(1024)
conn.sendall(data)
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
s.connect((HOST, PORT))
data = s.recv(1024)
print('Received', repr(data))
s = socket.socket(af, socktype, proto)
s.bind(sa)
s.listen(1)
s.close()
print('could not open socket')
sys.exit(1)
conn, addr = s.accept()
print('Connected by', addr)
data = conn.recv(1024)
conn.send(data)
for res in socket.getaddrinfo(HOST, PORT, socket.AF_UNSPEC, socket.SOCK_STREAM):
s = socket.socket(af, socktype, proto)
s.connect(sa)
s.close()
print('could not open socket')
sys.exit(1)
data = s.recv(1024)
print('Received', repr(data))
HOST = socket.gethostbyname(socket.gethostname())
s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP)
s.bind((HOST, 0))
s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
s.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON)
print(s.recvfrom(65565))
s.ioctl(socket.SIO_RCVALL, socket.RCVALL_OFF)
socket.socket(socket.AF_CAN, socket.SOCK_DGRAM, socket.CAN_BCM)
socket.send() 
socket.recv() 
can_frame_size = struct.calcsize(can_frame_fmt)
def build_can_frame(can_id, data):
can_dlc = len(data)
return struct.pack(can_frame_fmt, can_id, can_dlc, data)
def dissect_can_frame(frame):
can_id, can_dlc, data = struct.unpack(can_frame_fmt, frame)
return (can_id, can_dlc, data[:can_dlc])
s = socket.socket(socket.AF_CAN, socket.SOCK_RAW, socket.CAN_RAW)
s.bind(('vcan0',))
cf, addr = s.recvfrom(can_frame_size)
print('Received: can_id=%x, can_dlc=%x, data=%s' % dissect_can_frame(cf))
s.send(cf)
print('Error sending CAN frame')
print('Error sending CAN frame')
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind((HOST, PORT))
getpeercert() 
cipher() 
SSLContext.wrap_socket() 
SSLContext.wrap_socket() 
create_default_context() 
wrap_socket() 
indication (SNI) and hostname
context = ssl.create_default_context()
with socket.create_connection((hostname, 443)) as sock:
with context.wrap_socket(sock, server_hostname=hostname) as ssock:
print(ssock.version())
context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
context.load_verify_locations('path/to/cabundle.pem')
with socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) as sock:
with context.wrap_socket(sock, server_hostname=hostname) as ssock:
print(ssock.version())
context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
context.load_cert_chain('/path/to/certchain.pem', '/path/to/private.key')
with socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) as sock:
sock.bind(('127.0.0.1', 8443))
sock.listen(5)
with context.wrap_socket(sock, server_side=True) as ssock:
conn, addr = ssock.accept()
ssl.create_default_context(purpose=Purpose.SERVER_AUTH, cafile=None, capath=None, cadata=None)
SSLContext.load_verify_locations() 
SSLContext.load_default_certs() 
create_default_context() 
ctx = ssl.create_default_context(Purpose.CLIENT_AUTH)
ssl.RAND_bytes(num)
RAND_status() 
RAND_add() 
os.urandom() 
generator (CSPRNG)
ssl.RAND_pseudo_bytes(num)
os.urandom() 
ssl.RAND_pseudo_bytes() 
ssl.RAND_bytes() 
ssl.RAND_status()
ssl.RAND_egd() 
ssl.RAND_add() 
ssl.RAND_egd(path)
ssl.RAND_add(bytes, entropy)
ssl.match_hostname(cert, hostname)
SSLSocket.getpeercert()
cert = {'subject': ((('commonName', 'example.com'),),)}
ssl.match_hostname(cert, "example.com")
ssl.match_hostname(cert, "example.org")
ssl.cert_time_to_seconds(cert_time)
timestamp = ssl.cert_time_to_seconds("Jan  5 09:34:43 2018 GMT")
print(datetime.utcfromtimestamp(timestamp))  
ssl.get_server_certificate(addr, ssl_version=PROTOCOL_TLS, ca_certs=None)
a (hostname, port-number) 
parameter in SSLContext.wrap_socket(). The
ssl.DER_cert_to_PEM_cert(DER_cert_bytes)
ssl.PEM_cert_to_DER_cert(PEM_cert_string)
ssl.get_default_verify_paths()
SSLContext.set_default_verify_paths() 
ssl.enum_certificates(store_name)
ssl.enum_certificates("CA")
ssl.enum_crls(store_name)
ssl.wrap_socket(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=CERT_NONE, ssl_version=PROTOCOL_TLS, ca_certs=None, do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None)
SSLContext.load_cert_chain()
SSLContext.load_verify_locations()
SSLContext.set_ciphers()
SSLContext.wrap_socket()
SSLContext.wrap_socket() 
wrap_socket(). The
wrap_socket(). Except
wrap_socket(). In
SSLContext.load_verify_locations() 
wrap_socket() 
wrap_socket(). In
SSLContext.load_verify_locations() 
wrap_socket() 
Spec (CCS) 
SSLContext.set_npn_protocols() 
SSLSocket.get_channel_binding() 
hex(ssl.OPENSSL_VERSION_NUMBER)
SSLContext.set_servername_callback() 
create_default_context() 
SSLContext.load_default_certs() 
create_default_context() 
SSLContext.load_default_certs() 
ssl.SSLSocket(socket.socket)
accept()
bind()
close()
connect()
detach()
fileno()
getpeername()
getsockname()
getsockopt()
setsockopt()
gettimeout()
settimeout()
setblocking()
listen()
makefile()
recv()
recv_into() 
send()
sendall() 
sendfile() 
send() 
shutdown()
SSLContext.wrap_socket() 
sendfile() 
shutdown() 
SSLContext.wrap_socket() 
wrap_socket(). In
SSLSocket.read(len=1024, buffer=None)
read() 
read() 
recv() 
SSLSocket.write(buf)
write() 
write() 
send() 
read()
write() 
SSLSocket.unwrap() 
recv() 
send() 
SSLSocket.do_handshake()
match_hostname() 
match_hostname() is no
SSLSocket.getpeercert(binary_form=False)
match_hostname() 
getpeercert() 
SSLSocket.cipher()
SSLSocket.shared_ciphers()
SSLSocket.compression()
SSLSocket.get_channel_binding(cb_type="tls-unique")
SSLSocket.selected_alpn_protocol()
SSLContext.set_alpn_protocols() 
SSLSocket.selected_npn_protocol()
SSLContext.set_npn_protocols() 
SSLSocket.unwrap()
SSLSocket.verify_client_post_handshake()
authentication (PHA) 
SSLSocket.version()
SSLSocket.pending()
wrap_socket() 
SSLContext.wrap_socket()
name (IDN)
form ("xn--pythn-mua.org")
form ("pythön.org")
do_handshake() 
ssl.SSLContext(protocol=PROTOCOL_TLS)
TLS (SSLv23) 
1(1,2)
2(1,2)
3(1,2)
create_default_context() 
SSLContext.cert_store_stats()
context.cert_store_stats()
SSLContext.load_cert_chain(certfile, keyfile=None, password=None)
SSLContext.load_default_certs(purpose=Purpose.SERVER_AUTH)
SSLContext.set_default_verify_paths() 
SSLContext.load_verify_locations(cafile=None, capath=None, cadata=None)
SSLContext.get_ca_certs(binary_form=False)
SSLSocket.getpeercert() 
SSLContext.get_ciphers()
SSLContext.set_ciphers() 
ctx = ssl.SSLContext(ssl.PROTOCOL_SSLv23)
ctx.set_ciphers('ECDHE+AESGCM:!ECDSA')
ctx.get_ciphers()  
Enc=AESGCM(256) 
Enc=AESGCM(128) 
ctx.get_ciphers()  
Enc=AESGCM(256) 
Enc=AESGCM(128) 
SSLContext.set_default_verify_paths()
SSLContext.set_ciphers(ciphers)
SSLSocket.cipher() 
set_ciphers()
SSLContext.set_alpn_protocols(protocols)
SSLSocket.selected_alpn_protocol() 
SSLSocket.selected_alpn_protocol() 
SSLContext.set_npn_protocols(protocols)
SSLSocket.selected_npn_protocol() 
A-label ("xn--pythn-mua.org")
SSLSocket.selected_alpn_protocol()
SSLSocket.getpeercert()
SSLSocket.getpeercert()
SSLSocket.cipher()
SSLSocket.compress() 
SSLContext.set_servername_callback(server_name_callback)
U-label ("pythön.org")
SSLContext.load_dh_params(dhfile)
Diffie-Hellman (DH) 
SSLContext.set_ecdh_curve(curve_name)
SSLContext.wrap_socket(sock, server_side=False, do_handshake_on_connect=True, suppress_ragged_eofs=True, server_hostname=None, session=None)
connect() is called
accept() 
socket.connect() 
SSLSocket.do_handshake() 
SSLSocket.do_handshake() 
SSLSocket.recv() 
SSLContext.wrap_socket()
SSLContext.wrap_bio(incoming, outgoing, server_side=False, server_hostname=None, session=None)
SSLContext.wrap_socket() 
SSLContext.wrap_bio()
SSLContext.session_stats()
stats = context.session_stats()
hostname in SSLSocket.do_handshake(). The
wrap_socket() in order
context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
context.load_default_certs()
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ssl_sock = context.wrap_socket(s, server_hostname='www.verisign.com')
ssl_sock.connect(('www.verisign.com', 443))
ssl.create_default_context().options
SSLSocket.verify_client_post_handshake() is called and some
ssl.create_default_context().verify_flags
ssl.create_default_context().verify_mode
SSLContext.load_default_certs() 
create_default_context() 
SSLContext.load_cert_chain()
wrap_socket() 
Name (eg, city) []
Name (eg, company) 
Name (eg, section) []
context = ssl.create_default_context()
context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
context.load_verify_locations("/etc/ssl/certs/ca-bundle.crt")
socket.socket(socket.AF_INET)
conn.connect(("www.python.org", 443))
cert = conn.getpeercert()
pprint.pprint(cert)
conn.recv(1024).split
listen() 
context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
context.load_cert_chain(certfile="mycertfile", keyfile="mykeyfile")
bindsocket = socket.socket()
bindsocket.bind(('myaddr.mydomain.com', 10023))
bindsocket.listen(5)
accept() 
SSLContext.wrap_socket() 
newsocket, fromaddr = bindsocket.accept()
connstream = context.wrap_socket(newsocket, server_side=True)
deal_with_client(connstream)
connstream.shutdown(socket.SHUT_RDWR)
connstream.close()
def deal_with_client(connstream):
data = connstream.recv(1024)
if not do_something(connstream, data):
data = connstream.recv(1024)
SSLSocket.send() 
select() 
SSLSocket.recv() 
SSLSocket.send() 
select() 
select() 
SSLSocket.recv() 
select() 
poll() 
SSLSocket.do_handshake() 
select() 
sock.do_handshake()
select.select([sock], [], [])
select.select([], [sock], [])
wrap_bio() 
read()
write()
getpeercert()
selected_alpn_protocol()
selected_npn_protocol()
cipher()
shared_ciphers()
compression()
pending()
do_handshake()
verify_client_post_handshake()
unwrap()
get_channel_binding()
version()
recv() and send() 
do_handshake() 
unwrap() 
SSLContext.set_servername_callback() 
read() 
wrap_socket() 
wrap_bio() 
wrap_bio(). In
read(n=-1)
write(buf)
write_eof()
write() 
create_default_context() 
smtp = smtplib.SMTP("mail.python.org", port=587)
context = ssl.create_default_context()
smtp.starttls(context=context)
SSLContext.load_cert_chain() 
SSLSocket.getpeercert() 
match_hostname() 
match_hostname()
client_context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
SSLContext.set_ciphers() 
SSLContext.get_ciphers() or the
os.fork() 
RAND_add()
RAND_bytes()
RAND_pseudo_bytes() 
SSLContext.set_ciphers() 
SSLContext.get_ciphers() 
SSLContext.set_npn_protocols() and SSLSocket.selected_npn_protocol() 
SSLContext.set_default_verify_paths() 
get_default_verify_paths() 
List (CRL) 
Security (TLS) 
Security (TLS) 
Security (TLS) 
select() 
poll() 
devpoll() 
epoll() 
kqueue() 
select.devpoll()
devpoll() 
devpoll() 
devpoll() 
select.epoll(sizehint=-1, flags=0)
epoll_create1() is not available
os.set_inheritable() 
select.poll()
select.kqueue()
select.kevent(ident, filter=KQ_FILTER_READ, flags=KQ_EV_ADD, fflags=0, data=0, udata=0)
select.select(rlist, wlist, xlist[, timeout])
select() 
fileno() 
open() or os.popen()
socket.socket(). You
fileno() 
select() 
select() 
select()
poll() 
select() 
poll() 
poll() 
devpoll.close()
devpoll.fileno()
devpoll.register(fd[, eventmask])
poll() 
fileno() 
fileno() 
poll() 
poll() 
devpoll.modify(fd[, eventmask])
unregister() 
register() 
devpoll.unregister(fd)
register() 
fileno() 
devpoll.poll([timeout])
epoll.close()
epoll.fileno()
epoll.fromfd(fd)
epoll.register(fd[, eventmask])
epoll.modify(fd, eventmask)
epoll.unregister(fd)
epoll.poll(timeout=None, maxevents=-1)
poll() 
poll() 
select() 
select() 
poll() 
poll.register(fd[, eventmask])
poll() 
fileno() 
fileno() 
poll.modify(fd, eventmask)
register(fd, eventmask) 
poll.unregister(fd)
register() 
fileno() 
poll.poll([timeout])
kqueue.close()
kqueue.fileno()
kqueue.fromfd(fd)
kqueue.control(changelist, max_events[, timeout]) 
fileno() 
control() 
unlink() 
fork() 
fork() 
fileno() 
register(fileobj, events, data=None)
fileno() 
unregister(fileobj)
fileno() 
fileno() 
modify(fileobj, events, data=None)
BaseSelector.unregister(fileobj)() 
BaseSelector.register(fileobj, events, data)() 
select(timeout=None)
close()
get_key(fileobj)
get_map()
select.select() 
select.poll() 
select.epoll() 
fileno()
select.epoll() 
select.devpoll() 
fileno()
select.devpoll() 
select.kqueue() 
fileno()
select.kqueue() 
sel = selectors.DefaultSelector()
def accept(sock, mask):
conn, addr = sock.accept()  
print('accepted', conn, 'from', addr)
conn.setblocking(False)
sel.register(conn, selectors.EVENT_READ, read)
def read(conn, mask):
data = conn.recv(1000)  
print('echoing', repr(data), 'to', conn)
conn.send(data)  
print('closing', conn)
sel.unregister(conn)
conn.close()
sock = socket.socket()
sock.bind(('localhost', 1234))
sock.listen(100)
sock.setblocking(False)
sel.register(sock, selectors.EVENT_READ, accept)
events = sel.select()
callback(key.fileobj, mask)
select() 
loop() 
loop() 
loop() 
asyncore.loop([timeout[, use_poll[, map[, count]]]])
select() 
poll() 
select() 
poll() 
handle_connect()
handle_close()
handle_accepted()
readable() 
writable() 
select() 
poll() 
handle_read()
read() 
handle_write()
def handle_write(self):
sent = self.send(self.buffer)
handle_expt()
band (OOB)
handle_expt() 
handle_connect()
handle_close()
handle_error()
handle_accept()
connect() 
handle_accepted() 
handle_accepted(sock, addr)
connect() 
readable()
writable()
create_socket(family=socket.AF_INET, type=socket.SOCK_STREAM)
connect(address)
send(data)
recv(buffer_size)
select.select() 
select.poll() 
recv() 
listen(backlog)
bind(address)
set_reuse_addr() 
accept()
listen() 
close()
poll() 
loop() 
fileno() 
os.dup() 
HTTPClient(asyncore.dispatcher)
def __init__(self, host, path):
asyncore.dispatcher.__init__(self)
self.create_socket()
self.connect( (host, 80) )
def handle_connect(self):
def handle_close(self):
self.close()
def handle_read(self):
print(self.recv(8192))
def writable(self):
return (len(self.buffer) > 0)
def handle_write(self):
sent = self.send(self.buffer)
client = HTTPClient('www.python.org', '/')
asyncore.loop()
EchoHandler(asyncore.dispatcher_with_send)
def handle_read(self):
data = self.recv(8192)
self.send(data)
EchoServer(asyncore.dispatcher)
def __init__(self, host, port):
asyncore.dispatcher.__init__(self)
self.create_socket()
self.set_reuse_addr()
self.bind((host, port))
self.listen(5)
def handle_accepted(self, sock, addr):
print('Incoming connection from %s' % repr(addr))
handler = EchoHandler(sock)
server = EchoServer('localhost', 8080)
asyncore.loop()
collect_incoming_data() 
found_terminator() 
collect_incoming_data() 
found_terminator() 
select() 
more()
more() 
handle_write() 
set_terminator() 
collect_incoming_data() 
found_terminator() 
async_chat.close_when_done()
async_chat.collect_incoming_data(data)
async_chat.discard_buffers()
async_chat.found_terminator()
set_terminator() 
async_chat.get_terminator()
async_chat.push(data)
async_chat.push_with_producer(producer)
more() 
async_chat.set_terminator(term)
found_terminator() 
found_terminator() 
found_terminator() 
handle_request() 
http_request_handler(asynchat.async_chat)
def __init__(self, sock, addr, sessions, log):
asynchat.async_chat.__init__(self, sock=sock)
def collect_incoming_data(self, data):
self.ibuffer.append(data)
def found_terminator(self):
join(self.ibuffer)
self.op.upper() == b
clen = self.headers.getheader("content-length")
self.set_terminator(int(clen))
self.set_terminator(None)
self.handle_request()
self.set_terminator(None)  
join(self.ibuffer)
self.handle_request()
signal.signal() 
handler (SIG_DFL, SIG_IGN) and sigmask (SIG_BLOCK, SIG_UNBLOCK, SIG_SETMASK) 
enums. getsignal()
pthread_sigmask()
sigpending() and sigwait() 
abort(3)
alarm(2)
keyboard (CTRL + BREAK)
keyboard (CTRL + C)
signal()
this is signal(2)
signal(7)
os.kill() 
os.kill() 
pthread_sigmask() 
pthread_sigmask() 
pthread_sigmask() 
setitimer() 
getitimer() 
setitimer() 
signal.alarm(time)
alarm(2) for further information
signal.getsignal(signalnum)
signal.strsignal(signalnum)
signal.valid_signals()
range(1, NSIG) 
signal.pause()
signal(2) for further information
sigwait()
sigwaitinfo()
sigtimedwait() 
sigpending() 
signal.raise_signal(signum)
signal.pidfd_send_signal(pidfd, sig, siginfo=None, flags=0)
pidfd_send_signal(2) 
signal.pthread_kill(thread_id, signalnum)
code (Python or not). However
threading.get_ident() or the
pthread_kill(3) for further information
os.kill() 
signal.pthread_sigmask(how, mask)
valid_signals() 
signal.pthread_sigmask(signal.SIG_BLOCK, []) 
sigprocmask(3) and pthread_sigmask(3) for further information
pause()
sigpending()
sigwait() 
signal.setitimer(which, seconds, interval=0.0)
alarm()
signal.getitimer(which)
signal.siginterrupt(signalnum, flag)
siginterrupt(3) for further information
signal() 
siginterrupt() 
signal.signal(signalnum, handler)
getsignal() 
signal(2) for further information
signal() 
signal.sigpending()
sigpending(2) for further information
pause()
pthread_sigmask()
sigwait() 
signal.sigwait(sigset)
sigwait(3) for further information
pause()
pthread_sigmask()
sigpending()
sigwaitinfo()
sigtimedwait() 
signal.sigwaitinfo(sigset)
sigwaitinfo(2) for further information
pause()
sigwait()
sigtimedwait() 
signal.sigtimedwait(sigset, timeout)
sigwaitinfo()
sigtimedwait(2) for further information
pause()
sigwait()
sigwaitinfo() 
alarm() 
os.open() 
def handler(signum, frame):
print('Signal handler called with signal', signum)
raise OSError("Couldn't open device!")
signal.signal(signal.SIGALRM, handler)
signal.alarm(5)
open() 
fd = os.open('/dev/ttyS0', os.O_RDWR)
signal.alarm(0)          
head(1) 
def main():
for x in range(10000):
print("y")
sys.stdout.flush()
devnull = os.open(os.devnull, os.O_WRONLY)
os.dup2(devnull, sys.stdout.fileno())
sys.exit(1)  
main()
seek() 
fileno() 
os.open() 
flush() 
mmap.mmap(fileno, length, tagname=None, access=ACCESS_DEFAULT[, offset])
mmap.mmap(fileno, length, flags=MAP_SHARED, prot=PROT_WRITE|PROT_READ, access=ACCESS_DEFAULT[, offset])
with open("hello.txt", "wb") as f:
with open("hello.txt", "r+b") as f:
mm = mmap.mmap(f.fileno(), 0)
print(mm.readline())  
print(mm[:5])  
mm.seek(0)
print(mm.readline())  
mm.close()
with mmap.mmap(-1, 13) as mm:
mm = mmap.mmap(-1, 13)
pid = os.fork()
mm.seek(0)
print(mm.readline())
mm.close()
close()
find(sub[, start[, end]])
flush([offset[, size]])
madvise(option[, start[, length]])
madvise() 
move(dest, src, count)
read([n])
read_byte()
readline()
resize(newsize)
rfind(sub[, start[, end]])
seek(pos[, whence])
size()
tell()
write(bytes)
len(bytes) 
write_byte(byte)
mmap.madvise(). Not
madvise() 
open() 
os.stat(path) 
os.uname() 
sys.getfilesystemencoding() 
os.ctermid()
getenv("HOME") 
putenv() 
sys.getfilesystemencoding()
putenv() 
putenv() 
unsetenv() 
pop() 
clear() 
os.chdir(path)
os.fchdir(fd)
os.getcwd()
os.fsencode(filename)
fsdecode() 
os.fsdecode(filename)
fsencode() 
os.fspath(path)
__fspath__() 
__fspath__()
os.getenv(key, default=None)
sys.getfilesystemencoding()
os.getenvb() 
os.getenvb(key, default=None)
getenvb() 
os.get_exec_path(env=None)
os.getegid()
os.geteuid()
os.getgid()
os.getgrouplist(user, group)
os.getgroups()
getgroups() 
getgroups() 
setgroups() 
getgroups() 
setgroups() 
sysconfig.get_config_var() 
os.getlogin()
getpass.getuser() 
getpass.getuser() 
pwd.getpwuid(os.getuid())[0] 
os.getpgid(pid)
os.getpgrp()
os.getpid()
os.getppid()
id (1) 
os.getpriority(which, who)
getpriority() 
setpriority() 
os.getresuid()
os.getresgid()
os.getuid()
os.initgroups(username, gid)
initgroups() 
os.putenv(key, value)
os.system()
popen()
fork() 
execv() 
putenv() 
putenv() 
putenv() 
os.setegid(egid)
os.seteuid(euid)
os.setgid(gid)
os.setgroups(groups)
setgroups() 
getgroups() 
os.setpgrp()
setpgrp() 
setpgrp(0, 0) 
os.setpgid(pid, pgrp)
setpgid() 
os.setpriority(which, who, priority)
os.setregid(rgid, egid)
os.setresgid(rgid, egid, sgid)
os.setresuid(ruid, euid, suid)
os.setreuid(ruid, euid)
os.getsid(pid)
getsid() 
os.setsid()
setsid() 
os.setuid(uid)
os.strerror(code)
strerror() 
os.umask(mask)
os.uname()
socket.gethostname() 
socket.gethostbyaddr(socket.gethostname()) 
os.unsetenv(key)
os.system()
popen()
fork() 
execv() 
unsetenv() 
unsetenv() 
open() 
os.fdopen(fd, *args, **kwargs)
open() 
fdopen() 
fileno() 
os.close(fd)
os.open() 
pipe() 
open() 
popen() 
fdopen() 
close() 
os.closerange(fd_low, fd_high)
for fd in range(fd_low, fd_high):
os.close(fd)
os.copy_file_range(src, dst, count, offset_src=None, offset_dst=None)
os.device_encoding(fd)
os.dup(fd)
os.dup2(fd, fd2, inheritable=True)
os.fchmod(fd, mode)
chmod() 
os.chmod(fd, mode) 
os.fchown(fd, uid, gid)
chown() 
os.chown(fd, uid, gid) 
os.fdatasync(fd)
os.fpathconf(fd, name)
os.pathconf(fd, name) 
os.fstat(fd)
os.stat(fd) 
stat() 
os.fstatvfs(fd)
statvfs() 
os.statvfs(fd) 
os.fsync(fd)
fsync() 
_commit() 
f.flush() 
os.fsync(f.fileno()) 
os.ftruncate(fd, length)
os.truncate(fd, length) 
os.get_blocking(fd)
set_blocking() 
socket.socket.setblocking() 
os.isatty(fd)
os.lockf(fd, cmd, len)
lockf() 
os.lseek(fd, pos, how)
lseek() 
open() 
open() 
read() 
write() 
fdopen() 
open() 
open(2)
os.openpty()
os.pipe()
os.pipe2(flags)
os.posix_fallocate(fd, offset, len)
os.posix_fadvise(fd, offset, len, advice)
posix_fadvise() 
os.pread(fd, n, offset)
os.preadv(fd, buffers, offset, flags=0)
sysconf() 
os.readv() and os.pread()
os.pwrite(fd, str, offset)
os.pwritev(fd, buffers, offset, flags=0)
sysconf() 
os.writev() and os.pwrite()
open(2) 
open(2) 
os.read(fd, n)
os.open() 
pipe() 
open() 
popen() 
fdopen() 
read() 
readline() 
os.sendfile(out_fd, in_fd, offset, count)
sendfile() 
sendfile() 
socket.socket.sendfile() 
os.set_blocking(fd, blocking)
get_blocking() 
socket.socket.setblocking() 
sendfile() 
os.readv(fd, buffers)
sysconf() 
os.tcgetpgrp(fd)
os.open() 
os.tcsetpgrp(fd, pg)
os.open() 
os.ttyname(fd)
os.write(fd, str)
os.open() 
pipe() 
open() 
popen() 
fdopen() 
write() 
os.writev(fd, buffers)
sysconf() 
os.get_terminal_size(fd=STDOUT_FILENO)
shutil.get_terminal_size() 
os.get_inheritable(fd)
os.set_inheritable(fd, inheritable)
os.get_handle_inheritable(handle)
os.set_handle_inheritable(handle, inheritable)
access(2) 
access() 
open() 
access() 
if os.access("myfile", os.R_OK):
with open("myfile") as fp:
return fp.read()
fp = open("myfile")
return fp.read()
access() 
access() 
os.chdir(path)
chmod() 
shutil.chown() 
os.chroot(path)
os.fchdir(fd)
os.chdir(fd) 
os.getcwd()
os.getcwdb()
os.lchflags(path, flags)
chflags() 
os.chflags(path, flags, follow_symlinks=False) 
os.lchmod(path, mode)
chmod() 
os.chmod(path, mode, follow_symlinks=False) 
os.lchown(path, uid, gid)
os.chown(path, uid, gid, follow_symlinks=False) 
os.listdir(path='.')
fsencode() 
scandir() 
lstat() 
stat() 
stat() 
os.stat(path, dir_fd=dir_fd, follow_symlinks=False) 
stat() 
6.0 (Vista) 
stat()
chmod() 
tempfile.mkdtemp() 
mkdir() 
mkdir() 
mkdir() 
makedirs(). The
makedirs() 
makedirs() 
os.unlink() 
mkfifo() 
os.makedev() 
os.major(device)
os.minor(device)
os.makedev(major, minor)
os.pathconf(path, name)
pathconf() 
fpathconf() 
os.path.join(os.path.dirname(path), result) 
object (direct or indirectly)
realpath() 
6.0 (Vista) 
Remove (delete) 
rmdir() 
unlink() 
os.removedirs(name)
rmdir() 
removedirs() 
os.removedirs('foo/bar/baz') 
replace() 
os.renames(old, new)
rename() 
removedirs() 
Remove (delete) 
shutil.rmtree() 
os.scandir(path='.')
listdir() 
scandir() 
is_dir() 
is_file() 
os.DirEntry.stat() 
scandir() 
scandir.close()
scandir() 
entry.is_file() 
with os.scandir(path) as it:
if not entry.name.startswith('.') and entry.is_file():
print(entry.name)
scandir() 
opendir() and readdir() 
close() 
scandir() 
scandir() 
scandir() 
stat() 
lstat() 
scandir() 
os.stat(entry.path) 
scandir() 
scandir() 
fsdecode() 
os.path.join(scandir_path, entry.name) 
scandir() 
scandir() 
scandir() 
scandir() 
fsdecode() 
inode()
os.stat(entry.path, follow_symlinks=False).st_ino
stat.S_ISDIR() 
os.stat() 
is_dir() 
is_symlink()
os.path.islink() 
os.stat() 
os.stat() 
is_dir() 
is_file() 
is_symlink() 
stat() 
stat() 
lstat() 
os.path.realpath() 
lstat() 
statinfo = os.stat('somefile.txt')
fstat() 
lstat()
os.stat() 
os.fstat() 
os.lstat() 
GetFileInformationByHandle() 
os.statvfs(path)
statvfs() 
os.stat() 
os.access() 
os.access()
os.access() 
os.chdir() 
os.stat() 
6.0 (Vista) 
os.sync()
os.truncate(path, length)
remove() 
remove() 
utime() 
ns=(atime_ns, mtime_ns) 
stat() 
stat(). The
os.stat() 
os.walk(top, topdown=True, onerror=None, followlinks=False)
os.path.join(dirpath, name). Whether or not the 
walk() 
walk() 
walk() 
scandir() 
walk() 
walk() 
walk() 
walk() 
for root, dirs, files in os.walk('python/Lib/email'):
print(root, "consumes", end=" ")
print(sum(getsize(join(root, name)) for name in files), end=" ")
print("bytes in", len(files), "non-directory files")
dirs.remove('CVS')  
shutil.rmtree() 
rmdir() 
for root, dirs, files in os.walk(top, topdown=False):
os.remove(os.path.join(root, name))
os.rmdir(os.path.join(root, name))
os.listdir() 
os.scandir() 
os.stat() 
walk() 
walk() 
fwalk() 
fwalk() 
dup() 
for root, dirs, files, rootfd in os.fwalk('python/Lib/email'):
print(root, "consumes", end="")
sum([os.stat(name, dir_fd=rootfd).st_size for name in files])
print("bytes in", len(files), "non-directory files")
dirs.remove('CVS')  
rmdir() 
for root, dirs, files, rootfd in os.fwalk(top, topdown=False):
os.unlink(name, dir_fd=rootfd)
os.rmdir(name, dir_fd=rootfd)
os.memfd_create(name[, flags=os.MFD_CLOEXEC])
memfd_create()
listxattr() 
setxattr() 
setxattr() 
main() 
os.execv('/bin/echo', ['foo', 'bar']) 
os.abort()
signal.signal() 
os.add_dll_directory(path)
close() 
os.execv(path, args)
os.execve(path, args, env)
os.execvp(file, args)
os.execvpe(file, args, env)
sys.stdout.flush() 
os.fsync() 
execlp()
execlpe()
execvp()
execvpe()
execl()
execle()
execv()
execve() 
execle() 
execlpe() 
execve() 
execvpe() 
execl() 
execlp() 
execv() 
execvp() 
execve() 
execve()
os._exit(n)
sys.exit(n) 
_exit() 
fork() 
_exit() 
os.fork()
fork() 
fork() in a
supported (RuntimeError is raised)
fork() 
os.forkpty()
forkpty() in a
supported (RuntimeError is raised)
os.kill(pid, sig)
kill() 
signal.pthread_kill() 
os.killpg(pgid, sig)
os.nice(increment)
os.pidfd_open(pid, flags=0)
pidfd_open(2) 
os.plock(op)
os.popen(cmd, mode='r', buffering=-1)
open() 
waitstatus_to_exitcode() 
posix_spawn() 
subprocess.run() 
posix_spawn()
execve()
posix_spawnp() 
fork() and exec() 
os.dup2(os.open(path, flags, mode), fd)
os.close(fd)
os.dup2(fd, new_fd)
posix_spawn_file_actions_addopen()
posix_spawn_file_actions_addclose()
posix_spawn_file_actions_adddup2() 
posix_spawn() 
the (optional) 
posix_spawnp() 
posix_spawn() 
execvp(3)
posix_spawn() 
os.fork() or similar
fork() 
PyOS_BeforeFork()
PyOS_AfterFork_Parent() and PyOS_AfterFork_Child()
os.spawnv(mode, path, args)
os.spawnve(mode, path, args, env)
os.spawnvp(mode, file, args)
os.spawnvpe(mode, file, args, env)
waitpid() 
spawnlp()
spawnlpe()
spawnvp()
spawnvpe()
spawnl()
spawnle()
spawnv()
spawnve() 
spawnle()
spawnlpe()
spawnve()
spawnvpe() 
spawnl() 
spawnlp() 
spawnv() 
spawnvp() 
spawnlp() 
spawnvpe() 
os.spawnlp(os.P_WAIT, 'cp', 'cp', 'index.html', '/dev/null')
os.spawnvpe(os.P_WAIT, 'cp', L, os.environ)
Windows. spawnlp()
spawnlpe()
spawnvp() and spawnvpe() 
Windows. spawnle() and spawnve() 
os.startfile(path[, operation])
startfile() 
ShellExecute() 
os.path.normpath() 
ShellExecute() 
os.system(command)
system() 
system() 
wait() 
system() 
system() 
waitstatus_to_exitcode() 
os.times()
times(2) and times(3) 
os.wait()
waitstatus_to_exitcode() 
waitpid() 
os.waitid(idtype, id, options)
waitid() 
waitid() 
waitid() 
os.waitpid(pid, options)
wait() 
waitpid() 
waitstatus_to_exitcode() 
os.wait3(options)
waitpid() 
resource. getrusage() 
waitpid() 
wait4() 
waitstatus_to_exitcode() 
os.wait4(pid, options)
waitpid() 
resource. getrusage() 
wait4() 
waitpid() 
waitstatus_to_exitcode() 
os.waitstatus_to_exitcode(status)
WIFEXITED(status) is true
return WEXITSTATUS(status)
WIFSIGNALED(status) is true
terminate (return -WTERMSIG(status))
waitpid() 
WIFSTOPPED(status) is true. This
WIFSTOPPED(status) is true
WIFEXITED()
WEXITSTATUS()
WIFSIGNALED()
WTERMSIG()
WIFSTOPPED()
WSTOPSIG() 
waitpid() 
system() 
wait() 
waitpid() 
os.WCOREDUMP(status)
WIFSIGNALED() is true
os.WIFCONTINUED(status)
os.WIFSTOPPED(status)
WIFSTOPPED() 
waitpid() 
ptrace(2)
os.WIFSIGNALED(status)
os.WIFEXITED(status)
exit() or _exit()
main()
os.WEXITSTATUS(status)
WIFEXITED() is true
os.WSTOPSIG(status)
WIFSTOPPED() is true
os.WTERMSIG(status)
WIFSIGNALED() is true
os.sched_param(sched_priority)
sched_setparam()
sched_setscheduler()
sched_getparam() 
os.sched_get_priority_min(policy)
os.sched_get_priority_max(policy)
os.sched_setscheduler(pid, policy, param)
os.sched_getscheduler(pid)
os.sched_setparam(pid, param)
os.sched_getparam(pid)
os.sched_rr_get_interval(pid)
os.sched_yield()
os.sched_setaffinity(pid, mask)
os.sched_getaffinity(pid)
os.confstr(name)
confstr() 
os.cpu_count()
len(os.sched_getaffinity(0)) 
os.getloadavg()
os.sysconf(name)
confstr() 
sysconf() 
os.path.split() 
os.path.join() 
setdlopenflags() 
getdlopenflags() 
dlopen(3) 
os.getrandom(size, flags=0)
getrandom() 
getrandom() 
os.urandom(size)
getrandom() 
getrandom() 
CryptGenRandom() 
getrandom() 
getrandom() 
getrandom() 
getentropy() 
getrandom() 
getrandom() 
write() 
write() 
open() 
f = open("myfile.txt", "r", encoding="utf-8")
f = io.StringIO("some initial text data")
open() 
f = open("myfile.jpg", "rb")
socket.socket.makefile() 
f = open("myfile.jpg", "rb", buffering=0)
open() 
os.stat() 
io.open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
open() 
io.open_code(path)
PyFile_SetOpenCodeHook(). However
open_code(path) 
open(path, 'rb'). Overriding
readinto() 
readline() 
stream (RawIOBase). Its
stream (BufferedIOBase). Finally
open() 
read()
write() 
readline() 
with open('spam.txt', 'w') as file:
file.write('Spam and eggs!')
close()
fileno()
flush()
isatty()
readable()
read() 
readline(size=-1)
open() 
readlines(hint=-1)
file.readlines() 
seek(offset, whence=SEEK_SET)
seekable()
seek()
tell()
truncate() 
tell()
truncate(size=None)
writable()
write()
truncate() 
writelines(lines)
__del__()
close() 
read(size=-1)
readall() 
readinto() 
readall()
readinto(b)
write(b)
read()
readinto() 
write() 
read() 
readinto() 
detach()
read(size=-1)
read1([size])
read() 
readinto() 
readinto(b)
read() 
readinto1(b)
read() 
readinto()
write(b)
io.FileIO(name, mode='r', closefd=True, opener=None)
read() 
readinto() 
write() 
open() 
io.BytesIO([initial_bytes])
close() 
getbuffer()
view = b.getbuffer()
b.getvalue()
getvalue()
read1([size])
read() 
readinto1(b)
readinto() 
io.BufferedReader(raw, buffer_size=DEFAULT_BUFFER_SIZE)
peek([size])
read([size])
read1([size])
io.BufferedWriter(raw, buffer_size=DEFAULT_BUFFER_SIZE)
flush() 
seek() 
flush()
write(b)
io.BufferedRandom(raw, buffer_size=DEFAULT_BUFFER_SIZE)
seek() and tell() 
io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)
detach() 
detach()
read(size=-1)
readline(size=-1)
seek(offset, whence=SEEK_SET)
TextIOBase.tell() 
tell()
write(s)
io.TextIOWrapper(buffer, encoding=None, errors=None, newline=None, line_buffering=False, write_through=False)
locale.getpreferredencoding(False) 
codecs.register_error() 
flush() 
write() 
locale.getpreferredencoding() 
locale.getpreferredencoding(False) 
locale.setlocale() 
io.StringIO(initial_value='', newline='\n')
close() 
write() 
getvalue()
read() 
output = io.StringIO()
output.write('First line.\n')
print('Second line.', file=output)
contents = output.getvalue()
getvalue() 
output.close()
TextIOWrapper.tell() 
TextIOWrapper.seek() 
read(2) 
open() 
print() 
time.gmtime(0) 
strptime() 
time() 
sleep() 
time() 
gettimeofday() 
sleep() 
select() 
gmtime()
localtime()
strptime() 
asctime()
mktime()
strftime() 
gmtime()
localtime()
strptime() 
gmtime()
localtime()
calendar.timegm()
mktime()
time.asctime([t])
gmtime() or localtime() 
localtime() is used. Locale
asctime()
asctime() 
time.pthread_getcpuclockid(thread_id)
threading.get_ident() or the
pthread_getcpuclockid(3) 
time.clock_getres(clk_id)
time.clock_gettime(clk_id) 
time.clock_gettime_ns(clk_id) 
clock_gettime() 
clock_settime() 
time.ctime([secs])
time() is used. ctime(secs) is equivalent
asctime(localtime(secs)). Locale
ctime()
time.get_clock_info(name)
time.monotonic()
time.perf_counter()
time.process_time()
time.thread_time()
time.time()
time.gmtime([secs])
time() 
calendar.timegm() 
time.localtime([secs])
gmtime() 
time() 
time.mktime(t)
localtime() 
time() 
time.monotonic() 
time.monotonic_ns() 
monotonic() 
time.perf_counter() 
time.perf_counter_ns() 
perf_counter() 
time.process_time() 
time.process_time_ns() 
process_time() 
time.sleep(secs)
sleep() 
time.strftime(format[, t])
gmtime() 
localtime() 
localtime() 
strftime() 
strptime() 
strptime() 
strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime())
strftime(3) 
time.strptime(string[, format])
gmtime() 
localtime() 
strftime() 
ctime() 
time.strptime("30 Nov 00", "%d %b %y")   
strftime() 
strptime() 
gmtime()
localtime() 
strptime() 
strftime() 
mktime() 
time.time() 
time.gmtime(0) 
time() 
gmtime() 
localtime() 
time.thread_time() 
time.thread_time_ns() 
thread_time() 
time.time_ns() 
time() 
time.tzset()
tzset() 
localtime() 
n (1 <= n <= 365) 
time.tzset()
time.strftime('%X %x %Z')
time.tzset()
time.strftime('%X %x %Z')
zoneinfo (tzfile(5)) 
time.tzset()
time.tzset()
clock_getres() and clock_gettime()
settimeofday() or similar
clock_settime()
local (non-DST) 
tzset() is called and may
localtime() 
strftime() 
strptime() 
timegm() 
gmtime() 
parser = argparse.ArgumentParser(description='Process some integers.')
help='sum the integers (default: find the max)'
args = parser.parse_args()
print(args.accumulate(args.integers))
parser = argparse.ArgumentParser(description='Process some integers.')
add_argument() 
parse_args() 
help='sum the integers (default: find the max)'
parse_args() 
sum() 
max() 
parse_args() 
parser.parse_args(['--sum', '7', '-1', '42'])
parse_args() 
argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars='-', fromfile_prefix_chars=None, argument_default=None, conflict_handler='error', add_help=True, allow_abbrev=True, exit_on_error=True)
parser = argparse.ArgumentParser()
parser.add_argument('--foo', help='foo help')
args = parser.parse_args()
parser = argparse.ArgumentParser(prog='myprogram')
parser.print_help()
parser = argparse.ArgumentParser(prog='myprogram')
parser.add_argument('--foo', help='foo of the %(prog)s program')
parser.print_help()
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('--foo', nargs='?', help='foo help')
parser.add_argument('bar', nargs='+', help='bar help')
parser.print_help()
parser = argparse.ArgumentParser(prog='PROG', usage='%(prog)s [options]')
parser.add_argument('--foo', nargs='?', help='foo help')
parser.add_argument('bar', nargs='+', help='bar help')
parser.print_help()
parser = argparse.ArgumentParser(description='A foo that bars')
parser.print_help()
parser.print_help()
parent_parser = argparse.ArgumentParser(add_help=False)
parent_parser.add_argument('--parent', type=int)
foo_parser = argparse.ArgumentParser(parents=[parent_parser])
foo_parser.add_argument('foo')
foo_parser.parse_args(['--parent', '2', 'XXX'])
Namespace(foo='XXX', parent=2)
bar_parser = argparse.ArgumentParser(parents=[parent_parser])
bar_parser.add_argument('--bar')
bar_parser.parse_args(['--bar', 'YYY'])
Namespace(bar='YYY', parent=None)
parser.print_help()
parser.print_help()
parser.add_argument('--foo', type=int, default=42, help='FOO!')
parser.add_argument('bar', nargs='*', default=[1, 2, 3], help='BAR!')
parser.print_help()
parser.add_argument('--foo', type=int)
parser.add_argument('bar', type=float)
parser.print_help()
parser = argparse.ArgumentParser(prog='PROG', prefix_chars='-+')
parser.add_argument('+f')
parser.add_argument('++bar')
parser.parse_args('+f X ++bar Y'.split())
Namespace(bar='Y', f='X')
with open('args.txt', 'w') as fp:
fp.write('-f\nbar')
parser = argparse.ArgumentParser(fromfile_prefix_chars='@')
parser.add_argument('-f')
parser.parse_args(['-f', 'foo', '@args.txt'])
Namespace(f='bar')
convert_arg_line_to_args() 
add_argument() 
set_defaults() 
parse_args() 
parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS)
parser.add_argument('--foo')
parser.add_argument('bar', nargs='?')
parser.parse_args(['--foo', '1', 'BAR'])
Namespace(bar='BAR', foo='1')
parser.parse_args([])
Namespace()
parse_args() 
parser = argparse.ArgumentParser(prog='PROG', allow_abbrev=False)
parser.add_argument('--foobar', action='store_true')
parser.add_argument('--foonley', action='store_false')
parser.parse_args(['--foon'])
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('-f', '--foo', help='old foo help')
parser.add_argument('--foo', help='new foo help')
string(s)
parser = argparse.ArgumentParser(prog='PROG', conflict_handler='resolve')
parser.add_argument('-f', '--foo', help='old foo help')
parser.add_argument('--foo', help='new foo help')
parser.print_help()
parser = argparse.ArgumentParser()
parser.add_argument('--foo', help='foo help')
args = parser.parse_args()
parser = argparse.ArgumentParser(prog='PROG', add_help=False)
parser.add_argument('--foo', help='foo help')
parser.print_help()
parser = argparse.ArgumentParser(prog='PROG', prefix_chars='+/')
parser.print_help()
parse_args() 
parser = argparse.ArgumentParser(exit_on_error=False)
parser.add_argument('--integers', type=int)
parser.parse_args('--integers a'.split())
print('Catching an argumentError')
add_argument() 
dest - parse_args() 
add_argument() 
add_argument() 
parser.add_argument('-f', '--foo')
parser.add_argument('bar')
parse_args() 
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('-f', '--foo')
parser.add_argument('bar')
parser.parse_args(['BAR'])
Namespace(bar='BAR', foo=None)
parser.parse_args(['BAR', '--foo', 'FOO'])
Namespace(bar='BAR', foo='FOO')
parser.parse_args(['--foo', 'FOO'])
parse_args() 
parser = argparse.ArgumentParser()
parser.add_argument('--foo')
parser.parse_args('--foo 1'.split())
Namespace(foo='1')
parser = argparse.ArgumentParser()
parser.add_argument('--foo', action='store_const', const=42)
parser.parse_args(['--foo'])
Namespace(foo=42)
parser = argparse.ArgumentParser()
parser.add_argument('--foo', action='store_true')
parser.add_argument('--bar', action='store_false')
parser.add_argument('--baz', action='store_false')
parser.parse_args('--foo --bar'.split())
Namespace(foo=True, bar=False, baz=True)
parser = argparse.ArgumentParser()
parser.add_argument('--foo', action='append')
parser.parse_args('--foo 1 --foo 2'.split())
Namespace(foo=['1', '2'])
parser = argparse.ArgumentParser()
parser.add_argument('--str', dest='types', action='append_const', const=str)
parser.add_argument('--int', dest='types', action='append_const', const=int)
parser.parse_args('--str --int'.split())
parser = argparse.ArgumentParser()
parser.add_argument('--verbose', '-v', action='count', default=0)
parser.parse_args(['-vvv'])
Namespace(verbose=3)
add_argument() 
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('--version', action='version', version='%(prog)s 2.0')
parser.parse_args(['--version'])
parser = argparse.ArgumentParser()
parser.add_argument("--foo", action="extend", nargs="+", type=str)
parser.parse_args(["--foo", "f1", "--foo", "f2", "f3", "f4"])
Namespace(foo=['f1', 'f2', 'f3', 'f4'])
parser = argparse.ArgumentParser()
parser.add_argument('--foo', action=argparse.BooleanOptionalAction)
parser.parse_args(['--no-foo'])
Namespace(foo=False)
FooAction(argparse.Action)
def __init__(self, option_strings, dest, nargs=None, **kwargs):
raise ValueError("nargs not allowed")
super(FooAction, self).__init__(option_strings, dest, **kwargs)
def __call__(self, parser, namespace, values, option_string=None):
print('%r %r %r' % (namespace, values, option_string))
setattr(namespace, self.dest, values)
parser = argparse.ArgumentParser()
parser.add_argument('--foo', action=FooAction)
parser.add_argument('bar', action=FooAction)
args = parser.parse_args('1 --foo 2'.split())
Namespace(bar=None, foo=None) 
Namespace(bar='1', foo=None) 
Namespace(bar='1', foo='2')
parser = argparse.ArgumentParser()
parser.add_argument('--foo', nargs=2)
parser.add_argument('bar', nargs=1)
parser.parse_args('c --foo a b'.split())
Namespace(bar=['c'], foo=['a', 'b'])
parser = argparse.ArgumentParser()
parser.add_argument('--foo', nargs='?', const='c', default='d')
parser.add_argument('bar', nargs='?', default='d')
parser.parse_args(['XX', '--foo', 'YY'])
Namespace(bar='XX', foo='YY')
parser.parse_args(['XX', '--foo'])
Namespace(bar='XX', foo='c')
parser.parse_args([])
Namespace(bar='d', foo='d')
parser = argparse.ArgumentParser()
type=argparse.FileType('r')
type=argparse.FileType('w')
parser.parse_args(['input.txt', 'output.txt'])
parser.parse_args([])
parser = argparse.ArgumentParser()
parser.add_argument('--foo', nargs='*')
parser.add_argument('--bar', nargs='*')
parser.add_argument('baz', nargs='*')
parser.parse_args('a b --foo x y --bar 1 2'.split())
Namespace(bar=['1', '2'], baz=['a', 'b'], foo=['x', 'y'])
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('foo', nargs='+')
parser.parse_args(['a', 'b'])
Namespace(foo=['a', 'b'])
parser.parse_args([])
add_argument() 
add_argument() 
parse_args() 
add_argument() 
add_argument() 
parser = argparse.ArgumentParser()
parser.add_argument('--foo', default=42)
parser.parse_args(['--foo', '2'])
Namespace(foo='2')
parser.parse_args([])
Namespace(foo=42)
parser = argparse.ArgumentParser()
parser.add_argument('--foo', default=42)
parser.parse_args([], namespace=argparse.Namespace(foo=101))
Namespace(foo=101)
parser = argparse.ArgumentParser()
parser.add_argument('--length', default='10', type=int)
parser.add_argument('--width', default=10.5, type=int)
parser.parse_args()
Namespace(length=10, width=10.5)
parser = argparse.ArgumentParser()
parser.add_argument('foo', nargs='?', default=42)
parser.parse_args(['a'])
Namespace(foo='a')
parser.parse_args([])
Namespace(foo=42)
parser = argparse.ArgumentParser()
parser.add_argument('--foo', default=argparse.SUPPRESS)
parser.parse_args([])
Namespace()
parser.parse_args(['--foo', '1'])
Namespace(foo='1')
add_argument() 
parser = argparse.ArgumentParser()
parser.add_argument('count', type=int)
parser.add_argument('distance', type=float)
parser.add_argument('street', type=ascii)
parser.add_argument('code_point', type=ord)
parser.add_argument('source_file', type=open)
parser.add_argument('dest_file', type=argparse.FileType('w', encoding='latin-1'))
parser.add_argument('datapath', type=pathlib.Path)
def hyphenated(string):
return '-'.join([word[:4] for word in string.casefold().split()])
parser = argparse.ArgumentParser()
_ = parser.add_argument('short_title', type=hyphenated)
parser.parse_args(['"The Tale of Two Cities"'])
Namespace(short_title='"the-tale-of-two-citi')
bool() 
add_argument() 
parser = argparse.ArgumentParser(prog='game.py')
parser.add_argument('move', choices=['rock', 'paper', 'scissors'])
parser.parse_args(['rock'])
Namespace(move='rock')
parser.parse_args(['fire'])
parser = argparse.ArgumentParser(prog='doors.py')
parser.add_argument('door', type=int, choices=range(1, 4))
print(parser.parse_args(['3']))
Namespace(door=3)
parser.parse_args(['4'])
add_argument() 
parser = argparse.ArgumentParser()
parser.add_argument('--foo', required=True)
parser.parse_args(['--foo', 'BAR'])
Namespace(foo='BAR')
parser.parse_args([])
parse_args() 
parser = argparse.ArgumentParser(prog='frobble')
parser.parse_args(['-h'])
add_argument() 
parser = argparse.ArgumentParser(prog='frobble')
help='the bar to %(prog)s (default: %(default)s)'
parser.print_help()
parser = argparse.ArgumentParser(prog='frobble')
parser.add_argument('--foo', help=argparse.SUPPRESS)
parser.print_help()
parser = argparse.ArgumentParser()
parser.add_argument('--foo')
parser.add_argument('bar')
parser.parse_args('X --foo Y'.split())
Namespace(bar='X', foo='Y')
parser.print_help()
parser = argparse.ArgumentParser()
parser.add_argument('--foo', metavar='YYY')
parser.add_argument('bar', metavar='XXX')
parser.parse_args('X --foo Y'.split())
Namespace(bar='X', foo='Y')
parser.print_help()
parse_args() 
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('-x', nargs=2)
parser.add_argument('--foo', nargs=2, metavar=('bar', 'baz'))
parser.print_help()
parse_args() 
add_argument() 
add_argument() 
parser = argparse.ArgumentParser()
parser.add_argument('bar')
parser.parse_args(['XXX'])
Namespace(bar='XXX')
parser = argparse.ArgumentParser()
parser.add_argument('-f', '--foo-bar', '--foo')
parser.add_argument('-x', '-y')
parser.parse_args('-f 1 -x 2'.split())
Namespace(foo_bar='1', x='2')
parser.parse_args('--foo 1 -y 2'.split())
Namespace(foo_bar='1', x='2')
parser = argparse.ArgumentParser()
parser.add_argument('--foo', dest='bar')
parser.parse_args('--foo XXX'.split())
Namespace(bar='XXX')
add_argument() 
argparse.Action(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)
ArgumentParser.add_argument() 
namespace - parse_args() 
setattr() 
add_argument() 
parse_args() 
ArgumentParser.parse_args(args=None, namespace=None)
add_argument() 
add_argument() 
parse_args() 
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('-x')
parser.add_argument('--foo')
parser.parse_args(['-x', 'X'])
Namespace(foo=None, x='X')
parser.parse_args(['--foo', 'FOO'])
Namespace(foo='FOO', x=None)
parser.parse_args(['--foo=FOO'])
Namespace(foo='FOO', x=None)
parser.parse_args(['-xX'])
Namespace(foo=None, x='X')
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('-x', action='store_true')
parser.add_argument('-y', action='store_true')
parser.add_argument('-z')
parser.parse_args(['-xyzZ'])
Namespace(x=True, y=True, z='Z')
parse_args() 
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('--foo', type=int)
parser.add_argument('bar', nargs='?')
parser.parse_args(['--foo', 'spam'])
parser.parse_args(['--bar'])
parser.parse_args(['spam', 'badger'])
parse_args() 
parse_args() 
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('-x')
parser.add_argument('foo', nargs='?')
parser.parse_args(['-x', '-1'])
Namespace(foo=None, x='-1')
parser.parse_args(['-x', '-1', '-5'])
Namespace(foo='-5', x='-1')
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('-1', dest='one')
parser.add_argument('foo', nargs='?')
parser.parse_args(['-1', 'X'])
Namespace(foo=None, one='X')
parser.parse_args(['-2'])
parser.parse_args(['-1', '-1'])
parse_args() 
parser.parse_args(['--', '-f'])
Namespace(foo='-f', one=None)
parse_args() 
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('-bacon')
parser.add_argument('-badger')
parser.parse_args('-bac MMM'.split())
Namespace(bacon='MMM', badger=None)
parser.parse_args('-bad WOOD'.split())
Namespace(bacon=None, badger='WOOD')
parser.parse_args('-ba BA'.split())
parse_args() 
parser = argparse.ArgumentParser()
choices=range(10)
help='sum the integers (default: find the max)'
parser.parse_args(['1', '2', '3', '4'])
parser.parse_args(['1', '2', '3', '4', '--sum'])
parse_args() 
parse_args() 
vars() 
parser = argparse.ArgumentParser()
parser.add_argument('--foo')
args = parser.parse_args(['--foo', 'BAR'])
vars(args)
c = C()
parser = argparse.ArgumentParser()
parser.add_argument('--foo')
parser.parse_args(args=['--foo', 'BAR'], namespace=c)
ArgumentParser.add_subparsers([title][, description][, prog][, parser_class][, action][, option_string][, dest][, required][, help][, metavar])
add_subparsers() 
add_subparsers() 
add_parser() 
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('--foo', action='store_true', help='foo help')
subparsers = parser.add_subparsers(help='sub-command help')
parser_a = subparsers.add_parser('a', help='a help')
parser_a.add_argument('bar', type=int, help='bar help')
parser_b = subparsers.add_parser('b', help='b help')
parser_b.add_argument('--baz', choices='XYZ', help='baz help')
parser.parse_args(['a', '12'])
Namespace(bar=12, foo=False)
parser.parse_args(['--foo', 'b', '--baz', 'Z'])
Namespace(baz='Z', foo=True)
parse_args() 
add_parser() 
parser.parse_args(['--help'])
parser.parse_args(['a', '--help'])
parser.parse_args(['b', '--help'])
add_subparsers() 
parser = argparse.ArgumentParser()
subparsers.add_parser('foo')
subparsers.add_parser('bar')
parser.parse_args(['-h'])
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers()
checkout = subparsers.add_parser('checkout', aliases=['co'])
checkout.add_argument('foo')
parser.parse_args(['co', 'bar'])
Namespace(foo='bar')
add_subparsers() 
set_defaults() 
def foo(args):
print(args.x * args.y)
def bar(args):
print('((%s))' % args.z)
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers()
parser_foo = subparsers.add_parser('foo')
parser_foo.add_argument('-x', type=int, default=1)
parser_foo.add_argument('y', type=float)
parser_foo.set_defaults(func=foo)
parser_bar = subparsers.add_parser('bar')
parser_bar.add_argument('z')
parser_bar.set_defaults(func=bar)
args = parser.parse_args('foo 1 -x 2'.split())
args.func(args)
args = parser.parse_args('bar XYZYX'.split())
args.func(args)
parse_args() 
add_subparsers() 
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(dest='subparser_name')
subparser1 = subparsers.add_parser('1')
subparser1.add_argument('-x')
subparser2 = subparsers.add_parser('2')
subparser2.add_argument('y')
parser.parse_args(['2', 'frobble'])
Namespace(subparser_name='2', y='frobble')
argparse.FileType(mode='r', bufsize=-1, encoding=None, errors=None)
ArgumentParser.add_argument() 
open() 
parser = argparse.ArgumentParser()
parser.add_argument('--raw', type=argparse.FileType('wb', 0))
parser.add_argument('out', type=argparse.FileType('w', encoding='UTF-8'))
parser.parse_args(['--raw', 'raw.dat', 'file.txt'])
parser = argparse.ArgumentParser()
parser.add_argument('infile', type=argparse.FileType('r'))
parser.parse_args(['-'])
ArgumentParser.add_argument_group(title=None, description=None)
add_argument_group() 
parser = argparse.ArgumentParser(prog='PROG', add_help=False)
group = parser.add_argument_group('group')
group.add_argument('--foo', help='foo help')
group.add_argument('bar', help='bar help')
parser.print_help()
add_argument_group() 
add_argument() 
add_argument_group() 
parser = argparse.ArgumentParser(prog='PROG', add_help=False)
group1 = parser.add_argument_group('group1', 'group1 description')
group1.add_argument('foo', help='foo help')
group2 = parser.add_argument_group('group2', 'group2 description')
group2.add_argument('--bar', help='bar help')
parser.print_help()
ArgumentParser.add_mutually_exclusive_group(required=False)
parser = argparse.ArgumentParser(prog='PROG')
group = parser.add_mutually_exclusive_group()
group.add_argument('--foo', action='store_true')
group.add_argument('--bar', action='store_false')
parser.parse_args(['--foo'])
Namespace(bar=True, foo=True)
parser.parse_args(['--bar'])
Namespace(bar=False, foo=False)
parser.parse_args(['--foo', '--bar'])
add_mutually_exclusive_group() 
parser = argparse.ArgumentParser(prog='PROG')
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('--foo', action='store_true')
group.add_argument('--bar', action='store_false')
parser.parse_args([])
add_argument_group() 
ArgumentParser.set_defaults(**kwargs)
parse_args() 
set_defaults() 
parser = argparse.ArgumentParser()
parser.add_argument('foo', type=int)
parser.set_defaults(bar=42, baz='badger')
parser.parse_args(['736'])
Namespace(bar=42, baz='badger', foo=736)
parser = argparse.ArgumentParser()
parser.add_argument('--foo', default='bar')
parser.set_defaults(foo='spam')
parser.parse_args([])
Namespace(foo='spam')
add_subparsers() 
ArgumentParser.get_default(dest)
add_argument() 
set_defaults() 
parser = argparse.ArgumentParser()
parser.add_argument('--foo', default='badger')
parser.get_default('foo')
parse_args() 
ArgumentParser.print_usage(file=None)
ArgumentParser.print_help(file=None)
ArgumentParser.format_usage()
ArgumentParser.format_help()
ArgumentParser.parse_known_args(args=None, namespace=None)
parse_known_args() 
parse_args() 
parser = argparse.ArgumentParser()
parser.add_argument('--foo', action='store_true')
parser.add_argument('bar')
parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])
Namespace(bar='BAR', foo=True)
parse_known_args() 
ArgumentParser.convert_arg_line_to_args(arg_line)
convert_arg_line_to_args() 
MyArgumentParser(argparse.ArgumentParser)
def convert_arg_line_to_args(self, arg_line):
return arg_line.split()
ArgumentParser.exit(status=0, message=None)
ErrorCatchingArgumentParser(argparse.ArgumentParser)
def exit(self, status=0, message=None):
raise Exception(f'Exiting because of an error: {message}')
exit(status)
ArgumentParser.error(message)
ArgumentParser.parse_intermixed_args(args=None, namespace=None)
ArgumentParser.parse_known_intermixed_args(args=None, namespace=None)
parse_intermixed_args() 
parse_known_intermixed_args() 
parse_known_args() 
parse_intermixed_args() 
parser = argparse.ArgumentParser()
parser.add_argument('--foo')
parser.add_argument('cmd')
parser.add_argument('rest', nargs='*', type=int)
parser.parse_known_args('doit 1 --foo bar 2 3'.split())
Namespace(cmd='doit', foo='bar', rest=[1])
parser.parse_intermixed_args('doit 1 --foo bar 2 3'.split())
Namespace(cmd='doit', foo='bar', rest=[1, 2, 3])
parse_known_intermixed_args() 
parse_intermixed_args() 
optparse.OptionParser.add_option() 
ArgumentParser.add_argument() 
parser.parse_args() 
args = parser.parse_args() 
ArgumentParser.add_argument() 
optparse.OptionParser.disable_interspersed_args() 
parse_args() 
parse_intermixed_args() 
parser.add_argument('--version', action='version', version='<the version>') 
getopt() 
getopt() 
getopt() 
getopt.getopt(args, shortopts, longopts=[])
getopt() 
getopt() 
--' は含めません。引数が必要な場合には名前の最後に等号 ('=') を入れます。オプション引数はサポートしていません。長形式のオプションだけを受けつけるためには、shortopts は空文字列である必要があります。長形式のオプションは、該当するオプションを一意に決定できる長さまで入力されていれば認識されます。たとえば、longopts が ['
getopt.gnu_getopt(args, shortopts, longopts=[])
getopt() 
getopt() 
args = '-a -b -cfoo -d bar a1 a2'.split()
optlist, args = getopt.getopt(args, 'abc:d:')
args = s.split()
def main():
opts, args = getopt.getopt(sys.argv[1:], "ho:v", ["help", "output="])
print(err)  
usage()
sys.exit(2)
elif o in ("-h", "--help"):
usage()
sys.exit()
elif o in ("-o", "--output"):
main()
parser = argparse.ArgumentParser()
parser.add_argument('-o', '--output')
parser.add_argument('-v', dest='verbose', action='store_true')
args = parser.parse_args()
logging.getLogger(name) 
getLogger() 
logging.getLogger(__name__) 
setLevel(level)
getEffectiveLevel() 
isEnabledFor() 
isEnabledFor(level)
logging.disable(level) and then
getEffectiveLevel()
getEffectiveLevel()
setLevel() 
getChild(suffix)
logging.getLogger('abc').getChild('def.ghi') 
logging.getLogger('abc.def.ghi') 
debug(msg, *args, **kwargs)
sys.exc_info() 
sys.exc_info() 
FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
logging.basicConfig(format=FORMAT)
logger = logging.getLogger('tcpserver')
logger.warning('Protocol problem: %s', 'connection reset', extra=d)
info(msg, *args, **kwargs)
debug() 
warning(msg, *args, **kwargs)
debug() 
error(msg, *args, **kwargs)
debug() 
critical(msg, *args, **kwargs)
debug() 
log(level, msg, *args, **kwargs)
debug()
exception(msg, *args, **kwargs)
debug() 
addFilter(filter)
removeFilter(filter)
filter(record)
addHandler(hdlr)
removeHandler(hdlr)
findCaller(stack_info=False, stacklevel=1)
debug() and other
handle(record)
filter() 
makeRecord(name, level, fn, lno, msg, args, exc_info, func=None, extra=None, sinfo=None)
hasHandlers()
__init__() 
Handler.__init__() 
__init__(level=NOTSET)
createLock() 
createLock()
acquire()
createLock() 
release()
acquire() 
setLevel(level)
setFormatter(fmt)
addFilter(filter)
removeFilter(filter)
filter(record)
flush()
close()
shutdown() 
close() 
handle(record)
handleError(record)
emit() 
format(record)
emit(record)
logging.Formatter(fmt=None, datefmt=None, style='%', validate=True)
formatTime() 
str.format() or string.Template. This
Formatter('%(asctime)s - %(message)s', style='{')
format(record)
formatTime() 
formatException() 
formatStack() 
formatTime(record, datefmt=None)
format() 
time.strftime() 
time.strftime() 
time.localtime() 
time.localtime() 
time.gmtime() 
formatException(exc_info)
sys.exc_info() 
traceback.print_exception() 
formatStack(stack_info)
traceback.print_stack() 
logging.Filter(name='')
filter(record)
debug()
info() 
filter() 
filter() 
makeLogRecord() 
logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info, func=None, sinfo=None)
getMessage()
str() 
getLogRecordFactory() and setLogRecordFactory() 
old_factory = logging.getLogRecordFactory()
def record_factory(*args, **kwargs):
record = old_factory(*args, **kwargs)
logging.setLogRecordFactory(record_factory)
str.format()
str.format() 
time.time() 
Formatter.format() 
logging.LoggerAdapter(logger, extra)
process(msg, kwargs)
debug()
info()
warning()
error()
exception()
critical()
log()
isEnabledFor()
getEffectiveLevel()
setLevel()
hasHandlers() 
isEnabledFor()
getEffectiveLevel()
setLevel()
hasHandlers() 
logging.getLogger(name=None)
logging.getLoggerClass()
setLoggerClass() 
MyLogger(logging.getLoggerClass())
logging.getLogRecordFactory()
setLogRecordFactory() 
setLogRecordFactory() 
logging.debug(msg, *args, **kwargs)
sys.exc_info() 
sys.exc_info() 
FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
logging.basicConfig(format=FORMAT)
logging.warning('Protocol problem: %s', 'connection reset', extra=d)
logging.info(msg, *args, **kwargs)
debug() 
logging.warning(msg, *args, **kwargs)
debug() 
logging.error(msg, *args, **kwargs)
debug() 
logging.critical(msg, *args, **kwargs)
debug() 
logging.exception(msg, *args, **kwargs)
debug() 
logging.log(level, msg, *args, **kwargs)
debug() 
basicConfig() 
basicConfig() 
logging.disable(level=CRITICAL)
logging.disable(logging.NOTSET) is called
CRITICAL (this is not recommended)
logging.addLevelName(level, levelName)
logging.getLevelName(level)
addLevelName() 
the %(levelname)
logging.makeLogRecord(attrdict)
logging.basicConfig(**kwargs)
debug()
info()
warning()
error()
critical() 
basicConfig() 
time.strftime() 
str.format()
logging.shutdown()
logging.setLoggerClass(klass)
__init__() 
__init__() 
Logger.__init__() 
logging.getLogger() 
logging.setLogRecordFactory(factory)
getLogRecordFactory() 
factory(name, level, fn, lno, msg, args, exc_info, func=None, sinfo=None, **kwargs)
traceback.print_stack() 
captureWarnings() 
logging.captureWarnings(capture)
warnings.formatwarning() 
captureWarnings(True) 
logging.config.dictConfig(config)
configure() 
dictConfig() 
configure() 
def dictConfig(config):
dictConfigClass(config).configure()
__init__() 
DictConfigurator.__init__() 
configure() 
dictConfig() 
logging.config.fileConfig(fname, defaults=None, disable_existing_loggers=True)
readline() 
read_file() 
read() 
logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)
dictConfig() 
fileConfig() 
start() 
join() 
stopListening() 
struct.pack('>L', n) 
eval() 
listen() 
listen() 
listen() 
listen() 
dictConfig() 
logging.config.stopListening()
listen() 
listen() 
join() 
dictConfig() 
fileConfig() 
name in fileConfig(). If
s %(levelname)-8
s %(name)-15
s %(message)
s %(levelname)-8
s %(name)-15
s %(message)
my.package.customFormatterFactory(bar='baz', spam=99.9, answer=42)
__import__() 
staticmethod() 
BaseConfigurator.importer = staticmethod(import_module)
staticmethod() 
fileConfig() 
fileConfig() 
dictConfig() 
fileConfig() 
dictConfig() 
dictConfig() 
eval() 
args=(sys.stdout,)
eval() 
eval()
to ()
eval()
args=('python.log', 'w')
args=('localhost', handlers.DEFAULT_TCP_LOGGING_PORT)
args=('localhost', handlers.DEFAULT_UDP_LOGGING_PORT)
args=(('localhost', handlers.SYSLOG_UDP_PORT), handlers.SysLogHandler.LOG_USER)
args=('Python Application', '', 'Application')
args=('localhost', 'from@abc', ['user1@abc', 'user2@xyz'], 'Logger Subject')
args=(10, ERROR)
args=('localhost:9022', '/log', 'GET')
format=F1 %(asctime)
s %(levelname)
s %(message)
strftime()-compatible
eval() 
listen() 
listen() 
write() 
flush() 
logging.StreamHandler(stream=None)
emit(record)
traceback.print_exception() and appended
flush()
flush() 
close() 
flush() 
setStream(stream)
logging.FileHandler(filename, mode='a', encoding=None, delay=False, errors=None)
emit(). By
close()
emit(record)
emit(record)
handle(record)
createLock()
stat() 
logging.handlers.WatchedFileHandler(filename, mode='a', encoding=None, delay=False, errors=None)
emit(). By
reopenIfNeeded()
emit(record)
reopenIfNeeded() 
logging.handlers.BaseRotatingHandler(filename, mode, encoding=None, delay=False, errors=None)
rotation_filename() 
rotation_filename() 
rotate() 
rotate() 
rotation_filename(default_name)
rotate(source, dest)
emit() 
handleError() 
logging.handlers.RotatingFileHandler(filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=False, errors=None)
emit(). By
doRollover()
emit(record)
logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1, backupCount=0, encoding=None, delay=False, utc=False, atTime=None, errors=None)
emit() 
minutes (say)
doRollover()
emit(record)
logging.handlers.SocketHandler(host, port)
close()
emit()
makeLogRecord() 
handleError()
emit() 
makeSocket()
makePickle(record)
data = pickle.dumps(record_attr_dict, 1)
datalen = struct.pack('>L', len(data))
send(packet)
makePickle() 
createSocket()
logging.handlers.DatagramHandler(host, port)
emit()
makeLogRecord() 
makeSocket()
send(s)
SocketHandler.makePickle() 
logging.handlers.SysLogHandler(address=('localhost', SYSLOG_UDP_PORT), facility=LOG_USER, socktype=socket.SOCK_DGRAM)
close()
emit(record)
encodePriority(facility, priority)
mapPriority(levelname)
logging.handlers.NTEventLogHandler(appname, dllname=None, logtype='Application')
close()
emit(record)
getEventCategory(record)
getEventType(record)
__init__() 
getMessageID(record)
logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None, timeout=1.0)
smtplib.SMTP.starttls() 
emit(record)
getSubject(record)
shouldFlush() 
flush() 
logging.handlers.BufferingHandler(capacity)
emit(record)
shouldFlush() 
flush() 
flush()
shouldFlush(record)
logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, target=None, flushOnClose=True)
setTarget() 
close()
flush() 
flush()
setTarget(target)
shouldFlush(record)
logging.handlers.HTTPHandler(host, url, method='GET', secure=False, credentials=None, context=None)
mapLogRecord(record)
emit(record)
mapLogRecord() 
setFormatter() 
format() 
mapLogRecord() 
urllib.parse.urlencode() 
logging.handlers.QueueHandler(queue)
enqueue() 
emit(record)
handleError() 
prepare(record)
enqueue(record)
put_nowait() 
logging.handlers.QueueListener(queue, *handlers, respect_handler_level=False)
dequeue() 
dequeue(block)
get() 
prepare(record)
handle(record)
prepare() 
start()
stop()
enqueue_sentinel()
put_nowait() 
getpass.getpass(prompt='Password: ', stream=None)
getpass() 
getpass.getuser()
os.getlogin() 
locale.setlocale() 
locale.setlocale(locale.LC_ALL, '')
code = locale.getpreferredencoding()
str.encode() 
curses.baudrate()
curses.beep()
curses.can_change_color()
curses.cbreak()
raw() 
cbreak() 
curses.color_content(color_number)
blue (RGB) 
curses.color_pair(pair_number)
A_* attributes. pair_number() is the
curses.curs_set(visibility)
curses.def_prog_mode()
reset_prog_mode() 
curses.def_shell_mode()
reset_shell_mode() 
curses.delay_output(ms)
curses.doupdate()
doupdate() 
noutrefresh() 
addstr() 
refresh() 
noutrefresh() 
doupdate()
noutrefresh() 
doupdate()
curses.echo()
curses.endwin()
curses.erasechar()
curses.filter()
filter() 
initscr() is called. The
curses.flash()
beep() 
curses.flushinp()
curses.getmouse()
getch() 
5-tuple (id, x, y, z, bstate). id is an
curses.getsyx()
tuple (y, x). If
return (-1, -1)
curses.getwin(file)
putwin() 
curses.has_colors()
curses.has_ic()
curses.has_il()
curses.has_key(ch)
curses.halfdelay(tenths)
nocbreak() 
curses.init_color(color_number, r, g, b)
init_color() is used
can_change_color() 
curses.init_pair(pair_number, fg, bg)
use_default_colors()
curses.initscr()
curses.is_term_resized(nlines, ncols)
resize_term() 
curses.isendwin()
endwin() 
curses.keyname(k)
combination (128--255) is a
curses.killchar()
curses.longname()
initscr()
curses.meta(flag)
curses.mouseinterval(interval)
curses.mousemask(mousemask)
tuple (availmask, oldmask). availmask
curses.napms(ms)
curses.newpad(nlines, ncols)
refresh() and noutrefresh() 
curses.newwin(nlines, ncols)
curses.newwin(nlines, ncols, begin_y, begin_x)
corner is at (begin_y, begin_x)
curses.nl()
curses.nocbreak()
curses.noecho()
curses.nonl()
addch('\n') 
curses.noqiflush()
noqiflush() 
noqiflush() in a
curses.noraw()
curses.pair_content(pair_number)
tuple (fg, bg) 
curses.pair_number(attr)
color_pair() 
curses.putp(str)
tputs(str, 1, putchar) 
putp() 
curses.qiflush([flag])
noqiflush() 
curses.raw()
curses.reset_prog_mode()
def_prog_mode() 
curses.reset_shell_mode()
def_shell_mode() 
curses.resetty()
savetty() 
curses.resize_term(nlines, ncols)
resizeterm()
resize_term() 
resize_term() 
curses.resizeterm(nlines, ncols)
curses.savetty()
resetty() 
curses.get_escdelay()
set_escdelay()
curses.set_escdelay(ms)
curses.get_tabsize()
set_tabsize()
curses.set_tabsize(size)
curses.setsyx(y, x)
curses.setupterm(term=None, fd=-1)
curses.start_color()
initscr() 
start_color() 
curses.termattrs()
curses.termname()
curses.tigetflag(capname)
curses.tigetnum(capname)
curses.tigetstr(capname)
database. E.g. tparm(tigetstr("cup"), 5, 3) 
curses.typeahead(fd)
curses.unctrl(ch)
curses.ungetch(ch)
getch() 
getch() is called
curses.update_lines_cols()
curses.unget_wch(ch)
get_wch() 
get_wch() is called
curses.ungetmouse(id, x, y, z, bstate)
curses.use_env(flag)
initscr() 
curses.use_default_colors()
init_pair(x, curses.COLOR_RED, -1) 
wrapper(). Before
wrapper() 
initscr() 
newwin() 
window.addch(ch[, attr])
window.addch(y, x, ch[, attr])
at (y, x) 
window.addnstr(str, n[, attr])
window.addnstr(y, x, str, n[, attr])
at (y, x) 
window.addstr(str[, attr])
window.addstr(y, x, str[, attr])
at (y, x) 
addstr() 
addstr() 
window.attroff(attr)
window.attron(attr)
window.attrset(attr)
window.bkgd(ch[, attr])
window.bkgdset(ch[, attr])
window.border([ls[, rs[, ts[, bs[, tl[, tr[, bl[, br]]]]]]]])
window.box([vertch, horch])
border() 
window.chgat(attr)
window.chgat(num, attr)
window.chgat(y, x, attr)
window.chgat(y, x, num, attr)
position (y, x) 
position (y, x) 
touchline() 
window.clear()
erase() 
refresh() 
window.clearok(flag)
refresh() 
window.clrtobot()
clrtoeol() 
window.clrtoeol()
window.cursyncup()
window.delch([y, x])
window.deleteln()
window.derwin(begin_y, begin_x)
window.derwin(nlines, ncols, begin_y, begin_x)
derwin() 
subwin() 
window.echochar(ch[, attr])
refresh() 
window.enclose(y, x)
window.subwin() 
locale.getpreferredencoding() 
window.erase()
window.getbegyx()
window.getbkgd()
window.getch([y, x])
window.get_wch([y, x])
window.getkey([y, x])
getch() 
window.getmaxyx()
window.getparyx()
tuple (y, x). Return (-1, -1) 
window.getstr()
window.getstr(n)
window.getstr(y, x)
window.getstr(y, x, n)
window.getyx()
window.hline(ch, n)
window.hline(y, x, ch, n)
window.idcok(flag)
window.idlok(flag)
window.immedok(flag)
refresh() 
window.inch([y, x])
window.insch(ch[, attr])
window.insch(y, x, ch[, attr])
window.insdelln(nlines)
window.insertln()
window.insnstr(str, n[, attr])
window.insnstr(y, x, str, n[, attr])
window.insstr(str[, attr])
window.insstr(y, x, str[, attr])
window.instr([n])
window.instr(y, x[, n])
instr() 
window.is_linetouched(line)
refresh() 
window.is_wintouched()
refresh() 
window.keypad(flag)
window.leaveok(flag)
window.move(new_y, new_x)
window.mvderwin(y, x)
window.mvwin(new_y, new_x)
window.nodelay(flag)
getch() 
window.notimeout(flag)
window.noutrefresh()
doupdate() 
overlay() 
overwrite() 
window.putwin(file)
getwin() 
window.redrawln(beg, num)
refresh() 
window.redrawwin()
refresh() 
window.refresh([pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol])
newpad() 
window.resize(nlines, ncols)
bkgdset() 
window.scroll([lines=1])
window.scrollok(flag)
idlok()
window.setscrreg(top, bottom)
window.standend()
window.standout()
window.subpad(begin_y, begin_x)
window.subpad(nlines, ncols, begin_y, begin_x)
window.subwin(begin_y, begin_x)
window.subwin(nlines, ncols, begin_y, begin_x)
window.syncdown()
refresh() 
window.syncok(flag)
syncup() is called
window.syncup()
window.timeout(delay)
getch() 
getch() 
window.touchline(start, count[, changed])
changed (changed=True) or unchanged (changed=False)
window.touchwin()
window.untouchwin()
refresh() 
window.vline(ch, n)
window.vline(y, x, ch, n)
getch()
napms() 
initscr() 
curses.textpad.rectangle(win, uly, ulx, lry, lrx)
curses.textpad.Textbox(win)
coordinates (0, 0). The
edit([validator])
do_command(ch)
gather()
curses.ascii.isalnum(c)
isalpha(c) or isdigit(c) 
curses.ascii.isalpha(c)
isupper(c) or islower(c) 
curses.ascii.isascii(c)
curses.ascii.isblank(c)
curses.ascii.iscntrl(c)
curses.ascii.isdigit(c)
curses.ascii.isgraph(c)
curses.ascii.islower(c)
curses.ascii.isprint(c)
curses.ascii.ispunct(c)
curses.ascii.isspace(c)
curses.ascii.isupper(c)
curses.ascii.isxdigit(c)
curses.ascii.isctrl(c)
curses.ascii.ismeta(c)
ord() 
curses.ascii.ascii(c)
curses.ascii.ctrl(c)
curses.ascii.alt(c)
curses.ascii.unctrl(c)
0 (NUL) 
0x1f (US) 
curses.panel.bottom_panel()
curses.panel.new_panel(win)
curses.panel.top_panel()
curses.panel.update_panels()
curses.doupdate() 
new_panel() 
Panel.above()
Panel.below()
Panel.bottom()
Panel.hidden()
Panel.hide()
Panel.move(y, x)
Panel.replace(win)
Panel.set_userptr(obj)
Panel.show()
Panel.top()
Panel.userptr()
Panel.window()
platform.architecture(executable=sys.executable, bits='', linkage='')
sizeof(pointer) 
sizeof(long)
platform.machine()
platform.node()
platform.platform(aliased=0, terse=0)
system_alias() 
mac_ver() 
mac_ver() 
platform.processor()
machine() 
platform.python_build()
platform.python_compiler()
platform.python_branch()
platform.python_implementation()
platform.python_revision()
platform.python_version()
platform.python_version_tuple()
platform.release()
platform.system()
platform.system_alias(system, release, version)
platform.version()
platform.uname()
namedtuple() 
os.uname() 
os.uname() 
platform.java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', ''))
platform.win32_ver(release='', version='', csd='', ptype='')
platform.win32_edition()
platform.win32_is_iot()
win32_edition() 
platform.mac_ver(release='', versioninfo=('', '', ''), machine='')
platform.libc_ver(executable=sys.executable, lib='', version='', chunksize=16384)
os.strerror() 
errno.errorcode.keys() 
sizeof(long) == sizeof(int) 
print(windll.kernel32)  
print(cdll.msvcrt)      
LoadLibrary() 
cdll.LoadLibrary("libc.so.6")  
libc = CDLL("libc.so.6")       
print(windll.kernel32.GetModuleHandleA)  
print(windll.kernel32.MyOwnFunction)     
func = _StdcallFuncPtr(name, self)
getattr() 
getattr(cdll.msvcrt, "??2@YAPAXI@Z")  
func = _StdcallFuncPtr(name, self)
time() 
GetModuleHandleA() 
print(libc.time(None))  
print(hex(windll.kernel32.GetModuleHandleA(None)))  
cdll.kernel32.GetModuleHandleA(None)  
windll.kernel32.GetModuleHandleA(32)  
bool (1)
c_int()
c_long(0)
c_wchar_p("Hello, World")
c_wchar_p(140018365411392)
c_ushort(-3)
c_ushort(65533)
i = c_int(42)
print(i)
c_long(42)
print(i.value)
print(i.value)
c_s = c_wchar_p(s)
print(c_s)
c_wchar_p(139966785747344)
print(c_s.value)
print(c_s)              
c_wchar_p(139966783348904)
print(c_s.value)
print(s)                
create_string_buffer() 
p = create_string_buffer(3)            
print(sizeof(p), repr(p.raw))
print(sizeof(p), repr(p.raw))
print(repr(p.value))
print(sizeof(p), repr(p.raw))
print(sizeof(p), repr(p.raw))
create_string_buffer() 
c_string() 
c_buffer() 
create_unicode_buffer() 
c_double(3.14)
def __init__(self, number):
bottles = Bottles(42)
from_param() 
from_param() 
ord("d")
ord("d")
ord("x")
ord("x") 
def ValidHandle(value):
raise WinError()
GetModuleHandle(None)  
GetModuleHandle("something silly")  
FormatMessage() 
GetLastError() 
byref() 
pointer() 
pointer() 
byref() 
i = c_int()
f = c_float()
print(i.value, f.value, repr(s.value))
byref(i)
byref(f)
print(i.value, f.value, repr(s.value))
class POINT(Structure
point = POINT(10, 20)
print(point.x, point.y)
point = POINT(y=5)
print(point.x, point.y)
POINT(1, 2, 3)
class RECT(Structure
rc = RECT(point)
print(rc.upperleft.x, rc.upperleft.y)
print(rc.lowerright.x, rc.lowerright.y)
r = RECT(POINT(1, 2), POINT(3, 4))
r = RECT((1, 2), (3, 4))
print(POINT.x)
print(POINT.y)
pack(n) 
class Int(Structure
print(Int.first_16)
print(Int.second_16)
class POINT(Structure
_fields_ = ("x", c_int)
class MyStruct(Structure
print(len(MyStruct().point_array))
arr = TenPointsArrayType()
print(pt.x, pt.y)
ii = TenIntegers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(ii)
print(i, end=" ")
pointer() 
i = c_int(42)
pi = pointer(i)
c_long(42)
i = c_int(99)
c_long(99)
print(i)
c_long(99)
print(i)
c_long(22)
pointer() 
POINTER() 
PI = POINTER(c_int)
PI(42)
PI(c_int(42))
null_ptr = POINTER(c_int)()
POINTER(c_int) 
POINTER(c_int) 
class Bar(Structure
_fields_ = [("count", c_int), ("values", POINTER(c_int))]
bar = Bar()
bar.values = (c_int * 3)(1, 2, 3)
for i in range(bar.count):
print(bar.values[i])
POINTER(c_int) 
byref() 
cast() 
POINTER(c_int) 
bar.values = (c_byte * 4)()
cast() 
cast() 
cast() 
a = (c_byte * 4)()
cast(a, POINTER(c_int))
cast() 
bar = Bar()
bar.values = cast((c_byte * 4)(), POINTER(c_int))
print(bar.values[0])
class cell(Structure
POINTER(cell)
class cell(Structure
POINTER(cell)
c1 = cell()
c2 = cell()
c1.next = pointer(c2)
c2.next = pointer(c1)
for i in range(8):
print(p.name, end=" ")
CFUNCTYPE() 
WINFUNCTYPE() 
qsort() 
qsort() 
ia = IntArray5(5, 1, 7, 33, 99)
qsort() 
CMPFUNC = CFUNCTYPE(c_int, POINTER(c_int), POINTER(c_int))
def py_cmp_func(a, b):
print("py_cmp_func", a[0], b[0])
cmp_func = CMPFUNC(py_cmp_func)
qsort(ia, len(ia), sizeof(c_int), cmp_func)  
def py_cmp_func(a, b):
print("py_cmp_func", a[0], b[0])
qsort(ia, len(ia), sizeof(c_int), CMPFUNC(py_cmp_func)) 
print(i, end=" ")
CFUNCTYPE(c_int, POINTER(c_int), POINTER(c_int))
def py_cmp_func(a, b):
print("py_cmp_func", a[0], b[0])
qsort(ia, len(ia), sizeof(c_int), py_cmp_func)
CFUNCTYPE() 
in_dll() 
opt_flag = c_int.in_dll(pythonapi, "Py_OptimizeFlag")
print(opt_flag)
c_long(0)
c_long(1) 
c_long(2) 
class struct_frozen(Structure
POINTER(c_ubyte)
FrozenTable = POINTER(struct_frozen)
table = FrozenTable.in_dll(pythonapi, "PyImport_FrozenModules")
print(item.name.decode("ascii"), item.size)
class POINT(Structure
_fields_ = ("x", c_int)
class RECT(Structure
_fields_ = ("a", POINT)
p1 = POINT(1, 2)
p2 = POINT(3, 4)
rc = RECT(p1, p2)
print(rc.a.x, rc.a.y, rc.b.x, rc.b.y)
print(rc.a.x, rc.a.y, rc.b.x, rc.b.y)
s = c_char_p()
resize() 
short_array = (c_short * 4)()
print(sizeof(short_array))
resize(short_array, 4)
resize(short_array, 32)
sizeof(short_array)
sizeof(type(short_array))
find_library() 
ctypes.util.find_library(name)
find_library() 
find_library("m")
find_library("c")
find_library("bz2")
find_library() 
find_library("c")
find_library("m")
find_library("bz2")
find_library("AGL")
find_library() 
find_library("c") 
find_library() 
ctypes.CDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False, winmode=0)
ctypes.OleDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False, winmode=0)
ctypes.WinDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False, winmode=0)
ctypes.PyDLL(name, mode=DEFAULT_MODE, handle=None)
dlopen(3) 
ctypes.get_errno() 
ctypes.set_errno() 
GetLastError() 
SetLastError() 
ctypes.get_last_error() 
ctypes.set_last_error() 
libc = CDLL("libc.so.6")  
LoadLibrary() 
ctypes.LibraryLoader(dlltype)
__getattr__() 
LoadLibrary(name)
from_param() 
from_param() 
callable(result, func, arguments)
ctypes.CFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)
ctypes.WINFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)
WINFUNCTYPE() 
CFUNCTYPE() 
ctypes.PYFUNCTYPE(restype, *argtypes)
prototype(address)
prototype(callable)
prototype(func_spec[, paramflags])
prototype(vtbl_index, name[, paramflags[, iid]])
prototype = WINFUNCTYPE(c_int, HWND, LPCWSTR, LPCWSTR, UINT)
paramflags = (1, "hwnd", 0)
MessageBox = prototype(("MessageBoxW", windll.user32), paramflags)
MessageBox()
MessageBox(text="Spam, spam, spam")
MessageBox(flags=2, text="foo bar")
prototype = WINFUNCTYPE(BOOL, HWND, POINTER(RECT))
paramflags = (1, "hwnd")
GetWindowRect = prototype(("GetWindowRect", windll.user32), paramflags)
def errcheck(result, func, args):
raise WinError()
def errcheck(result, func, args):
raise WinError()
ctypes.addressof(obj)
ctypes.alignment(obj_or_type)
ctypes.byref(obj[, offset])
byref(obj, offset) 
pointer(obj) 
ctypes.cast(obj, type)
ctypes.create_string_buffer(init_or_size, size=None)
ctypes.create_unicode_buffer(init_or_size, size=None)
ctypes.DllCanUnloadNow()
ctypes.DllGetClassObject()
ctypes.util.find_library(name)
ctypes.util.find_msvcrt()
ctypes.FormatError([code])
ctypes.GetLastError()
GetLastError() 
ctypes.get_errno()
ctypes.get_last_error()
ctypes.memmove(dst, src, count)
ctypes.memset(dst, c, count)
ctypes.POINTER(type)
ctypes.pointer(obj)
POINTER(type(obj)) 
byref(obj) 
ctypes.resize(obj, size)
sizeof(type(obj)) 
ctypes.set_errno(value)
ctypes.set_last_error(value)
ctypes.sizeof(obj_or_type)
ctypes.string_at(address, size=-1)
ctypes.WinError(code=None, descr=None)
FormatError() 
ctypes.wstring_at(address, size=-1)
addressof() 
from_buffer(source[, offset])
from_buffer_copy(source[, offset])
from_address(address)
from_param(obj)
in_dll(library, name)
POINTER(c_char) 
sizeof(double) 
sizeof(int) == sizeof(long) 
sizeof(int) == sizeof(long) 
ctypes.Union(*args, **kw)
ctypes.BigEndianStructure(*args, **kw)
ctypes.LittleEndianStructure(*args, **kw)
ctypes.Structure(*args, **kw)
class List(Structure
POINTER(List)
sizeof() 
class _U(Union
POINTER(TYPEDESC)
POINTER(ARRAYDESC)
class TYPEDESC(Structure
_anonymous_ = ("u",)
td = TYPEDESC()
td.lptdesc = POINTER(some_type)
td.u.lptdesc = POINTER(some_type)
ctypes.Array(*args)
len() 
POINTER() 
pointer() 
len() 
threading.active_count()
enumerate() 
threading.current_thread()
Thread.run()
sys.excepthook() is called
threading.excepthook() 
Thread.run() 
sys.excepthook() 
threading.get_ident()
threading.get_native_id()
threading.enumerate()
current_thread() 
threading.main_thread()
threading.settrace(func)
run() 
sys.settrace() 
threading.setprofile(func)
run() 
sys.setprofile() 
threading.stack_size([size])
Lock.acquire()
RLock.acquire()
Condition.wait() 
mydata = threading.local()
run() 
__init__() 
run() 
start() 
start() 
run() 
run() 
is_alive() 
join() 
join() 
run() 
threading.excepthook() is called
threading.excepthook() 
join() 
run() 
Thread.__init__()
start()
start() 
run() 
run()
run() 
join(timeout=None)
join() 
join() 
join() 
is_alive() 
join() 
join() 
join() 
join() 
getName()
setName()
get_ident() 
get_native_id() 
ID (TID) 
OS (kernel). Its
get_native_id() 
is_alive()
run() 
run() 
enumerate() 
start() 
isDaemon()
setDaemon()
acquire() 
release() 
acquire() 
acquire() 
release() 
acquire() 
release() 
acquire() 
release() 
acquire(blocking=True, timeout=-1)
release()
locked()
acquire() 
release() 
acquire() / release() 
release() 
release()
acquire() 
acquire(blocking=True, timeout=-1)
release()
acquire() 
release() 
wait() 
notify() 
notify_all() 
wait() 
notify() 
notify_all() 
notify() 
notify_all() 
wait() 
notify() 
notify_all() 
wait() 
notify() 
notify_all() 
while not an_item_is_available():
cv.wait()
get_an_available_item()
make_an_item_available()
cv.notify()
wait() 
notify() 
wait_for() 
cv.wait_for(an_item_is_available)
get_an_available_item()
notify() 
notify_all() 
threading.Condition(lock=None)
acquire(*args)
release()
wait(timeout=None)
notify() 
notify_all() 
release() 
release() 
wait_for(predicate, timeout=None)
wait() 
while not predicate():
cv.wait()
wait() 
notify(n=1)
wait() 
notify() 
notify() 
notify_all()
notify() 
acquire() 
release() 
P() 
V() 
acquire() 
release() 
acquire() 
release() 
threading.Semaphore(value=1)
release() 
acquire() 
acquire() 
acquire(blocking=True, timeout=None)
release(). Once
release(). The
release(n=1)
threading.BoundedSemaphore(value=1)
pool_sema = BoundedSemaphore(value=maxconnections)
acquire() 
release() 
conn = connectdb()
conn.close()
set() 
clear() 
wait() 
set() 
clear() 
wait() 
is_set()
set()
wait() 
clear()
set() 
wait() 
wait(timeout=None)
wait() 
set() 
start() 
cancel() 
def hello():
print("hello, world")
t = Timer(30.0, hello)
t.start()  
threading.Timer(interval, function, args=None, kwargs=None)
cancel()
wait() 
wait() 
b = Barrier(2, timeout=5)
def server():
start_server()
b.wait()
connection = accept_connection()
process_server_connection(connection)
def client():
b.wait()
connection = make_connection()
process_client_connection(connection)
threading.Barrier(parties, action=None, timeout=None)
wait() 
wait(timeout=None)
i = barrier.wait()
print("passed the barrier")
reset()
abort()
wait() 
acquire() 
release() 
acquire() 
release() 
some_lock.acquire()
some_lock.release()
def f(x):
with Pool(5) as p:
print(p.map(f, [1, 2, 3]))
start() 
def f(name):
print('hello', name)
p = Process(target=f, args=('bob',))
p.start()
p.join()
def info(title):
print(title)
print('module name:', __name__)
print('parent process:', os.getppid())
print('process id:', os.getpid())
def f(name):
info('function f')
print('hello', name)
info('main line')
p = Process(target=f, args=('bob',))
p.start()
p.join()
run() 
os.fork() 
os.fork() 
set_start_method() 
def foo(q):
q.put('hello')
mp.set_start_method('spawn')
q = mp.Queue()
p = mp.Process(target=foo, args=(q,))
p.start()
print(q.get())
p.join()
set_start_method() 
get_context() 
def foo(q):
q.put('hello')
ctx = mp.get_context('spawn')
q = ctx.Queue()
p = ctx.Process(target=foo, args=(q,))
p.start()
print(q.get())
p.join()
get_context() 
def f(q):
q.put([42, None, 'hello'])
q = Queue()
p = Process(target=f, args=(q,))
p.start()
print(q.get())    
p.join()
Pipe() 
def f(conn):
conn.send([42, None, 'hello'])
conn.close()
parent_conn, child_conn = Pipe()
p = Process(target=f, args=(child_conn,))
p.start()
print(parent_conn.recv())   
p.join()
Pipe() 
send()
recv()
def f(l, i):
l.acquire()
print('hello world', i)
l.release()
lock = Lock()
for num in range(10):
Process(target=f, args=(lock, num)).start()
def f(n, a):
for i in range(len(a)):
num = Value('d', 0.0)
arr = Array('i', range(10))
p = Process(target=f, args=(num, arr))
p.start()
p.join()
print(num.value)
print(arr[:])
Manager() 
Manager() 
def f(d, l):
l.reverse()
with Manager() as manager:
d = manager.dict()
l = manager.list(range(10))
p = Process(target=f, args=(d, l))
p.start()
p.join()
print(d)
print(l)
def f(x):
with Pool(processes=4) as pool:
print(pool.map(f, range(10)))
for i in pool.imap_unordered(f, range(10)):
print(i)
f(20)
res = pool.apply_async(f, (20,))      
print(res.get(timeout=1))             
os.getpid()
print(res.get(timeout=1))             
i in range(4)
print([res.get(timeout=1) for res in multiple_results])
res = pool.apply_async(time.sleep, (10,))
print(res.get(timeout=1))
print("We lacked patience and got a multiprocessing.TimeoutError")
print("For the moment, the pool remains available for more work")
print("Now the pool is closed and no longer available")
p = Pool(5)
def f(x):
p.map(f, [1,2,3])
run() 
Process.__init__()
run()
run() 
start()
run() 
join([timeout])
join() 
is_alive()
start() 
start() 
os.urandom() 
multiprocessing.connection.wait() 
join() 
terminate()
TerminateProcess() 
kill()
close()
close() 
start()
join()
is_alive()
terminate() 
p = multiprocessing.Process(target=time.sleep, args=(1000,))
print(p, p.is_alive())
p.start()
print(p, p.is_alive())
p.terminate()
time.sleep(0.1)
print(p, p.is_alive())
Connection.recv_bytes_into() 
Pipe() 
task_done() 
join() 
JoinableQueue.task_done() 
empty() 
get_nowait() 
Process.terminate() 
os.kill() 
multiprocessing.Pipe([duplex])
pair (conn1, conn2) 
multiprocessing.Queue([maxsize])
task_done() 
join() 
qsize()
sem_getvalue() 
empty()
full()
put(obj[, block[, timeout]])
put_nowait(obj)
put(obj, False) 
get([block[, timeout]])
get_nowait()
get(False) 
close()
join_thread()
close() 
join_thread() 
cancel_join_thread() 
cancel_join_thread()
join_thread() 
join_thread() 
allow_exit_without_flush() 
close()
get()
put() and empty() 
empty()
get()
put(item)
multiprocessing.JoinableQueue([maxsize])
task_done() 
join() 
task_done()
get() 
task_done() 
join() 
task_done() 
put() 
join()
task_done() 
join() 
multiprocessing.active_children()
multiprocessing.cpu_count()
len(os.sched_getaffinity(0)) 
os.cpu_count()
multiprocessing.current_process()
threading.current_thread() 
multiprocessing.parent_process()
current_process(). For
multiprocessing.freeze_support()
def f():
print('hello world!')
freeze_support()
Process(target=f).start()
freeze_support() 
freeze_support() 
freeze_support() 
multiprocessing.get_all_start_methods()
multiprocessing.get_context(method=None)
multiprocessing.get_start_method(allow_none=False)
multiprocessing.set_executable()
set_executable(os.path.join(sys.exec_prefix, 'pythonw.exe'))
multiprocessing.set_start_method(method)
threading.active_count()
threading.enumerate()
threading.settrace()
threading.setprofile()
send(obj)
recv() 
recv()
send() 
fileno()
close()
poll([timeout])
multiprocessing.connection.wait() 
send_bytes(buffer[, offset[, size]])
recv_bytes([maxlength])
recv_bytes_into(buffer[, offset])
Connection.send() 
Connection.recv() 
__enter__() 
__exit__() 
close() 
a, b = Pipe()
a.send([1, 'hello', None])
b.recv()
a.recv_bytes()
arr1 = array.array('i', range(5))
arr2 = array.array('i', [0] * 10)
a.send_bytes(arr1)
count = b.recv_bytes_into(arr2)
assert count == len(arr1) * arr1.itemsize
array('i', [0, 1, 2, 3, 4, 0, 0, 0, 0, 0])
Connection.recv() 
Pipe() 
recv() 
send() 
multiprocessing.Barrier(parties[, action[, timeout]])
multiprocessing.BoundedSemaphore([value])
Lock.acquire() 
sem_getvalue() 
multiprocessing.Condition([lock])
wait_for() 
acquire(block=True, timeout=None)
threading.Lock.acquire() 
threading.Lock.acquire() 
release()
threading.Lock.release() 
acquire(block=True, timeout=None)
threading.RLock.acquire() 
Lock.acquire() 
threading.RLock.acquire() 
release()
threading.RLock.release() 
multiprocessing.Semaphore([value])
Lock.acquire() 
acquire() 
BoundedSemaphore.acquire()
Lock.acquire()
RLock.acquire()
Semaphore.acquire()
Condition.acquire() 
Condition.wait() 
multiprocessing.Value(typecode_or_type, *args, lock=True)
counter.get_lock()
multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)
Array() 
multiprocessing.sharedctypes.RawValue(typecode_or_type, *args)
Value() 
RawArray() 
multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)
RawValue() 
multiprocessing.sharedctypes.copy(obj)
multiprocessing.sharedctypes.synchronized(obj[, lock])
get_obj() 
get_lock() 
c_double(2.4)
RawValue(c_double, 2.4)
RawValue('d', 2.4)
MyStruct(4, 6)
RawValue(MyStruct, 4, 6)
RawArray(c_short, 7)
RawArray('h', 7)
RawArray(c_int, (9, 2, 8))
RawArray('i', (9, 2, 8))
class Point(Structure
_fields_ = [('x', c_double), ('y', c_double)]
def modify(n, x, s, A):
s.value = s.value.upper()
lock = Lock()
n = Value('i', 7)
x = Value(c_double, 1.0/3.0, lock=False)
A = Array(Point, [(1.875,-6.25), (-5.75,2.0), (2.375,9.5)], lock=lock)
p = Process(target=modify, args=(n, x, s, A))
p.start()
p.join()
print(n.value)
print(x.value)
print(s.value)
print([(a.x, a.y) for a in A])
multiprocessing.Manager()
multiprocessing.managers.BaseManager([address[, authkey]])
start() 
get_server().serve_forever() 
current_process().authkey
start([initializer[, initargs]])
initializer(*initargs) 
get_server()
serve_forever() 
address=('', 50000)
server = manager.get_server()
server.serve_forever()
connect()
address=('127.0.0.1', 50000)
m.connect()
shutdown()
start() 
register(typeid[, callable[, proxytype[, exposed[, method_to_typeid[, create_method]]]]])
connect() 
BaseProxy._callmethod() 
__call__() 
__enter__() 
__exit__() 
shutdown() 
__enter__() 
multiprocessing.Manager() 
Barrier(parties[, action[, timeout]])
BoundedSemaphore([value])
Condition([lock])
wait_for() 
Event()
Lock()
Namespace()
Queue([maxsize])
RLock()
Semaphore([value])
Array(typecode, sequence)
Value(typecode, value)
dict()
dict(mapping)
dict(sequence)
list()
list(sequence)
manager = multiprocessing.Manager()
Global = manager.Namespace()
print(Global)
Namespace(x=10, y='hello')
register() 
def add(self, x, y):
def mul(self, x, y):
class MyManager(BaseManager
MyManager.register('Maths', MathsClass)
with MyManager() as manager:
maths = manager.Maths()
print(maths.add(4, 3))         
print(maths.mul(7, 8))         
queue = Queue()
class QueueManager(BaseManager
address=('', 50000)
s = m.get_server()
s.serve_forever()
class QueueManager(BaseManager
QueueManager.register('get_queue')
address=('foo.bar.org', 50000)
m.connect()
queue = m.get_queue()
queue.put('hello')
class QueueManager(BaseManager
QueueManager.register('get_queue')
address=('foo.bar.org', 50000)
m.connect()
queue = m.get_queue()
queue.get()
class Worker(Process
def __init__(self, q):
super(Worker, self).__init__()
def run(self):
self.q.put('local hello')
queue = Queue()
w = Worker(queue)
w.start()
class QueueManager(BaseManager
address=('', 50000)
s = m.get_server()
s.serve_forever()
manager = Manager()
l = manager.list([i*i for i in range(10)])
print(l)
print(repr(l))
str() 
repr() 
a = manager.list()
b = manager.list()
a.append(b)         
print(a, b)
b.append('hello')
print(a[0], b)
l_outer = manager.list([ manager.dict() for i in range(2) ])
print(l_outer[0])
print(l_outer[1])
lproxy = manager.list()
lproxy.append({})
manager.list([1,2,3]) == [1,2,3]
_callmethod(methodname[, args[, kwds]])
proxy._callmethod(methodname, args, kwds)
getattr(obj, methodname)(*args, **kwds)
BaseManager.register() 
_callmethod() 
_callmethod() 
_callmethod() 
l = manager.list(range(10))
l._callmethod('__len__')
l._callmethod('__getitem__', (slice(2, 7),)) 
l._callmethod('__getitem__', (20,))          
_getvalue()
__repr__()
__str__()
multiprocessing.pool.Pool([processes[, initializer[, initargs[, maxtasksperchild[, context]]]]])
os.cpu_count() 
initializer(*initargs) 
multiprocessing.Pool() 
Pool() 
close() and terminate() 
object.__del__() for more information
apply(func[, args[, kwds]])
apply_async() 
apply_async(func[, args[, kwds[, callback[, error_callback]]]])
apply() 
map(func, iterable[, chunksize])
map() 
starmap()
imap() or imap_unordered() 
map_async(func, iterable[, chunksize[, callback[, error_callback]]])
map() 
imap(func, iterable[, chunksize])
map()
map() 
imap() 
next() 
next(timeout) 
imap_unordered(func, iterable[, chunksize])
imap() 
starmap(func, iterable[, chunksize])
map() 
func(1,2)
func(3,4)
starmap_async(func, iterable[, chunksize[, callback[, error_callback]]])
starmap() 
map_async() 
close()
terminate()
terminate() 
join()
join() 
close() 
terminate() 
__enter__() 
__exit__() 
terminate() 
Pool.apply_async() 
Pool.map_async() 
get([timeout])
get() 
wait([timeout])
ready()
successful()
def f(x):
with Pool(processes=4) as pool:         
result = pool.apply_async(f, (10,)) 
f(10)
print(result.get(timeout=1))        
print(pool.map(f, range(10)))       
it = pool.imap(f, range(10))
print(next(it))                     
print(next(it))                     
print(it.next(timeout=1))           
result = pool.apply_async(time.sleep, (10,))
print(result.get(timeout=1))        
Pipe()
multiprocessing.connection.deliver_challenge(connection, authkey)
multiprocessing.connection.answer_challenge(connection, authkey)
multiprocessing.connection.Client(address[, family[, authkey]])
multiprocessing.connection.Listener([address[, family[, backlog[, authkey]]]])
tempfile.mkstemp() 
listen() 
accept()
close()
close() 
__enter__() 
__exit__() 
close() 
multiprocessing.connection.wait(object_list, timeout=None)
select.select(object_list, [], [], timeout) 
select.select() 
wait() 
WaitForMultipleObjects() 
fileno() 
address = ('localhost', 6000)     
with listener.accept() as conn:
print('connection accepted from', listener.last_accepted)
conn.send([2.25, None, 'junk', float])
conn.send_bytes(array('i', [42, 1729]))
address = ('localhost', 6000)
print(conn.recv())                  
print(conn.recv_bytes())            
arr = array('i', [0, 0, 0, 0, 0])
print(conn.recv_bytes_into(arr))    
print(arr)                          
array('i', [42, 1729, 0, 0, 0])
wait() 
def foo(w):
for i in range(10):
w.send((i, current_process().name))
w.close()
for i in range(4):
r, w = Pipe(duplex=False)
readers.append(r)
p = Process(target=foo, args=(w,))
p.start()
wait() 
w.close()
for r in wait(readers):
msg = r.recv()
readers.remove(r)
print(msg)
Client() 
Listener and Client() 
current_process().authkey
os.urandom() 
multiprocessing.get_logger()
multiprocessing.log_to_stderr()
get_logger() 
logger = multiprocessing.log_to_stderr()
logger.setLevel(logging.INFO)
logger.warning('doomed')
m = multiprocessing.Manager()
self.run()
multiprocessing.pool.ThreadPool([processes[, initializer[, initargs]]])
close() and terminate() 
os.cpu_count() is used
initializer(*initargs) 
active_children() 
def f(q):
q.put('X' * 1000000)
queue = Queue()
p = Process(target=f, args=(queue,))
p.start()
p.join()                    
obj = queue.get()
p.join() 
def f():
lock = Lock()
for i in range(10):
Process(target=f).start()
def f(l):
lock = Lock()
for i in range(10):
Process(target=f, args=(lock,)).start()
os.close(sys.stdin.fileno())
multiprocessing.Process._bootstrap() 
sys.stdin.close()
sys.stdin = open(os.open(os.devnull, os.O_RDONLY), closefd=False)
sys.stdin() 
close() 
def cache(self):
pid = os.getpid()
Process.__init__() 
def foo():
print('hello')
p = Process(target=foo)
p.start()
def foo():
print('hello')
freeze_support()
set_start_method('spawn')
p = Process(target=foo)
p.start()
freeze_support() 
foo() 
def f(self):
print('you called Foo.f()')
def g(self):
print('you called Foo.g()')
def _h(self):
print('you called Foo._h()')
def baz():
for i in range(10):
class GeneratorProxy(BaseProxy
def __iter__(self):
def __next__(self):
return self._callmethod('__next__')
def get_operator_module():
class MyManager(BaseManager
f()
g()
MyManager.register('Foo1', Foo)
g()
_h()
MyManager.register('Foo2', Foo, exposed=('g', '_h'))
MyManager.register('baz', baz, proxytype=GeneratorProxy)
get_operator_module()
MyManager.register('operator', get_operator_module)
def test():
manager = MyManager()
manager.start()
print('-' * 20)
f1 = manager.Foo1()
f1.f()
f1.g()
assert not hasattr(f1, '_h')
assert sorted(f1._exposed_) == sorted(['f', 'g'])
print('-' * 20)
f2 = manager.Foo2()
f2.g()
f2._h()
assert not hasattr(f2, 'f')
assert sorted(f2._exposed_) == sorted(['g', '_h'])
print('-' * 20)
it = manager.baz()
print('<%d>' % i, end=' ')
print()
print('-' * 20)
op = manager.operator()
print('op.add(23, 45) =', op.add(23, 45))
print('op.pow(2, 94) =', op.pow(2, 94))
print('op._exposed_ =', op._exposed_)
freeze_support()
test()
def calculate(func, args):
result = func(*args)
multiprocessing.current_process().name
def calculatestar(args):
return calculate(*args)
def mul(a, b):
time.sleep(0.5 * random.random())
def plus(a, b):
time.sleep(0.5 * random.random())
def f(x):
return 1.0 / (x - 5.0)
def pow3(x):
def noop(x):
def test():
print('Creating pool with %d processes\n' % PROCESSES)
with multiprocessing.Pool(PROCESSES) as pool:
TASKS = [(mul, (i, 7)) for i in range(10)] 
i in range(10)
results = [pool.apply_async(calculate, t) for t in TASKS]
imap_it = pool.imap(calculatestar, TASKS)
imap_unordered_it = pool.imap_unordered(calculatestar, TASKS)
print('Ordered results using pool.apply_async():')
print('\t', r.get())
print()
print('Ordered results using pool.imap():')
print('\t', x)
print()
print('Unordered results using pool.imap_unordered():')
print('\t', x)
print()
print('Ordered results using pool.map() --- will block till complete:')
for x in pool.map(calculatestar, TASKS):
print('\t', x)
print()
print('Testing error handling:')
print(pool.apply(f, (5,)))
print('\tGot ZeroDivisionError as expected from pool.apply()')
raise AssertionError('expected ZeroDivisionError')
print(pool.map(f, list(range(10))))
print('\tGot ZeroDivisionError as expected from pool.map()')
raise AssertionError('expected ZeroDivisionError')
print(list(pool.imap(f, list(range(10)))))
print('\tGot ZeroDivisionError as expected from list(pool.imap())')
raise AssertionError('expected ZeroDivisionError')
it = pool.imap(f, list(range(10)))
for i in range(10):
x = next(it)
raise AssertionError('expected ZeroDivisionError')
print('\tGot ZeroDivisionError as expected from IMapIterator.next()')
print()
print('Testing ApplyResult.get() with timeout:', end=' ')
res = pool.apply_async(calculate, TASKS[0])
sys.stdout.flush()
sys.stdout.write('\n\t%s' % res.get(0.02))
sys.stdout.write('.')
print()
print()
print('Testing IMapIterator.next() with timeout:', end=' ')
it = pool.imap(calculatestar, TASKS)
sys.stdout.flush()
sys.stdout.write('\n\t%s' % it.next(0.02))
sys.stdout.write('.')
print()
print()
multiprocessing.freeze_support()
test()
def worker(input, output):
for func, args in iter(input.get, 'STOP'):
result = calculate(func, args)
output.put(result)
def calculate(func, args):
result = func(*args)
current_process().name
def mul(a, b):
time.sleep(0.5*random.random())
def plus(a, b):
time.sleep(0.5*random.random())
def test():
TASKS1 = [(mul, (i, 7)) for i in range(20)]
TASKS2 = [(plus, (i, 8)) for i in range(10)]
task_queue = Queue()
done_queue = Queue()
task_queue.put(task)
for i in range(NUMBER_OF_PROCESSES):
Process(target=worker, args=(task_queue, done_queue)).start()
print('Unordered results:')
for i in range(len(TASKS1)):
print('\t', done_queue.get())
put()
task_queue.put(task)
for i in range(len(TASKS2)):
print('\t', done_queue.get())
for i in range(NUMBER_OF_PROCESSES):
task_queue.put('STOP')
freeze_support()
test()
multiprocessing.shared_memory.SharedMemory(name=None, create=False, size=0)
close() 
unlink() 
block is created (True) or an
block is attached (False)
close()
close() 
close() 
unlink()
unlink() 
unlink() 
unlink() and close() in either
shm_a = shared_memory.SharedMemory(create=True, size=10)
type(shm_a.buf)
len(buffer)
buffer[:4] = bytearray([22, 33, 44, 55])  
shm_b = shared_memory.SharedMemory(shm_a.name)
array.array('b', shm_b.buf[:5])  
array('b', [22, 33, 44, 55, 100])
bytes(shm_a.buf[:5])      
shm_b.close()   
shm_a.close()
shm_a.unlink()  
a = np.array([1, 1, 2, 3, 5, 8])  
shm = shared_memory.SharedMemory(create=True, size=a.nbytes)
b = np.ndarray(a.shape, dtype=a.dtype, buffer=shm.buf)
array([1, 1, 2, 3, 5, 8])
type(b)
type(a)
existing_shm = shared_memory.SharedMemory(name='psm_21467_46075')
a.shape is (6,) and a.dtype is np.int64 in this
c = np.ndarray((6,), dtype=np.int64, buffer=existing_shm.buf)
array([1, 1, 2, 3, 5, 8])
array([  1,   1,   2,   3,   5, 888])
array([  1,   1,   2,   3,   5, 888])
existing_shm.close()
shm.close()
shm.unlink()  
multiprocessing.managers.SharedMemoryManager([address[, authkey]])
start() 
shutdown() 
SharedMemory.unlink() 
object (ShareableList) 
SharedMemory(size)
ShareableList(sequence)
smm = SharedMemoryManager()
smm.start()  
sl = smm.ShareableList(range(4))
ShareableList([0, 1, 2, 3], name='psm_6572_7512')
raw_shm = smm.SharedMemory(size=128)
another_sl = smm.ShareableList('alpha')
ShareableList(['a', 'l', 'p', 'h', 'a'], name='psm_6572_12221')
smm.shutdown()  
unlink() 
with SharedMemoryManager() as smm:
sl = smm.ShareableList(range(2000))
p1 = Process(target=do_work, args=(sl, 0, 1000))
p2 = Process(target=do_work, args=(sl, 1000, 2000))
p1.start()
p2.start()  
p1.join()
p2.join()   
total_result = sum(sl)  
count(value)
index(value)
type(entry) for entry in a
len(a)
a.index(42)
a.shm.close()
a.shm.unlink()
unlink() is unsupported
b = shared_memory.ShareableList(range(5))         
c = shared_memory.ShareableList(name=b.shm.name)  
ShareableList([0, 1, 2, 3, 4], name='...')
b.shm.close()
c.shm.close()
c.shm.unlink()
fn(*args **kwargs) 
with ThreadPoolExecutor(max_workers=1) as executor:
future = executor.submit(pow, 323, 1235)
print(future.result())
map(func, *iterables, timeout=None, chunksize=1)
map(func, *iterables) 
__next__() is called and the
Executor.map(). timeout
tasks. The (approximate) 
Executor.submit() 
Executor.map() 
Executor.shutdown() 
with ThreadPoolExecutor(max_workers=4) as e:
e.submit(shutil.copy, 'src1.txt', 'dest1.txt')
e.submit(shutil.copy, 'src2.txt', 'dest2.txt')
e.submit(shutil.copy, 'src3.txt', 'dest3.txt')
e.submit(shutil.copy, 'src4.txt', 'dest4.txt')
def wait_on_b():
time.sleep(5)
print(b.result())  
def wait_on_a():
time.sleep(5)
print(a.result())  
executor = ThreadPoolExecutor(max_workers=2)
a = executor.submit(wait_on_b)
b = executor.submit(wait_on_a)
def wait_on_future():
f = executor.submit(pow, 5, 2)
print(f.result())
executor = ThreadPoolExecutor(max_workers=1)
executor.submit(wait_on_future)
min(32, os.cpu_count() + 4). This
def load_url(url, timeout):
with urllib.request.urlopen(url, timeout=timeout) as conn:
return conn.read()
with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
executor.submit(load_url, url, 60)
for future in concurrent.futures.as_completed(future_to_url):
data = future.result()
print('%r generated an exception: %s' % (url, exc))
print('%r page is %d bytes' % (url, len(data)))
def is_prime(n):
sqrt_n = int(math.floor(math.sqrt(n)))
for i in range(3, sqrt_n + 1, 2):
def main():
with concurrent.futures.ProcessPoolExecutor() as executor:
for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):
print('%d is prime: %s' % (number, prime))
main()
Executor.submit() 
Executor.submit() 
cancel()
cancelled()
running()
done()
result(timeout=None)
exception(timeout=None)
add_done_callback(fn)
set_running_or_notify_cancel()
Future.cancel() 
as_completed() 
wait() 
Future.running() 
Future.set_result() 
Future.set_exception() 
set_result(result)
set_exception(exception)
concurrent.futures.wait(fs, timeout=None, return_when=ALL_COMPLETED)
concurrent.futures.as_completed(fs, timeout=None)
as_completed() is called
__next__() is called and the
as_completed(). timeout
run() 
run() 
Popen.communicate() 
Popen.communicate() and thus
subprocess.run(["ls", "-l"])  
CompletedProcess(args=['ls', '-l'], returncode=0)
subprocess.run("exit 1", shell=True, check=True)
subprocess.run(["ls", "-l", "/dev/null"], capture_output=True)
run() 
run() 
run() 
check_returncode()
Popen.communicate() 
run() 
check_output() 
run() 
check_call() 
check_output() 
run() 
check_output() 
run() 
Popen.communicate() 
os.walk()
os.path.expandvars()
os.path.expanduser()
locale.getpreferredencoding() 
locale.getpreferredencoding(False) 
os.execvp() 
CreateProcess() 
Popen(["/usr/bin/git", "commit", "-m", "Fixes a bug."])
cases. shlex.split() 
command_line = input()
args = shlex.split(command_line)
print(args)
p = subprocess.Popen(args) 
CreateProcess() 
open() 
os.setsid() 
setsid() 
setregid() 
grp.getgrnam() and the
setgroups() 
grp.getgrnam() and the
setreuid() 
pwd.getpwnam() and the
umask() 
with Popen(["ifconfig"], stdout=PIPE) as proc:
log.write(proc.stdout.read())
os.posix_spawn() in some
os.posix_spawn() 
check_call() 
check_output() 
call() 
Popen.communicate() 
shlex.quote() 
Popen.poll()
Popen.wait(timeout=None)
Popen.communicate() 
Popen.communicate(input=None, timeout=None)
communicate() 
tuple (stdout_data, stderr_data). The
outs, errs = proc.communicate(timeout=15)
proc.kill()
outs, errs = proc.communicate()
Popen.send_signal(signal)
terminate() 
Popen.terminate()
TerminateProcess() is called
Popen.kill()
kill() is an
terminate()
open(). If
open(). Reading
open(). Reading
communicate() 
poll() 
wait() 
communicate()
si = subprocess.STARTUPINFO()
os.set_handle_inheritable() 
ERROR_INVALID_PARAMETER (87)
os.system(). This
os.kill() 
idle (lowest) 
run() 
run() 
run() 
run() - most
run() 
run()
run() 
check_output() 
output = check_output(["mycmd", "myarg"])
p1 = Popen(["dmesg"], stdout=PIPE)
p2 = Popen(["grep", "hda"], stdin=p1.stdout, stdout=PIPE)
p1.stdout.close()  
output = p2.communicate()[0]
p1.stdout.close() 
output=check_output("dmesg | grep hda", shell=True)
os.system() 
sts = os.system("mycmd" + " myarg")
sts = call("mycmd" + " myarg", shell=True)
retcode = call("mycmd" + " myarg", shell=True)
print("Child was terminated by signal", -retcode, file=sys.stderr)
print("Child returned", retcode, file=sys.stderr)
print("Execution failed:", e, file=sys.stderr)
pid = os.spawnlp(os.P_NOWAIT, "/bin/mycmd", "mycmd", "myarg")
pid = Popen(["/bin/mycmd", "myarg"]).pid
retcode = os.spawnlp(os.P_WAIT, "/bin/mycmd", "mycmd", "myarg")
retcode = call(["/bin/mycmd", "myarg"])
os.spawnvp(os.P_NOWAIT, path, args)
Popen([path] + args[1:])
os.spawnlpe(os.P_NOWAIT, "/bin/mycmd", "mycmd", "myarg", env)
Popen(["/bin/mycmd", "myarg"], env={"PATH": "/usr/bin"})
os.popen()
os.popen2()
os.popen3() 
os.popen2(cmd, mode, bufsize)
os.popen3(cmd, mode, bufsize)
os.popen4(cmd, mode, bufsize)
pipe = os.popen(cmd, 'w')
rc = pipe.close()
print("There were some errors")
process = Popen(cmd, stdin=PIPE)
process.stdin.close()
if process.wait() != 0:
print("There were some errors")
popen2.popen2("somestring", bufsize, mode)
popen2.popen2(["mycmd", "myarg"], bufsize, mode)
subprocess.getstatusoutput(cmd)
Return (exitcode, output) 
Popen.check_output() and return
2-tuple (exitcode, output). The
subprocess.getstatusoutput('ls /bin/ls')
subprocess.getstatusoutput('cat /bin/junk')
subprocess.getstatusoutput('/bin/junk')
subprocess.getstatusoutput('/bin/kill $$')
returns (exitcode, output) 
of (status, output) 
subprocess.getoutput(cmd)
getstatusoutput()
subprocess.getoutput('ls /bin/ls')
sched.scheduler(timefunc=time.monotonic, delayfunc=time.sleep)
s = sched.scheduler(time.time, time.sleep)
def print_time(a='default'):
print("From print_time", time.time(), a)
def print_some_times():
print(time.time())
s.enter(10, 1, print_time)
s.enter(5, 2, print_time, argument=('positional',))
s.enter(5, 1, print_time, kwargs={'a': 'keyword'})
s.run()
print(time.time())
print_some_times()
action(*argument, **kwargs) 
cancel() 
enterabs() 
scheduler.cancel(event)
scheduler.empty()
scheduler.run(blocking=True)
run() 
queue.Queue(maxsize=0)
queue.LifoQueue(maxsize=0)
queue.PriorityQueue(maxsize=0)
sorted(list(entries))[0] 
dataclass(order=True)
item: Any=field(compare=False)
get() 
get_nowait()
put() 
put_nowait()
Queue.qsize()
qsize() > 0
get() 
qsize() < maxsize
put() 
Queue.empty()
empty() 
put() 
empty() 
get() 
Queue.full()
full() 
get() 
full() 
put() 
Queue.put(item, block=True, timeout=None)
Queue.put_nowait(item)
put(item, False) 
Queue.get(block=True, timeout=None)
Queue.get_nowait()
get(False) 
Queue.task_done()
get() 
task_done() 
join() 
put() 
task_done() 
Queue.join()
task_done() 
join() 
q = queue.Queue()
def worker():
item = q.get()
print(f'Working on {item}')
print(f'Finished {item}')
q.task_done()
threading.Thread(target=worker, daemon=True).start()
for item in range(30):
q.put(item)
print('All task requests sent\n', end='')
q.join()
print('All work completed')
SimpleQueue.qsize()
qsize() > 0
get() 
SimpleQueue.empty()
empty() 
get() 
SimpleQueue.put(item, block=True, timeout=None)
Queue.put()
put() or get() 
put() 
SimpleQueue.put_nowait(item)
put(item) 
SimpleQueue.get(block=True, timeout=None)
SimpleQueue.get_nowait()
get(False) 
append() and popleft() 
copy_context() 
threading.local() 
var: ContextVar[int] = ContextVar('var', default=42)
ContextVar.get() 
get([default])
set(value)
ContextVar.reset() 
reset(token)
ContextVar.set() 
var = ContextVar('var')
token = var.set('new value')
var.get() 
var.reset(token)
var.get() 
ContextVar.set() 
ContextVar.reset() 
ContextVar.set() 
contextvars.copy_context()
ctx: Context = copy_context()
print(list(ctx.items()))
O(1) 
Context() 
copy_context() 
run(callable, *args, **kwargs)
callable(*args, **kwargs) 
var = ContextVar('var')
var.set('spam')
def main():
copy_context()
ctx.run(main)
var.get() == ctx[var] == 'spam'
var.set('ham')
var.get() == ctx[var] == 'ham'
ctx = copy_context()
ctx.run(main)
main()
var.get() == 'spam'
copy()
get(var[, default])
iter(context)
len(proxy)
keys()
values()
items()
client_addr_var = contextvars.ContextVar('client_addr')
def render_goodbye():
client_addr = client_addr_var.get()
return f'Good bye, client @ {client_addr}\n'.encode()
def handle_request(reader, writer):
addr = writer.transport.get_extra_info('socket').getpeername()
client_addr_var.set(addr)
client_addr_var.get()
reader.readline()
print(line)
if not line.strip():
writer.write(line)
writer.write(render_goodbye())
writer.close()
def main():
srv.serve_forever()
asyncio.run(main())
_thread.start_new_thread(function, args[, kwargs])
sys.unraisablehook() is called
sys.unraisablehook() is now
_thread.interrupt_main()
_thread.exit()
_thread.allocate_lock()
_thread.get_ident()
_thread.get_native_id()
_thread.stack_size([size])
Lock.acquire() 
lock.acquire(waitflag=1, timeout=-1)
lock.release()
lock.locked()
a_lock = _thread.allocate_lock()
print("a_lock is locked while this executes")
sys.exit() 
_thread.exit() 
acquire() 
sha256() 
update() 
digest() 
hexdigest() 
update() 
sha1()
sha224()
sha256()
sha384()
sha512()
blake2b()
blake2s(). md5() is normally
sha3_224()
sha3_256()
sha3_384()
sha3_512()
shake_128()
shake_256() 
SHA3 (Keccak) 
sha3_224()
sha3_256()
sha3_384()
sha3_512()
shake_128()
shake_256()
blake2b() 
blake2s() 
m = hashlib.sha256()
m.digest()
hexdigest()
new() 
new() 
h = hashlib.new('ripemd160')
h.hexdigest()
new() 
new() 
hash.update(data)
m.update(a)
m.update(b) 
m.update(a + b) 
hash.digest()
update() 
hash.hexdigest()
digest() 
hash.copy()
shake_128() and shake_256() 
shake.digest(length)
update() 
shake.hexdigest(length)
digest() 
sha1(password) 
hashlib.pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None)
os.urandom() 
dk.hex()
os.urandom() 
len(key)
len(salt)
len(person)
function (blake2b() or blake2s())
update() 
digest() 
hexdigest() 
h = blake2b()
h.hexdigest()
hexdigest()
hash.update() 
h = blake2b()
h.update(item)
h.hexdigest()
h = blake2b(digest_size=20)
h.hexdigest()
len(h.digest())
blake2b(digest_size=10).hexdigest()
blake2b(digest_size=11).hexdigest()
blake2s(digest_size=10).hexdigest()
blake2s(digest_size=11).hexdigest()
code (HMAC). BLAKE2
a (hex-encoded) 
h.hexdigest()
def sign(cookie):
h = blake2b(digest_size=AUTH_SIZE, key=SECRET_KEY)
h.update(cookie)
return h.hexdigest().encode('utf-8')
def verify(cookie, sig):
good_sig = sign(cookie)
return compare_digest(good_sig, sig)
sig = sign(cookie)
print("{0},{1}".format(cookie.decode('utf-8'), sig))
verify(cookie, sig)
m.hexdigest()
salt1 = os.urandom(blake2b.SALT_SIZE)
h1 = blake2b(salt=salt1)
h1.update(msg)
salt2 = os.urandom(blake2b.SALT_SIZE)
h2 = blake2b(salt=salt2)
h2.update(msg)
h1.digest() != h2.digest()
h = blake2b(digest_size=32, person=FILES_HASH_PERSON)
h.hexdigest()
h = blake2b(digest_size=32, person=BLOCK_HASH_PERSON)
h.hexdigest()
digest()
digest()
print(b64encode(enc_key).decode('utf-8'))
print(b64encode(mac_key).decode('utf-8'))
buf = bytearray(6000)
h10.update(h00.digest())
h10.update(h01.digest())
h10.hexdigest()
author(s) 
hmac.new(key, msg=None, digestmod='')
update(msg) is made. digestmod is the
hashlib.new(). Despite
hmac.digest(key, msg, digest)
HMAC(key, msg, digest).digest() 
new() 
HMAC.update(msg)
m.update(a)
m.update(b) 
m.update(a + b) 
HMAC.digest()
update() 
digest() 
compare_digest() 
HMAC.hexdigest()
digest() 
hexdigest() 
compare_digest() 
HMAC.copy()
hmac.compare_digest(a, b)
HMAC.hexdigest() 
CRYPTO_memcmp() 
secrets.choice(sequence)
secrets.randbelow(n)
secrets.randbits(k)
secrets.token_bytes([nbytes=None])
token_bytes(16)  
secrets.token_hex([nbytes=None])
token_hex(16)  
secrets.token_urlsafe([nbytes=None])
token_urlsafe(16)  
secrets.compare_digest(a, b)
hmac.compare_digest() 
word = ''.join(secrets.choice(alphabet) for i in range(8))
word = ''.join(secrets.choice(alphabet) for i in range(10))
any(c.islower() for c in password)
any(c.isupper() for c in password)
sum(c.isdigit() for c in password) >= 3
with open('/usr/share/dict/words') as f:
words = [word.strip() for word in f]
word = ' '.join(secrets.choice(words) for i in range(4))
url = 'https://mydomain.com/reset=' + secrets.token_urlsafe()
dumps() 
loads() 
dump() 
dumps() 
Pickler(file, protocol).dump(obj)
Unpickler(file).load()
write() 
dump(obj)
persistent_id(obj)
persistent_id() 
Unpickler.persistent_load() 
persistent_id() 
copyreg.pickle() 
__reduce__() 
reducer_override(self, obj)
__reduce__() 
pickletools.optimize() 
read() 
readinto() 
readline() 
dump() or dumps() 
load()
persistent_load(pid)
persistent_load() 
find_class(module, name)
find_class() 
pickle.PickleBuffer(buffer)
raw()
release()
__getstate__() 
sys.setrecursionlimit() 
picklestring = pickle.dumps(Foo)
__setstate__() 
__init__() 
def save(obj):
return (obj.__class__, obj.__dict__)
def load(cls, attributes):
obj = cls.__new__(cls)
obj.__dict__.update(attributes)
object.__getnewargs_ex__()
__getnewargs_ex__() 
__new__() 
pair (args, kwargs) 
__new__() 
__new__() 
__getnewargs__() 
__getnewargs_ex__() is now
object.__getnewargs__()
__getnewargs_ex__()
__new__() 
__getnewargs__() 
__getnewargs_ex__() is defined
__getnewargs__() 
__getnewargs_ex__() in protocols
object.__getstate__()
__getstate__() 
__getstate__() 
object.__setstate__(state)
__setstate__() 
__getstate__() 
__setstate__() 
__getstate__() 
__setstate__() 
__getattr__()
__getattribute__()
__setattr__() 
__new__() 
__init__() is not called
__reduce__() 
__reduce__() 
__getnewargs_ex__()
__getstate__() 
__setstate__()
__reduce__() 
object.__reduce__()
__reduce__() 
__setstate__() 
obj.append(item) 
obj.extend(list_of_items) 
append() 
extend() 
append() 
extend() 
__setitem__() 
a (obj, state) 
__setstate__() 
__setstate__()
object.__reduce_ex__(protocol)
__reduce_ex__() 
__reduce__() 
__reduce__() 
persistent_id() and persistent_load() 
persistent_id() 
persistent_load() 
MemoRecord = namedtuple("MemoRecord", "key, task")
DBPickler(pickle.Pickler)
def persistent_id(self, obj):
if isinstance(obj, MemoRecord):
return ("MemoRecord", obj.key)
DBUnpickler(pickle.Unpickler)
def __init__(self, file, connection):
super().__init__(file)
def persistent_load(self, pid):
cursor = self.connection.cursor()
cursor.execute("SELECT * FROM memos WHERE key=?", (str(key_id),))
key, task = cursor.fetchone()
return MemoRecord(key, task)
raise pickle.UnpicklingError("unsupported persistent object")
def main():
conn = sqlite3.connect(":memory:")
cursor = conn.cursor()
cursor.execute("CREATE TABLE memos(key INTEGER PRIMARY KEY, task TEXT)")
cursor.execute("INSERT INTO memos VALUES(NULL, ?)", (task,))
cursor.execute("SELECT * FROM memos")
memos = [MemoRecord(key, task) for key, task in cursor]
file = io.BytesIO()
DBPickler(file).dump(memos)
print("Pickled records:")
pprint.pprint(memos)
cursor.execute("UPDATE memos SET task='learn italian' WHERE key=1")
file.seek(0)
memos = DBUnpickler(file, conn).load()
print("Unpickled records:")
pprint.pprint(memos)
main()
f = io.BytesIO()
p = pickle.Pickler(f)
p.dispatch_table = copyreg.dispatch_table.copy()
MyPickler(pickle.Pickler)
dispatch_table = copyreg.dispatch_table.copy()
f = io.BytesIO()
p = MyPickler(f)
copyreg.pickle(SomeClass, reduce_SomeClass)
f = io.BytesIO()
p = pickle.Pickler(f)
readline() 
__setstate__() 
__getstate__() 
def __init__(self, filename):
self.file = open(filename)
def readline(self):
line = self.file.readline()
if line.endswith('\n'):
return "%i: %s" % (self.lineno, line)
def __getstate__(self):
dict.copy()
state = self.__dict__.copy()
def __setstate__(self, state):
self.__dict__.update(state)
file = open(self.filename)
for _ in range(self.lineno):
file.readline()
reader = TextReader("hello.txt")
reader.readline()
reader.readline()
new_reader = pickle.loads(pickle.dumps(reader))
new_reader.readline()
reducer_override() 
__reduce__()
dispatch_table and reducer_override() 
reducer_override() 
reducer_override() 
MyPickler(pickle.Pickler)
def reducer_override(self, obj):
if getattr(obj, "__name__", None) == "MyClass":
f = io.BytesIO()
p = MyPickler(f)
p.dump(MyClass)
unpickled_class = pickle.loads(f.getvalue())
assert isinstance(unpickled_class, type)
__reduce_ex__() 
dump() or dumps() 
load() or loads() 
class ZeroCopyByteArray(bytearray
def __reduce_ex__(self, protocol):
return type(self)._reconstruct, (PickleBuffer(self),), None
return type(self)._reconstruct, (bytearray(self),)
def _reconstruct(cls, obj):
with memoryview(obj) as m:
if type(obj) is cls:
return cls(obj)
data = pickle.dumps(b, protocol=5)
new_b = pickle.loads(data)
print(b == new_b)  
print(b is new_b)  
data = pickle.dumps(b, protocol=5, buffer_callback=buffers.append)
new_b = pickle.loads(data, buffers=buffers)
print(b == new_b)  
print(b is new_b)  
os.system() 
Unpickler.find_class() 
Unpickler.find_class() 
RestrictedUnpickler(pickle.Unpickler)
def find_class(self, module, name):
return getattr(builtins, name)
def restricted_loads(s):
pickle.loads()
return RestrictedUnpickler(io.BytesIO(s)).load()
restricted_loads(pickle.dumps([1, 2, range(15)]))
range(0, 15)
getattr(__import__("os"), "system")
dump() 
load() 
with open('data.pickle', 'wb') as f:
pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)
with open('data.pickle', 'rb') as f:
data = pickle.load(f)
copyreg.constructor(object)
copyreg.pickle(type, function, constructor=None)
def __init__(self, a):
def pickle_c(c):
print("pickling a C instance...")
return C, (c.a,)
copyreg.pickle(C, pickle_c)
c = C(1)
d = copy.copy(c)  
p = pickle.dumps(c)  
shelve.open(filename, flag='c', protocol=None, writeback=False)
dbm.open() 
sync() 
close() 
close() 
shelve.open() 
with shelve.open('spam') as db:
Shelf.sync()
close() 
Shelf.close()
shelve.Shelf(dict, protocol=None, writeback=False, keyencoding='utf-8')
shelve.BsdDbShelf(dict, protocol=None, writeback=False, keyencoding='utf-8')
first()
next()
previous()
last()
set_location() 
bsddb.hashopen()
bsddb.btopen() 
bsddb.rnopen() 
shelve.DbfilenameShelf(filename, flag='c', protocol=None, writeback=False)
dbm.open() 
open() 
d = shelve.open(filename)  
klist = list(d.keys())     
d['xx'].append(3)          
temp.append(5)             
or, d=shelve.open(filename,writeback=True) 
d['xx'].append(5) and have
d.close() 
d.close()                  
marshal.dump(value, file[, version])
load() 
marshal.load(file)
dump() 
load() 
marshal.dumps(value[, version])
dump(value, file). The
marshal.loads(bytes)
dbm.whichdb(filename)
whichdb() 
open() 
keys() 
get() 
setdefault() 
get() 
setdefault() 
open() 
with dbm.open('cache', 'c') as db:
print() 
items() 
values() 
dbm.gnu.open(filename[, flag[, mode]])
gdbm.firstkey()
nextkey() 
gdbm.nextkey(key)
k = db.firstkey()
print(k)
k = db.nextkey(k)
gdbm.reorganize()
gdbm.sync()
gdbm.close()
items() 
values() 
dbm.ndbm.open(filename[, flag[, mode]])
ndbm.close()
dbm.dumb.open(filename[, flag[, mode]])
open() 
dumbdbm.sync()
Shelve.sync() 
dumbdbm.close()
con = sqlite3.connect('example.db')
execute() 
cur = con.cursor()
cur.execute("INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)")
Save (commit) 
con.commit()
con.close()
con = sqlite3.connect('example.db')
cur = con.cursor()
execute() 
cur.execute("SELECT * FROM stocks WHERE symbol = '%s'" % symbol)
t = ('RHAT',)
cur.execute('SELECT * FROM stocks WHERE symbol=?', t)
print(cur.fetchone())
cur.executemany('INSERT INTO stocks VALUES (?,?,?,?,?)', purchases)
fetchone() 
fetchall() 
for row in cur.execute('SELECT * FROM stocks ORDER BY price'):
print(row)
connect() 
number(10)
connect() 
register_converter() 
max(data)
connect() 
db = sqlite3.connect('file:path/to/database?mode=ro', uri=True)
sqlite3.register_converter(typename, callable)
connect() 
sqlite3.register_adapter(type, callable)
sqlite3.complete_statement(sql)
con = sqlite3.connect(":memory:")
cur = con.cursor()
print("Enter your SQL commands to execute in sqlite3.")
print("Enter a blank line to exit.")
line = input()
if sqlite3.complete_statement(buffer):
buffer = buffer.strip()
cur.execute(buffer)
if buffer.lstrip().upper().startswith("SELECT"):
print(cur.fetchall())
print("An error occurred:", e.args[0])
con.close()
sqlite3.enable_callback_tracebacks(flag)
cursor(factory=Cursor)
commit()
commit() 
rollback()
commit() 
close()
commit() 
commit() 
execute(sql[, parameters])
cursor() 
execute() 
executemany(sql[, parameters])
cursor() 
executemany() 
executescript(sql_script)
cursor() 
executescript() 
def md5sum(t):
return hashlib.md5(t).hexdigest()
con = sqlite3.connect(":memory:")
con.create_function("md5", 1, md5sum)
cur = con.cursor()
print(cur.fetchone()[0])
con.close()
create_aggregate(name, num_params, aggregate_class)
def __init__(self):
def step(self, value):
def finalize(self):
con = sqlite3.connect(":memory:")
con.create_aggregate("mysum", 1, MySum)
cur = con.cursor()
cur.execute("create table test(i)")
cur.execute("insert into test(i) values (1)")
cur.execute("insert into test(i) values (2)")
cur.execute("select mysum(i) from test")
print(cur.fetchone()[0])
con.close()
create_collation(name, callable)
def collate_reverse(string1, string2):
con = sqlite3.connect(":memory:")
con.create_collation("reverse", collate_reverse)
cur = con.cursor()
cur.execute("create table test(x)")
cur.executemany("insert into test(x) values (?)", [("a",), ("b",)])
cur.execute("select x from test order by x collate reverse")
print(row)
con.close()
con.create_collation("reverse", None)
interrupt()
set_authorizer(authorizer_callback)
set_progress_handler(handler, n)
set_trace_callback(trace_callback)
Cursor.execute() 
enable_load_extension(enabled)
con = sqlite3.connect(":memory:")
con.enable_load_extension(True)
con.execute("select load_extension('./fts3.so')")
con.load_extension("./fts3.so")
con.enable_load_extension(False)
con.execute("create virtual table recipe using fts3(name, ingredients)")
recipe (name, ingredients) 
values ('broccoli stew', 'broccoli peppers cheese tomatoes')
recipe (name, ingredients) 
values ('pumpkin stew', 'pumpkin onions garlic celery')
recipe (name, ingredients) 
values ('broccoli pie', 'broccoli cheese onions flour')
recipe (name, ingredients) 
values ('pumpkin pie', 'pumpkin sugar flour butter')
for row in con.execute("select rowid, name, ingredients from recipe where name match 'pie'"):
print(row)
con.close()
load_extension(path)
enable_load_extension() 
def dict_factory(cursor, row):
for idx, col in enumerate(cursor.description):
con = sqlite3.connect(":memory:")
cur = con.cursor()
cur.execute("select 1 as a")
print(cur.fetchone()["a"])
con.close()
con = sqlite3.connect(":memory:")
cur = con.cursor()
cur.execute("select ?", (AUSTRIA,))
row = cur.fetchone()
cur.execute("select ?", (AUSTRIA,))
row = cur.fetchone()
assert type(row[0]) is bytes
assert row[0] == AUSTRIA.encode("utf-8")
con.text_factory = lambda x: x.decode("utf-8") + "foo"
cur.execute("select ?", ("bar",))
row = cur.fetchone()
con.close()
iterdump()
con = sqlite3.connect('existing_db.db')
with open('dump.sql', 'w') as f:
for line in con.iterdump():
f.write('%s\n' % line)
con.close()
def progress(status, remaining, total):
print(f'Copied {total-remaining} of {total} pages...')
con = sqlite3.connect('existing_db.db')
bck = sqlite3.connect('backup.db')
con.backup(bck, pages=1, progress=progress)
bck.close()
con.close()
source = sqlite3.connect('existing_db.db')
dest = sqlite3.connect(':memory:')
source.backup(dest)
execute(sql[, parameters])
con = sqlite3.connect(":memory:")
cur = con.cursor()
cur.execute("create table people (name_last, age)")
cur.execute("insert into people values (?, ?)", (who, age))
cur.execute("select * from people where name_last=:who and age=:age", {"who": who, "age": age})
print(cur.fetchone())
con.close()
execute() 
executescript() 
executemany(sql, seq_of_parameters)
def __init__(self):
self.count = ord('a')
def __iter__(self):
def __next__(self):
if self.count > ord('z'):
return (chr(self.count - 1),) 
con = sqlite3.connect(":memory:")
cur = con.cursor()
cur.execute("create table characters(c)")
theIter = IterChars()
cur.executemany("insert into characters(c) values (?)", theIter)
cur.execute("select c from characters")
print(cur.fetchall())
con.close()
def char_generator():
yield (c,)
con = sqlite3.connect(":memory:")
cur = con.cursor()
cur.execute("create table characters(c)")
cur.executemany("insert into characters(c) values (?)", char_generator())
cur.execute("select c from characters")
print(cur.fetchall())
con.close()
executescript(sql_script)
con = sqlite3.connect(":memory:")
cur = con.cursor()
book(title, author, published)
con.close()
fetchone()
fetchmany(size=cursor.arraysize)
fetchmany() 
fetchall()
close()
executemany() 
executeXX() 
execute() 
executemany() is called
fetchmany(). The
con.cursor() 
con = sqlite3.connect(":memory:")
cur = con.cursor()
repr()
len() 
keys()
con = sqlite3.connect(":memory:")
cur = con.cursor()
values ('2006-01-05','BUY','RHAT',100,35.14)
con.commit()
cur.close()
cur = con.cursor()
cur.execute('select * from stocks')
r = cur.fetchone()
type(r)
tuple(r)
len(r)
r.keys()
print(member)
rollback() 
def __init__(self, x, y):
__conform__(self, protocol) 
def __init__(self, x, y):
def __conform__(self, protocol):
return "%f;%f" % (self.x, self.y)
con = sqlite3.connect(":memory:")
cur = con.cursor()
p = Point(4.0, -3.2)
cur.execute("select ?", (p,))
print(cur.fetchone()[0])
con.close()
register_adapter() 
def __init__(self, x, y):
def adapt_point(point):
return "%f;%f" % (point.x, point.y)
sqlite3.register_adapter(Point, adapt_point)
con = sqlite3.connect(":memory:")
cur = con.cursor()
p = Point(4.0, -3.2)
cur.execute("select ?", (p,))
print(cur.fetchone()[0])
con.close()
def adapt_datetime(ts):
return time.mktime(ts.timetuple())
sqlite3.register_adapter(datetime.datetime, adapt_datetime)
con = sqlite3.connect(":memory:")
cur = con.cursor()
now = datetime.datetime.now()
cur.execute("select ?", (now,))
print(cur.fetchone()[0])
con.close()
def convert_point(s):
return Point(x, y)
def __init__(self, x, y):
def __repr__(self):
return "(%f;%f)" % (self.x, self.y)
def adapt_point(point):
return ("%f;%f" % (point.x, point.y)).encode('ascii')
def convert_point(s):
return Point(x, y)
sqlite3.register_adapter(Point, adapt_point)
sqlite3.register_converter("point", convert_point)
p = Point(4.0, -3.2)
con = sqlite3.connect(":memory:", detect_types=sqlite3.PARSE_DECLTYPES)
cur = con.cursor()
cur.execute("create table test(p point)")
cur.execute("insert into test(p) values (?)", (p,))
cur.execute("select p from test")
print("with declared types:", cur.fetchone()[0])
cur.close()
con.close()
con = sqlite3.connect(":memory:", detect_types=sqlite3.PARSE_COLNAMES)
cur = con.cursor()
cur.execute("create table test(p)")
cur.execute("insert into test(p) values (?)", (p,))
cur.execute('select p as "p [point]" from test')
print("with column names:", cur.fetchone()[0])
cur.close()
con.close()
con = sqlite3.connect(":memory:", detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES)
cur = con.cursor()
cur.execute("create table test(d date, ts timestamp)")
today = datetime.date.today()
now = datetime.datetime.now()
cur.execute("insert into test(d, ts) values (?, ?)", (today, now))
cur.execute("select d, ts from test")
row = cur.fetchone()
print(today, "=>", row[0], type(row[0]))
print(now, "=>", row[1], type(row[1]))
cur.execute('select current_date as "d [date]", current_timestamp as "ts [timestamp]"')
row = cur.fetchone()
print("current_date", row[0], type(row[0]))
print("current_timestamp", row[1], type(row[1]))
con.close()
Language (DML) 
statement (i.e. INSERT/UPDATE/DELETE/REPLACE)
connect() 
execute()
executemany()
executescript() 
con = sqlite3.connect(":memory:")
con.execute("create table person(firstname, lastname)")
con.executemany("insert into person(firstname, lastname) values (?, ?)", persons)
for row in con.execute("select firstname, lastname from person"):
print(row)
print("I just deleted", con.execute("delete from person").rowcount, "rows")
con.close()
con = sqlite3.connect(":memory:")
cur = con.cursor()
cur.execute("select 'John' as name, 42 as age")
con.close()
con = sqlite3.connect(":memory:")
con.execute("create table person (id integer primary key, firstname varchar unique)")
con.commit() is called
con.execute("insert into person(firstname) values (?)", ("Joe",))
con.rollback() is called
con.execute("insert into person(firstname) values (?)", ("Joe",))
print("couldn't add Joe twice")
con.close()
format() 
format() 
vformat() 
vformat(format_string, args, kwargs)
vformat() 
parse(format_string)
vformat() 
get_field(field_name, args, kwargs)
parse() 
vformat() 
get_value() 
get_value(key, args, kwargs)
vformat() 
get_value() 
getattr() 
get_value() 
check_unused_args(used_args, args, kwargs)
check_unused_args() 
format_field(value, format_spec)
format_field() 
format() 
convert_field(value, conversion)
get_field() 
parse() 
str.format() 
getattr() 
__getitem__() 
str.format() 
format(a, b) 
format(a, b) 
__format__() 
__format__() 
str() 
repr() 
ascii() 
str() 
repr() 
ascii() 
format() 
str() 
str.format() 
format() 
float() 
str() 
str.format() 
format('a', 'b', 'c')
format('a', 'b', 'c')  
format('a', 'b', 'c')
format(*'abc')      
format('abra', 'cad')   
format(latitude='37.24N', longitude='-115.81W')
format(**coord)
format(c)
def __init__(self, x, y):
def __str__(self):
return 'Point({self.x}, {self.y})'.format(self=self)
str(Point(4, 2))
Point(4, 2)
coord = (3, 5)
format(coord)
repr() 
str() 
format('test1', 'test2')
repr() 
str() 
format('left aligned')
format('right aligned')
format('centered')
format('centered')  
format(3.14, -3.14)  
format(3.14, -3.14)  
format(3.14, -3.14)  
format(42)
format(42)
format(1234567890)
format(points/total)
d = datetime.datetime(2010, 7, 4, 12, 15, 58)
format(d)
for align, text in zip('<^>', ['left', 'center', 'right']):
format(text, fill=align, align=align)
format(*octets)
int(_, 16)
for num in range(5,12): 
print('{0:{width}{base}}'.format(num, base=base, width=width), end=' ')
print()
string.Template(template)
substitute() 
substitute() 
safe_substitute() 
s = Template('$who likes $what')
s.substitute(who='tim', what='kung pao')
d = dict(who='tim')
Template('Give $who $100').substitute(d)
Template('$who likes $what').substitute(d)
Template('$who likes $what').safe_substitute(d)
re.escape() 
string.capwords(s, sep=None)
str.split() 
str.capitalize() 
str.join() 
a> b <c>' に対してマッチされると、 '<a>' だけでなく文字列全体にマッチしてしまいます。修飾子の後に ? を追加すると、 非貪欲 (non-greedy) あるいは 最小 (minimal) のマッチが行われ、できるだけ 少ない 文字にマッチします。正規表現 <.*?> を使うと '<a
re.compile() 
m.group('quote')
m.end('quote') 
re.sub() 
match() 
search() 
m = re.search('(?<=abc)def', 'abcdef')
m.group(0)
m.group(0)
Unicode (str) 
Unicode (str) 
Unicode (str) 
re.compile(pattern, flags=0)
match() 
search() 
prog = re.compile(pattern)
result = prog.match(string)
result = re.match(pattern, string)
re.compile() 
re.compile() 
Unicode (str) 
re.search(pattern, string, flags=0)
re.match(pattern, string, flags=0)
re.match() 
search() 
search() 
vs. match() 
re.fullmatch(pattern, string, flags=0)
re.split(pattern, string, maxsplit=0, flags=0)
re.split('[a-f]+', '0a3B9', flags=re.IGNORECASE)
re.findall(pattern, string, flags=0)
re.finditer(pattern, string, flags=0)
re.sub(pattern, repl, string, count=0, flags=0)
1(void)
def myfunc():
npy_myfunc(void)
def dashrepl(matchobj):
if matchobj.group(0) == '-': 
re.sub('-{1,2}', dashrepl, 'pro----gram-files')
sub('x*', '-', 'abxd') 
re.subn(pattern, repl, string, count=0, flags=0)
sub() 
re.escape(pattern)
print(re.escape('http://www.python.org'))
print('[%s]+' % re.escape(legal_chars))
print('|'.join(map(re.escape, sorted(operators, reverse=True))))
sub() 
subn() 
re.purge()
re.error(msg, pattern=None, pos=None)
Pattern.search(string[, pos[, endpos]])
rx.search(string, 0, 50) 
rx.search(string[:50], 0) 
pattern = re.compile("d")
pattern.search("dog")     
span=(0, 1)
pattern.search("dog", 1)  
Pattern.match(string[, pos[, endpos]])
search() 
pattern = re.compile("o")
pattern.match("dog")      
pattern.match("dog", 1)   
span=(1, 2)
search() 
search() 
vs. match() 
Pattern.fullmatch(string[, pos[, endpos]])
search() 
pattern = re.compile("o[gh]")
pattern.fullmatch("dog")      
pattern.fullmatch("ogre")     
pattern.fullmatch("doggie", 1, 3)   
span=(1, 3)
Pattern.split(string, maxsplit=0)
split() 
Pattern.findall(string[, pos[, endpos]])
findall() 
search() 
Pattern.finditer(string[, pos[, endpos]])
finditer() 
search() 
Pattern.sub(repl, string, count=0)
sub() 
Pattern.subn(repl, string, count=0)
subn() 
compile() 
copy.copy() 
copy.deepcopy() 
match() 
search() 
match = re.search(pattern, string)
process(match)
Match.expand(template)
sub() 
m.group(0)       
m.group(1)       
m.group(2)       
m.group(1, 2)    
m.group('first_name')
m.group('last_name')
m.group(1)
m.group(2)
m.group(1)                        
Match.__getitem__(g)
m.group(g) 
Match.groups(default=None)
m.groups()
m.groups()      
m.groups('0')   
Match.groupdict(default=None)
m.groupdict()
Match.start([group])
Match.end([group])
m.group(g) 
m.string[m.start(g):m.end(g)]
m.start(group) 
m.end(group) 
m = re.search('b(c?)', 'cba') 
m.start(0) 
m.end(0) 
m.start(1) 
m.end(1) 
m.start(2) 
m = re.search("remove_this", email)
email[:m.start()] + email[m.end():]
Match.span([group])
m.start(group)
m.end(group)
search() 
match() 
search() 
match() 
match() 
search() 
match() 
search() 
copy.copy() 
copy.deepcopy() 
def displaymatch(match):
return '<Match: %r, groups=%r>' % (match.group(), match.groups())
displaymatch(valid.match("akt5q"))  
displaymatch(valid.match("akt5e"))  
displaymatch(valid.match("akt"))    
displaymatch(valid.match("727ak"))  
displaymatch(pair.match("717ak"))     
groups=('7',)
displaymatch(pair.match("718ak"))     
displaymatch(pair.match("354aa"))     
groups=('a',)
group() 
pair.match("717ak").group(1)
re.match() 
group() 
pair.match("718ak").group(1)
group(1)
pair.match("354aa").group(1)
scanf() 
scanf() 
scanf() 
scanf() 
scanf() 
scanf() 
search() 
vs. match()
re.match() 
re.search() 
re.match("c", "abcdef")    
re.search("c", "abcdef")   
span=(2, 3)
search() 
re.match("c", "abcdef")    
re.search("^c", "abcdef")  
re.search("^a", "abcdef")  
span=(0, 1)
match() 
search() 
re.match('X', 'A\nB\nX', re.MULTILINE)  
re.search('^X', 'A\nB\nX', re.MULTILINE)  
span=(4, 5)
split() 
entries = re.split("\n+", text)
split() 
re.split(":? ", entry, 3) for entry in entries
re.split(":? ", entry, 4) for entry in entries
sub() 
sub() 
def repl(m):
inner_word = list(m.group(2))
random.shuffle(inner_word)
return m.group(1) + "".join(inner_word) + m.group(3)
search() 
findall() 
findall() 
finditer() 
finditer() 
print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))
span=(0, 4)
re.match("\\W(.)\\1\\W", " ff ")
span=(0, 4)
span=(0, 1)
span=(0, 1)
class Token(NamedTuple
def tokenize(code):
tok_regex = '|'.join('(?P<%s>%s)' % pair for pair in token_specification)
for mo in re.finditer(tok_regex, code):
value = mo.group()
column = mo.start() - line_start
value = float(value) if '.' in value else int(value)
line_start = mo.end()
yield Token(kind, value, line_num, column)
for token in tokenize(statements):
print(token)
Token(type='IF', value='IF', line=2, column=4)
Token(type='ID', value='quantity', line=2, column=7)
Token(type='THEN', value='THEN', line=2, column=16)
Token(type='ID', value='total', line=3, column=8)
Token(type='ASSIGN', value=':=', line=3, column=14)
Token(type='ID', value='total', line=3, column=17)
Token(type='OP', value='+', line=3, column=23)
Token(type='ID', value='price', line=3, column=25)
Token(type='OP', value='*', line=3, column=31)
Token(type='ID', value='quantity', line=3, column=33)
Token(type='END', value=';', line=3, column=41)
Token(type='ID', value='tax', line=4, column=8)
Token(type='ASSIGN', value=':=', line=4, column=12)
Token(type='ID', value='price', line=4, column=15)
Token(type='OP', value='*', line=4, column=21)
Token(type='NUMBER', value=0.05, line=4, column=23)
Token(type='END', value=';', line=4, column=27)
Token(type='ENDIF', value='ENDIF', line=5, column=4)
Token(type='END', value=';', line=5, column=9)
__init__(tabsize=8, wrapcolumn=None, linejunk=None, charjunk=IS_CHARACTER_JUNK)
ndiff() 
ndiff() 
make_table(fromlines, tolines, fromdesc='', todesc='', context=False, numlines=5)
make_file() 
difflib.context_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n')
io.IOBase.readlines() 
io.IOBase.writelines() 
sys.stdout.writelines(context_diff(s1, s2, fromfile='before.py', tofile='after.py'))
difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)
get_close_matches('appel', ['ape', 'apple', 'peach', 'puppy'])
get_close_matches('wheel', keyword.kwlist)
get_close_matches('pineapple', keyword.kwlist)
get_close_matches('accept', keyword.kwlist)
difflib.ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)
IS_LINE_JUNK() 
IS_CHARACTER_JUNK() 
splitlines(keepends=True)
splitlines(keepends=True)
print(''.join(diff), end="")
difflib.restore(sequence, which)
Differ.compare() 
ndiff() 
splitlines(keepends=True)
splitlines(keepends=True)
diff = list(diff) 
print(''.join(restore(diff, 1)), end="")
print(''.join(restore(diff, 2)), end="")
difflib.unified_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n')
io.IOBase.readlines() 
io.IOBase.writelines() 
sys.stdout.writelines(unified_diff(s1, s2, fromfile='before.py', tofile='after.py'))
unified_diff() 
context_diff() 
dfunc(a, b, fromfile, tofile, fromfiledate, tofiledate, n, lineterm) 
difflib.IS_LINE_JUNK(line)
ndiff() 
difflib.IS_CHARACTER_JUNK(ch)
ndiff() 
difflib.SequenceMatcher(isjunk=None, a='', b='', autojunk=True)
set_seqs() 
set_seq2() 
set_seqs(a, b)
set_seq2() 
set_seq1() 
set_seq1(a)
set_seq2(b)
find_longest_match(alo=0, ahi=None, blo=0, bhi=None)
find_longest_match() 
s = SequenceMatcher(None, " abcd", "abcd abcd")
s.find_longest_match(0, 5, 0, 9)
Match(a=0, b=4, size=5)
s = SequenceMatcher(lambda x: x==" ", " abcd", "abcd abcd")
s.find_longest_match(0, 5, 0, 9)
Match(a=1, b=0, size=4)
Match(a, b, size) 
get_matching_blocks()
len(a)
len(b)
s = SequenceMatcher(None, "abxcd", "abcd")
s.get_matching_blocks()
Match(a=0, b=0, size=2)
Match(a=3, b=2, size=2)
Match(a=5, b=4, size=0)
get_opcodes()
s = SequenceMatcher(None, a, b)
for tag, i1, i2, j1, j2 in s.get_opcodes():
get_grouped_opcodes(n=3)
get_opcodes() 
get_opcodes() 
ratio()
get_matching_blocks() 
get_opcodes() 
quick_ratio() 
real_quick_ratio() 
ratio() 
SequenceMatcher(None, 'tide', 'diet').ratio()
SequenceMatcher(None, 'diet', 'tide').ratio()
quick_ratio()
ratio() 
real_quick_ratio()
ratio() 
quick_ratio() 
real_quick_ratio() 
ratio() 
s = SequenceMatcher(None, "abcd", "bcde")
s.ratio()
s.quick_ratio()
s.real_quick_ratio()
ratio() 
ratio() 
print(round(s.ratio(), 3))
get_matching_blocks() 
for block in s.get_matching_blocks():
print("a[%d] and b[%d] match for %d elements" % block)
get_matching_blocks() 
len(a)
len(b)
get_opcodes() 
for opcode in s.get_opcodes():
print("%6s a[%d:%d] b[%d:%d]" % opcode)
get_close_matches() 
difflib.Differ(linejunk=None, charjunk=None)
find_longest_match() 
compare(a, b)
readlines() 
writelines() 
readlines() 
splitlines(keepends=True)
len(text1)
splitlines(keepends=True)
d = Differ()
Differ() 
result = list(d.compare(text1, text2))
pprint(result)
sys.stdout.writelines(result)
def file_mtime(path):
os.stat(path).st_mtime
return t.astimezone().isoformat()
def main():
parser = argparse.ArgumentParser()
help='Produce a context format diff (default)'
help='Set number of context lines (default 3)'
parser.add_argument('fromfile')
parser.add_argument('tofile')
options = parser.parse_args()
fromdate = file_mtime(fromfile)
todate = file_mtime(tofile)
with open(fromfile) as ff:
fromlines = ff.readlines()
with open(tofile) as tf:
tolines = tf.readlines()
diff = difflib.unified_diff(fromlines, tolines, fromfile, tofile, fromdate, todate, n=n)
diff = difflib.ndiff(fromlines, tolines)
diff = difflib.HtmlDiff().make_file(fromlines,tolines,fromfile,tofile,context=options.c,numlines=n)
diff = difflib.context_diff(fromlines, tolines, fromfile, tofile, fromdate, todate, n=n)
sys.stdout.writelines(diff)
main()
textwrap.wrap(text, width=70, **kwargs)
wrap() 
TextWrapper.wrap() 
textwrap.fill(text, width=70, **kwargs)
fill() 
fill() 
wrap() 
textwrap.shorten(text, width, **kwargs)
textwrap.shorten("Hello  world!", width=12)
textwrap.shorten("Hello  world!", width=11)
textwrap.shorten("Hello world", width=10, placeholder="...")
fill() 
textwrap.dedent(text)
def test():
print(repr(s))          
print(repr(dedent(s)))  
textwrap.indent(text, prefix, predicate=None)
text.splitlines(True) 
indent(s, '  ')
print(indent(s, '+ ', lambda line: True))
wrap()
fill()
shorten() 
wrap() 
fill() 
textwrap.TextWrapper(**kwargs)
wrapper = TextWrapper(initial_indent="* ")
wrapper = TextWrapper()
expandtabs() 
wrap() 
str.splitlines() 
wrap(text)
fill(text)
Database (UCD) 
unicodedata.lookup(name)
unicodedata.name(chr[, default])
unicodedata.decimal(chr[, default])
unicodedata.digit(chr[, default])
unicodedata.numeric(chr[, default])
unicodedata.category(chr)
unicodedata.bidirectional(chr)
unicodedata.combining(chr)
unicodedata.east_asian_width(chr)
unicodedata.mirrored(chr)
unicodedata.decomposition(chr)
unicodedata.normalize(form, unistr)
D (NFD) 
C (NFC) 
KD (NFKD) 
KC (NFKC) 
unicodedata.is_normalized(form, unistr)
unicodedata.lookup('LEFT CURLY BRACKET')
unicodedata.name('/')
unicodedata.decimal('9')
unicodedata.decimal('a')
unicodedata.category('A')  
unicodedata.bidirectional('\u0660') 
stringprep.in_table_a1(code)
stringprep.in_table_b1(code)
stringprep.map_table_b2(code)
stringprep.map_table_b3(code)
stringprep.in_table_c11(code)
stringprep.in_table_c12(code)
stringprep.in_table_c11_c12(code)
stringprep.in_table_c21(code)
stringprep.in_table_c22(code)
stringprep.in_table_c21_c22(code)
stringprep.in_table_c3(code)
stringprep.in_table_c4(code)
stringprep.in_table_c5(code)
stringprep.in_table_c6(code)
stringprep.in_table_c7(code)
stringprep.in_table_c8(code)
stringprep.in_table_c9(code)
stringprep.in_table_d1(code)
stringprep.in_table_d2(code)
input() 
readline.parse_and_bind(string)
rl_parse_and_bind() 
readline.read_init_file([filename])
rl_read_init_file() 
readline.get_line_buffer()
readline.insert_text(string)
rl_insert_text() 
readline.redisplay()
rl_redisplay() 
readline.read_history_file([filename])
read_history() 
readline.write_history_file([filename])
write_history() 
readline.append_history_file(nelements[, filename])
append_history() 
readline.get_history_length()
readline.set_history_length(length)
write_history_file() 
history_truncate_file() in the
readline.clear_history()
clear_history() 
readline.get_current_history_length()
get_history_length() 
readline.get_history_item(index)
history_get() 
readline.remove_history_item(pos)
remove_history() 
readline.replace_history_item(pos, line)
replace_history_entry() 
readline.add_history(line)
add_history() 
readline.set_auto_history(enabled)
add_history() 
readline.set_startup_hook([function])
readline.set_pre_input_hook([function])
readline.set_completer([function])
function(text, state) 
rl_completion_matches() in the
readline.get_completer()
readline.get_completion_type()
readline.get_begidx()
readline.get_endidx()
readline.set_completer_delims(string)
readline.get_completer_delims()
readline.set_completion_display_matches_hook([function])
function(substitution, [matches], longest_match_length) 
histfile = os.path.join(os.path.expanduser("~"), ".python_history")
readline.read_history_file(histfile)
len is -1 (infinite)
readline.set_history_length(1000)
atexit.register(readline.write_history_file, histfile)
histfile = os.path.join(os.path.expanduser("~"), ".python_history")
readline.read_history_file(histfile)
h_len = readline.get_current_history_length()
open(histfile, 'wb').close()
def save(prev_h_len, histfile):
new_h_len = readline.get_current_history_length()
readline.set_history_length(1000)
readline.append_history_file(new_h_len - prev_h_len, histfile)
atexit.register(save, h_len, histfile)
HistoryConsole(code.InteractiveConsole)
histfile=os.path.expanduser("~/.console-history")
code.InteractiveConsole.__init__(self, locals, filename)
self.init_history(histfile)
def init_history(self, histfile):
readline.parse_and_bind("tab: complete")
if hasattr(readline, "read_history_file"):
readline.read_history_file(histfile)
atexit.register(self.save_history, histfile)
def save_history(self, histfile):
readline.set_history_length(1000)
readline.write_history_file(histfile)
complete() 
readline.parse_and_bind("tab: complete")
Completer.complete(text, state)
__getattr__() 
dir() 
quit() 
-' (標準入力を意味します) を指定すると、 sys.argv[0] は '-' になります。 -c command を使うと、 sys.argv[0] は '-c
print("Be careful not to fall off!")
round(_, 2)
print('"Isn\'t," they said.')
print()
print(s)  
print()
0 (included) 
2 (excluded)
2 (included) 
5 (excluded)
2 (excluded)
4 (included) 
second-last (included) 
len() 
len(s)
str.format() 
append() 
cubes.append(216)  
cubes.append(7 ** 3)  
len() 
len(letters)
print(a)
print() 
print() 
print('The value of i is', i)
print(a, end=',')
x = int(input("Please enter an integer: "))
print('Negative changed to zero')
print('Zero')
print('Single')
print('More')
print(w, len(w))
for user, status in users.copy().items():
for user, status in users.items():
4.3. range() 
range() 
for i in range(5):
print(i)
range(10) 
range(5, 10)
range(0, 10, 3)
range(-10, -100, -30)
range() 
len() 
for i in range(len(a)):
print(i, a[i])
enumerate() 
print(range(10))
range(0, 10)
range() 
sum() 
sum(range(4))  
list(range(4))
list() 
for n in range(2, 10):
for x in range(2, n):
print(n, 'equals', x, '*', n//x)
print(n, 'is a prime number')
for num in range(2, 10):
print("Found an even number", num)
print("Found an odd number", num)
Busy-wait for keyboard interrupt (Ctrl+C)
def initlog(*args):
def fib(n):    
print(a, end=' ')
print()
fib(2000)
parameters (arguments) 
f(100)
print() 
fib(0)
print(fib(0))
def fib2(n):  
result.append(a)    
f100 = fib2(100)    
result.append(a) 
append() 
append() 
def ask_ok(prompt, retries=4, reminder='Please try again!'):
ok = input(prompt)
if ok in ('y', 'ye', 'yes'):
if ok in ('n', 'no', 'nop', 'nope'):
raise ValueError('invalid user response')
print(reminder)
ask_ok('Do you really want to quit?')
ask_ok('OK to overwrite the file?', 2)
ask_ok('OK to overwrite the file?', 2, 'Come on, only yes or no!')
def f(arg=i):
print(arg)
f()
def f(a, L=[]):
L.append(a)
print(f(1))
print(f(2))
print(f(3))
def f(a, L=None):
L.append(a)
def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
print("-- This parrot wouldn't", action, end=' ')
print("if you put", voltage, "volts through it.")
print("-- Lovely plumage, the", type)
print("-- It's", state, "!")
parrot(1000)                                          
parrot(voltage=1000)                                  
parrot(voltage=1000000, action='VOOOOOM')             
parrot(action='VOOOOOM', voltage=1000000)             
parrot('a million', 'bereft of life', 'jump')         
parrot('a thousand', state='pushing up the daisies')  
parrot()                     
parrot(voltage=5.0, 'dead')  
parrot(110, voltage=220)     
parrot(actor='John Cleese')  
parrot(voltage=1000) 
def function(a):
function(0, a=0)
def cheeseshop(kind, *arguments, **keywords):
print("-- Do you have any", kind, "?")
print("-- I'm sorry, we're all out of", kind)
print(arg)
print("-" * 40)
print(kw, ":", keywords[kw])
def standard_arg(arg):
print(arg)
print(arg)
def kwd_only_arg(*, arg):
print(arg)
print(pos_only, standard, kwd_only)
standard_arg(2)
standard_arg(arg=2)
pos_only_arg(1)
pos_only_arg(arg=1)
kwd_only_arg(3)
kwd_only_arg(arg=3)
combined_example(1, 2, 3)
combined_example(1, 2, kwd_only=3)
combined_example(1, standard=2, kwd_only=3)
combined_example(pos_only=1, standard=2, kwd_only=3)
def foo(name, **kwds):
foo(1, **{'name': 2})
foo(1, **{'name': 2})
def write_multiple_items(file, separator, *args):
file.write(separator.join(args))
def concat(*args, sep="/"):
return sep.join(args)
concat("earth", "mars", "venus")
concat("earth", "mars", "venus", sep=".")
range() 
list(range(3, 6))            
list(range(*args))            
def parrot(voltage, state='a stiff', action='voom'):
print("-- This parrot wouldn't", action, end=' ')
print("if you put", voltage, "volts through it.", end=' ')
print("E's", state, "!")
parrot(**d)
def make_incrementor(n):
f = make_incrementor(42)
f(0)
f(1)
pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
def my_function():
print(my_function.__doc__)
def f(ham: str, eggs: str = 'eggs') -> str:
print("Annotations:", f.__annotations__)
print("Arguments:", ham, eggs)
f('spam')
a = f(1, 2) + g(3, 4)
list.append(x)
a[len(a):] = [x] 
list.extend(iterable)
a[len(a):] = iterable
list.insert(i, x)
a.insert(0, x) 
a.insert(len(a), x) 
a.append(x) 
list.remove(x)
list.pop([i])
a.pop() 
list.clear()
list.index(x[, start[, end]])
list.count(x)
sorted() 
list.reverse()
list.copy()
fruits.count('apple')
fruits.count('tangerine')
fruits.index('banana')
fruits.index('banana', 4)  
fruits.reverse()
fruits.append('grape')
fruits.sort()
fruits.pop()
append() 
pop() 
stack.append(6)
stack.append(7)
stack.pop()
stack.pop()
stack.pop()
queue = deque(["Eric", "John", "Michael"])
queue.append("Terry")           
queue.append("Graham")          
queue.popleft()                 
queue.popleft()                 
deque(['Michael', 'Terry', 'Graham'])
for x in range(10):
squares.append(x**2)
squares = list(map(lambda x: x**2, range(10)))
squares = [x**2 for x in range(10)]
combs.append((x, y))
abs(x) for x in vec
weapon.strip() for weapon in freshfruit
like (number, square)
x in range(6)
x**2 for x in range(6)
x**2 for x in range(6)
str(round(pi, i)) for i in range(1, 6)
i in range(4)
for i in range(4):
transposed.append([row[i] for row in matrix])
for i in range(4):
transposed_row.append(row[i])
transposed.append(transposed_row)
zip() 
list(zip(*matrix))
pop() 
v = ([1, 2, 3], [3, 2, 1])
len(empty)
len(singleton)
set() 
set() 
print(basket)                      
a = set('abracadabra')
b = set('alacazam')
append() 
extend() 
list(d) 
sorted(d) 
list(tel)
sorted(tel)
dict() 
dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
2 for x in (2, 4, 6)
dict(sape=4139, guido=4127, jack=4098)
items() 
for k, v in knights.items():
print(k, v)
enumerate() 
for i, v in enumerate(['tic', 'tac', 'toe']):
print(i, v)
zip() 
for q, a in zip(questions, answers):
print('What is your {0}?  It is {1}.'.format(q, a))
reversed() 
for i in reversed(range(1, 10, 2)):
print(i)
sorted() 
for i in sorted(basket):
print(i)
set() 
set() 
sorted() 
for f in sorted(set(basket)):
print(f)
raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]
if not math.isnan(value):
filtered_data.append(value)
A and (not B)
def fib(n):    
print(a, end=' ')
print()
def fib2(n):   
result.append(a)
fibo.fib(1000)
fibo.fib2(100)
fib(500)
fib(500)
fib(500)
fib.fib(500)
fibonacci(500)
fib(int(sys.argv[1]))
C> print('Yuck!')
sys.path.append('/ufs/guido/lib/python')
6.3. dir() 
dir() 
dir() 
dir(fibo)
dir(sys)  
dir() 
dir()
dir() 
dir(builtins)  
sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)
echo.echofilter(input, output, delay=0.7, atten=4)
echofilter() 
echofilter(input, output, delay=0.7, atten=4)
print() 
write() 
str.format() 
percentage = yes_votes / (yes_votes + no_votes)
format(yes_votes, percentage)
repr() 
str() 
str() 
repr() 
str() 
repr() 
str(s)
repr(s)
str(1/7)
s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...'
print(s)
repr() 
hellos = repr(hello)
print(hellos)
repr() 
repr((x, y, ('spam', 'eggs')))
print(f'The value of pi is approximately {math.pi:.3f}.')
for name, phone in table.items():
print(f'{name:10} ==> {phone:10d}')
ascii() 
str() 
repr() 
print(f'My hovercraft is full of {animals}.')
format() 
str.format() 
print('We are the {} who say "{}!"'.format('knights', 'Ni'))
str.format() 
str.format() 
print('{0} and {1}'.format('spam', 'eggs'))
print('{1} and {0}'.format('spam', 'eggs'))
str.format() 
format(table)
print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table))
vars() 
for x in range(1, 11):
print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))
str.format() 
for x in range(1, 11):
print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ')
print(repr(x*x*x).rjust(4))
print() 
print() 
str.rjust() 
str.ljust() 
str.center() 
x.ljust(n)[:n] 
str.zfill() 
zfill(5)
zfill(7)
zfill(5)
print('The value of pi is approximately %5.3f.' % math.pi)
open() 
open(filename, mode) 
f = open('workfile', 'w')
open() 
with open('workfile') as f:
read_data = f.read()
f.close() 
f.write() 
f.close() 
f.write() 
f.close() 
f.close()
f.read()
f.read(size) 
f.read() 
f.read()
f.read()
f.readline() 
f.readline() 
f.readline()
f.readline()
f.readline()
print(line, end='')
list(f) 
f.readlines() 
f.write(string) 
f.write('This is a test\n')
value = ('the answer', 42)
s = str(value)  
f.write(s)
f.tell() 
f.seek(offset, whence) 
f = open('workfile', 'rb+')
f.seek(5)      
f.read(1)
f.seek(-3, 2)  
f.read(1)
seek(0, 2) 
f.tell() 
isatty() 
truncate() 
read() 
int() 
json.dumps([1, 'simple', 'list'])
dumps() 
dump() 
json.dump(x, f)
x = json.load(f)
print('Hello world')
print('Hello world')
print() 
10 * (1/0)
x = int(input("Please enter a number: "))
print("Oops!  That was no valid number.  Try again...")
except (RuntimeError, TypeError, NameError)
class B(Exception
class C(B
class D(C
raise cls()
print("D")
print("C")
print("B")
f = open('myfile.txt')
s = f.readline()
i = int(s.strip())
print("OS error: {0}".format(err))
print("Could not convert data to an integer.")
print("Unexpected error:", sys.exc_info()[0])
f = open(arg, 'r')
print('cannot open', arg)
print(arg, 'has', len(f.readlines()), 'lines')
f.close()
__str__() 
raise Exception('spam', 'eggs')
print(type(inst))    
print(inst.args)     
print(inst)          
print('x =', x)
print('y =', y)
def this_fails():
this_fails()
print('Handling run-time error:', err)
raise NameError('HiThere')
raise ValueError()
raise NameError('HiThere')
print('An exception flew by!')
def func():
func()
raise RuntimeError('Failed to open database') from exc
open('database.sqlite')
class Error(Exception
class InputError(Error
def __init__(self, expression, message):
class TransitionError(Error
def __init__(self, previous, next, message):
print('Goodbye, world!')
def bool_return():
bool_return()
def divide(x, y):
print("division by zero!")
print("result is", result)
print("executing finally clause")
divide(2, 1)
divide(2, 0)
divide("2", "1")
type(s) 
for line in open("myfile.txt"):
print(line, end="")
with open("myfile.txt") as f:
print(line, end="")
abs() 
def scope_test():
def do_local():
def do_nonlocal():
def do_global():
do_local()
print("After local assignment:", spam)
do_nonlocal()
print("After nonlocal assignment:", spam)
do_global()
print("After global assignment:", spam)
scope_test()
print("In global scope:", spam)
def f(self):
x = MyClass()
__init__() 
def __init__(self):
__init__() 
__init__() 
x = MyClass()
__init__() 
__init__() 
def __init__(self, realpart, imagpart):
x = Complex(3.0, -4.5)
print(x.counter)
x.f()
print(xf())
f() 
x.f() 
x.f() 
MyClass.f(x) 
def __init__(self, name):
d = Dog('Fido')
e = Dog('Buddy')
def __init__(self, name):
def add_trick(self, trick):
self.tricks.append(trick)
d = Dog('Fido')
e = Dog('Buddy')
d.add_trick('roll over')
e.add_trick('play dead')
def __init__(self, name):
def add_trick(self, trick):
self.tricks.append(trick)
d = Dog('Fido')
e = Dog('Buddy')
d.add_trick('roll over')
e.add_trick('play dead')
w1 = Warehouse()
print(w1.purpose, w1.region)
w2 = Warehouse()
print(w2.purpose, w2.region)
def f1(self, x, y):
return min(x, x+y)
def g(self):
def __init__(self):
def add(self, x):
self.data.append(x)
def addtwice(self, x):
self.add(x)
self.add(x)
class DerivedClassName(BaseClassName
DerivedClassName(modname.BaseClassName)
DerivedClassName() 
BaseClassName.methodname(self, arguments) 
isinstance() 
isinstance(obj, int) 
issubclass() 
issubclass(bool, int) 
issubclass(float, int) 
DerivedClassName(Base1, Base2, Base3)
super() 
def __init__(self, iterable):
self.__update(iterable)
def update(self, iterable):
self.items_list.append(item)
update() 
class MappingSubclass(Mapping
def update(self, keys, values):
update()
__init__()
for item in zip(keys, values):
self.items_list.append(item)
exec() 
eval() 
getattr() 
setattr() 
john = Employee()  
read() 
readline() 
m() 
print(element)
for element in (1, 2, 3):
print(element)
print(key)
print(char)
for line in open("myfile.txt"):
print(line, end='')
iter() 
__next__() 
__next__() 
next() 
__next__() 
it = iter(s)
next(it)
next(it)
next(it)
next(it)
next(it)
__next__() 
__iter__() 
__next__() 
__iter__() 
def __init__(self, data):
self.index = len(data)
def __iter__(self):
def __next__(self):
rev = Reverse('spam')
iter(rev)
print(char)
next() is called
def reverse(data):
for index in range(len(data)-1, -1, -1):
for char in reverse('golf'):
print(char)
__iter__() 
__next__() 
sum(i*i for i in range(10))                 
sum(x*y for x,y in zip(xvec, yvec))         
unique_words = set(word for line in page  for word in line.split())
valedictorian = max((student.gpa, student.name) for student in graduates)
list(data[i] for i in range(len(data)-1, -1, -1))
os.getcwd()      
os.chdir('/server/accesslogs')   
os.system('mkdir today')   
open() 
os.open() 
dir() 
help() 
dir(os)
help(os)
shutil.copyfile('data.db', 'archive.db')
shutil.move('/build/executables', 'installdir')
glob.glob('*.py')
print(sys.argv)
parser.add_argument('filenames', nargs='+')
parser.add_argument('-l', '--lines', type=int, default=10)
args = parser.parse_args()
print(args)
sys.stderr.write('Warning, log file not found starting a new one\n')
sys.exit() 
replace('too', 'two')
math.cos(math.pi / 4)
math.log(1024, 2)
random.choice(['apple', 'pear', 'banana'])
random.sample(range(100), 10)   
random.random()    
random.randrange(6)    
range(6)
statistics.mean(data)
statistics.median(data)
statistics.variance(data)
with urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl') as response:
line = line.decode('utf-8')  
print(line)
server = smtplib.SMTP('localhost')
server.quit()
now = date.today()
datetime.date(2003, 12, 2)
now.strftime("%m-%d-%y. %d %b %Y is a %A on the %d day of %B.")
birthday = date(1964, 7, 31)
len(s)
t = zlib.compress(s)
len(t)
zlib.decompress(t)
zlib.crc32(s)
Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()
Timer('a,b = b,a', 'a=1; b=2').timeit()
def average(values):
print(average([20, 30, 70]))
return sum(values) / len(values)
doctest.testmod()   
TestStatisticalFunctions(unittest.TestCase)
def test_average(self):
self.assertEqual(average([20, 30, 70]), 40.0)
self.assertEqual(round(average([1, 5, 7]), 1), 4.3)
self.assertRaises(ZeroDivisionError)
average([])
self.assertRaises(TypeError)
average(20, 30, 70)
unittest.main()  
repr() 
reprlib.repr(set('supercalifragilisticexpialidocious'))
pprint.pprint(t, width=30)
wrap() 
fill() 
print(textwrap.fill(doc, width=40))
wrap() 
fill()
format() 
locale.setlocale(locale.LC_ALL, 'English_United States.1252')
conv = locale.localeconv()          
locale.format("%d", x, grouping=True)
t = Template('${village}folk send $$10 to $cause.')
t.substitute(village='Nottingham', cause='the ditch fund')
substitute() 
safe_substitute() 
t = Template('Return the $item to $owner.')
d = dict(item='unladen swallow')
t.substitute(d)
t.safe_substitute(d)
class BatchRename(Template
fmt = input('Enter rename style (%d-date %n-seqnum %f-format):  ')
t = BatchRename(fmt)
date = time.strftime('%d%b%y')
for i, filename in enumerate(photofiles):
base, ext = os.path.splitext(filename)
newname = t.substitute(d=date, n=i, f=ext)
print('{0} --> {1}'.format(filename, newname))
pack() 
unpack() 
with open('myfile.zip', 'rb') as f:
data = f.read()
for i in range(3):                      
fields = struct.unpack('<IIIHH', data[start:start+16])
print(filename, hex(crc32), comp_size, uncomp_size)
AsyncZip(threading.Thread)
def __init__(self, infile, outfile):
threading.Thread.__init__(self)
def run(self):
f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)
f.write(self.infile)
f.close()
print('Finished background zip of:', self.infile)
background = AsyncZip('mydata.txt', 'myarchive.zip')
background.start()
print('The main program continues to run in foreground.')
background.join()    
print('Main program waited until background was done.')
logging.debug('Debugging information')
logging.info('Informational message')
logging.warning('Warning:config file %s not found', 'server.conf')
logging.error('Error occurred')
logging.critical('Critical error -- shutting down')
info() 
debug() 
def __init__(self, value):
def __repr__(self):
return str(self.value)
a = A(10)                   
d = weakref.WeakValueDictionary()
gc.collect()                
o = self.data[key]()
array() 
a = array('H', [4000, 10, 700, 22222])
sum(a)
array('H', [10, 700])
deque() 
d = deque(["task1", "task2", "task3"])
d.append("task4")
print("Handling", d.popleft())
unsearched = deque([starting_node])
def breadth_first_search(unsearched):
node = unsearched.popleft()
for m in gen_moves(node):
if is_goal(m):
unsearched.append(m)
scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]
bisect.insort(scores, (300, 'ruby'))
heapify(data)                      
heappush(data, -5)                 
heappop(data) for i in range(3)
round(Decimal('0.70') * Decimal('1.05'), 2)
Decimal('0.74')
round(.70 * 1.05, 2)
Decimal('1.00') % Decimal('.10')
Decimal('0.00')
sum([Decimal('0.1')]*10) == Decimal('1.0')
sum([0.1]*10) == 1.0
getcontext().prec = 36
Decimal(1) / Decimal(7)
Decimal('0.142857142857142857142857142857142857')
setuptools (16.0)
__getattr__() 
__getattr__() 
eval(repr(x)) == x
repr() 
format(math.pi, '.12g')  
format(math.pi, '.2f')   
repr(math.pi)
round() 
round(.1, 1) + round(.1, 1) + round(.1, 1) == round(.3, 1)
round() 
round(.1 + .1 + .1, 10) == round(.3, 10)
str() 
str.format() 
float.as_integer_ratio() 
x.as_integer_ratio()
float.hex() 
x.hex()
x == float.fromhex('0x1.921f9f01b866ep+1')
math.fsum() 
sum([0.1] * 10) == 1.0
math.fsum([0.1] * 10) == 1.0
J / (2**N)
q, r = divmod(2**56, 10)
format(0.1, '.17f')
Fraction.from_float(0.1)
Fraction(3602879701896397, 36028797018963968)
as_integer_ratio()
Decimal.from_float(0.1)
Decimal('0.1000000000000000055511151231257827021181583404541015625')
format(Decimal.from_float(0.1), '.17')
if os.path.isfile('.pythonrc.py'): 
exec(open('.pythonrc.py').read()) 
filename = os.environ.get('PYTHONSTARTUP')
if filename and os.path.isfile(filename):
with open(filename) as fobj:
startup_file = fobj.read()
exec(startup_file)
site.getusersitepackages()
print(x)
print() 
print(x)
print(y)
print(z)
for i in range(10):
print(i)
range() 
list(range(3)) 
a.remove(x)
sys.exc_info() 
sys.exc_info() 
sys.exc_info() 
def f():
f()
def foo():
foo()
__enter__() 
__exit__() 
__enter__() 
__enter__() 
__enter__() 
__exit__() 
__exit__() 
__exit__() 
__exit__() 
__exit__() 
manager = (EXPRESSION)
enter = type(manager).__enter__
exit = type(manager).__exit__
value = enter(manager)
if not exit(manager, *sys.exc_info()):
exit(manager, None, None, None)
A() 
B() 
with A() as a:
with B() as b:
f1(arg)
def func(): 
def func(): 
func = f1(arg)(f2(func))
def whats_on_the_telly(penguin=None):
penguin.append("property of the zoo")
class Foo(object
f1(arg)
Foo = f1(arg)(f2(Foo))
def func(param1, param2):
do_stuff()
some_coroutine()
iter = (ITER)
iter = type(iter).__aiter__(iter)
type(iter).__anext__(iter)
__aiter__() 
__anext__() 
manager = (EXPRESSION)
aenter = type(manager).__aenter__
aexit = type(manager).__aexit__
aenter(manager)
aexit(manager, *sys.exc_info())
aexit(manager, None, None, None)
__aenter__() 
__aexit__() 
id() 
id(x) 
len() 
type() 
close() 
__repr__() and __str__()
numbers.Real (float) 
numbers.Complex (complex)
len() 
ord() 
chr() 
str.encode() 
bytes.decode() 
bytes() 
decode() 
del (delete) 
bytearray() 
len() 
set() 
add() 
frozenset() 
len() 
f() 
x.f(1) 
C.f(x, 1) 
x.f(1) 
C.f(1) 
f(C,1) 
iterator.__next__() 
aiterator.__anext__() 
len() 
math.sin() 
alist.append() 
__new__() 
__new__() 
__init__() 
__call__() 
__import__() 
__getattr__() 
__setattr__() 
__delattr__() 
open() 
os.popen() 
os.fdopen() 
makefile() 
frame.clear()
sys.exc_info() 
__getitem__() 
slice() 
slice.indices(self, length)
staticmethod() 
classmethod() 
__getitem__() 
type(x).__getitem__(x, i) 
__iter__() 
iter() 
__getitem__() 
__new__() 
__new__() 
super().__new__
__new__() 
__new__() 
__init__() 
__new__() 
__new__() 
__init__() 
__init__() 
__init__() 
super().__init__
__new__() 
__init__() 
__new__() 
__init__() 
__init__() 
object.__del__(self)
__del__() 
__del__() 
__del__() 
__del__() 
__del__() 
__del__() 
x.__del__() 
__del__() 
__del__() 
__del__() 
__del__() 
__del__() 
__del__() 
object.__repr__(self)
repr() 
__repr__() 
__str__() 
__repr__() 
object.__str__(self)
str(object) 
format()
print() 
__str__() 
object.__repr__() 
object.__repr__() 
object.__bytes__(self)
object.__format__(self, format_spec)
format() 
str.format() 
__format__() 
object.__format__(x, '') is now
str(x) 
format(str(x), '')
object.__lt__(self, other)
object.__le__(self, other)
object.__eq__(self, other)
object.__ne__(self, other)
object.__gt__(self, other)
object.__ge__(self, other)
x.__lt__(y) 
x.__le__(y) 
x.__eq__(y) 
x.__ne__(y) 
x.__gt__(y) 
x.__ge__(y) 
bool() 
__hash__() 
__lt__() 
__gt__() 
__le__() 
__ge__() 
__eq__() 
__ne__() 
object.__hash__(self)
hash() 
__hash__() 
def __hash__(self):
return hash((self.name, self.nick, self.color))
hash() 
__hash__() 
__hash__() 
print(sys.hash_info.width)
__eq__() 
__hash__() 
__eq__() 
__hash__() 
__eq__() 
__hash__() 
__eq__() 
__hash__() 
x.__hash__() 
hash(x) == hash(y) 
__eq__() 
__hash__() 
__hash__() 
__hash__() 
isinstance(obj, collections.abc.Hashable) 
__eq__() 
__hash__() 
__eq__() 
__hash__() 
isinstance(obj, collections.abc.Hashable) 
__hash__() 
O(n^2) 
object.__bool__(self)
bool() 
__len__() 
__len__() 
__bool__() 
object.__getattr__(self, name)
__getattribute__() 
__get__() 
__getattr__() 
__getattr__() 
__setattr__() 
__getattr__() 
__getattribute__() 
object.__getattribute__(self, name)
__getattr__() 
__getattr__() 
__getattribute__() 
object.__getattribute__(self, name) 
object.__setattr__(self, name, value)
__setattr__() 
object.__setattr__(self, name, value) 
object.__delattr__(self, name)
__setattr__() 
object.__dir__(self)
dir() 
dir() 
object.__getattribute__() 
class VerboseModule(ModuleType
def __repr__(self):
def __setattr__(self, attr, value):
print(f'Setting {attr}...')
super().__setattr__(attr, value)
object.__get__(self, instance, owner=None)
object.__set__(self, instance, value)
object.__delete__(self, instance)
object.__set_name__(self, owner, name)
__set_name__() is only
descr = custom_descriptor()
descr.__set_name__(A, 'attr')
__get__()
__set__()
__delete__() 
type(a).__dict__['x'] 
type(a) 
x.__get__(a) 
type(a).__dict__['x'].__get__(a, type(a)) 
A.__dict__['x'].__get__(None, A) 
super(B, obj).m() 
A.__dict__['m'].__get__(obj, obj.__class__) 
staticmethod() 
classmethod() 
property() 
object.__init_subclass__(cls)
super().__init_subclass__(**kwargs)
AustralianPhilosopher(Philosopher, default_name="Bruce")
type(cls) 
type() 
type(name, bases, namespace) 
class Meta(type
MyClass(metaclass=Meta)
class MySubclass(MyClass
type() 
type() 
type() 
exec(body, globals(), namespace) 
exec() 
metaclass(name, bases, namespace, **kwds) 
super() 
super() 
__set_name__() 
__init_subclass__() 
isinstance() 
issubclass() 
class.__instancecheck__(self, instance)
isinstance(instance, class) 
class.__subclasscheck__(self, subclass)
issubclass(subclass, class) 
__instancecheck__() 
__subclasscheck__() 
isinstance() 
issubclass() 
object.__class_getitem__(cls, key)
object.__len__(self)
len() 
__bool__() 
__len__() 
len() 
object.__length_hint__(self)
a[slice(1, 2, None)] = b
object.__getitem__(self, key)
__getitem__() 
object.__setitem__(self, key, value)
__getitem__() 
__getitem__() 
object.__delitem__(self, key)
__getitem__() 
__getitem__() 
object.__missing__(self, key)
dict.__getitem__() 
object.__iter__(self)
object.__reversed__(self)
reversed() 
__reversed__() 
reversed() 
__len__() 
__getitem__()
reversed() 
__reversed__() 
object.__contains__(self, item)
__contains__() 
__iter__() 
__getitem__() 
object.__add__(self, other)
object.__sub__(self, other)
object.__mul__(self, other)
object.__matmul__(self, other)
object.__truediv__(self, other)
object.__floordiv__(self, other)
object.__mod__(self, other)
object.__divmod__(self, other)
object.__pow__(self, other[, modulo])
object.__lshift__(self, other)
object.__rshift__(self, other)
object.__and__(self, other)
object.__xor__(self, other)
object.__or__(self, other)
divmod()
pow()
__add__() 
x.__add__(y) 
__divmod__() 
__floordiv__() 
__mod__() 
__truediv__() 
pow() 
__pow__() 
object.__radd__(self, other)
object.__rsub__(self, other)
object.__rmul__(self, other)
object.__rmatmul__(self, other)
object.__rtruediv__(self, other)
object.__rfloordiv__(self, other)
object.__rmod__(self, other)
object.__rdivmod__(self, other)
object.__rpow__(self, other[, modulo])
object.__rlshift__(self, other)
object.__rrshift__(self, other)
object.__rand__(self, other)
object.__rxor__(self, other)
object.__ror__(self, other)
divmod()
pow()
__rsub__() 
x.__sub__(y) 
y.__rsub__(x) 
pow() 
__rpow__() 
object.__iadd__(self, other)
object.__isub__(self, other)
object.__imul__(self, other)
object.__imatmul__(self, other)
object.__itruediv__(self, other)
object.__ifloordiv__(self, other)
object.__imod__(self, other)
object.__ipow__(self, other[, modulo])
object.__ilshift__(self, other)
object.__irshift__(self, other)
object.__iand__(self, other)
object.__ixor__(self, other)
object.__ior__(self, other)
__iadd__() 
x = x.__iadd__(y) 
x.__add__(y) 
y.__radd__(x) 
__ipow__() 
x.__pow__(y) and y.__rpow__(x). This
object.__neg__(self)
object.__pos__(self)
object.__abs__(self)
object.__invert__(self)
abs() 
object.__complex__(self)
object.__int__(self)
object.__float__(self)
complex()
int()
float() 
object.__index__(self)
operator.index() 
bin() 
hex() 
oct() 
object.__round__(self[, ndigits])
object.__trunc__(self)
object.__floor__(self)
object.__ceil__(self)
round() 
trunc()
floor()
ceil() 
__round__() 
__int__() 
int() 
__trunc__() 
object.__enter__(self)
object.__exit__(self, exc_type, exc_value, traceback)
__exit__() 
c = C()
len(c)
len()
__hash__() 
__repr__() 
1 .__hash__() == hash(1)
int.__hash__() == hash(int)
type(1).__hash__(1) == hash(1)
type(int).__hash__(int) == hash(int)
__getattribute__() 
class Meta(type
def __getattribute__(*args):
print("Metaclass getattribute invoked")
return type.__getattribute__(*args)
C(object, metaclass=Meta)
def __len__(self):
def __getattribute__(*args):
print("Class getattribute invoked")
return object.__getattribute__(*args)
c = C()
c.__len__()                 
type(c).__len__(c)          
len(c)                      
__getattribute__() 
types.coroutine() 
asyncio.coroutine() 
__await__() 
object.__await__(self)
coroutine.send(value)
__await__() 
send() 
__await__() 
coroutine.throw(type[, value[, traceback]])
throw() 
__await__() 
coroutine.close()
close() 
object.__aiter__(self)
object.__anext__(self)
def readline(self):
def __aiter__(self):
def __anext__(self):
self.readline()
object.__aenter__(self)
object.__aexit__(self, exc_type, exc_value, traceback)
def __aenter__(self):
log('entering context')
def __aexit__(self, exc_type, exc, tb):
log('exiting context')
eval() 
exec() 
exec() 
eval() 
b = list(a + i for i in range(10))
def f():
print(i)
f()
eval() 
exec() 
exec() 
eval() 
x*y for x in range(10) for y in range(x, x+10)
__next__() 
x*y for x in range(10) for y in range(x, x+10)
def gen():  
def agen(): 
__next__() 
next() 
send() 
close() 
generator.__next__()
__next__() 
__next__() 
next() 
generator.send(value)
send() 
send() 
generator.throw(type[, value[, traceback]])
generator.close()
close() 
def echo(value=None):
print("Execution starts when 'next()' is called for the first time.")
print("Don't forget to clean up when 'close()' is called.")
generator = echo(1)
print(next(generator))
print(next(generator))
print(generator.send(2))
generator.throw(TypeError, "spam")
generator.close()
__anext__() 
asend() 
aclose() 
agen.__anext__()
agen.asend(value)
agen.athrow(type[, value[, traceback]])
agen.aclose()
__getattr__() 
sequence (string, tuple or list) or mapping (dictionary) 
__getitem__() 
__getitem__() 
__getitem__() 
__getitem__() 
__call__() 
PyArg_ParseTuple() 
f(x1, x2, *y, x3, x4) 
def f(a, b):
print(a, b)
f(b=1, *(2,))
f(a=1, *(2,))
f(1, *(2,))
__call__() 
__call__() 
pow() 
-(x+1) 
x == (x//y)*y + (x%y) 
divmod()
divmod(x, y) == (x//y, x%y) 
divmod() 
abs() 
a_expr | shift_expr ("<<" | ">>") 
pow(2,n) 
pow(2,n) 
__lt__() 
float('NaN') 
decimal.Decimal('NaN') 
x = float('NaN') 
ord() 
min()
max()
sorted() 
total_ordering() 
hash() 
any(x is e or x == e for e in y) 
y.find(x) != -1
__contains__() 
y.__contains__(x) 
id() 
__bool__() 
if matching := pattern.search(data):
do_something(matching)
while chunk := file.read(9000):
process(chunk)
def <lambda>(parameters)
expr1 + expr2 * (expr3 - expr4)
expr1(expr2, expr3, *expr4, **expr5)
abs(x%y) < abs(y) 
math.fmod() 
divmod(x,y)[0] * y + x % y
unicodedata.normalize() 
cmd.Cmd(completekey='tab', stdin=None, stdout=None)
Cmd.cmdloop(intro=None)
do_foo() 
do_help() 
do_shell() 
postcmd() 
postcmd() 
complete_foo() 
do_help() 
help_bar() 
do_bar() 
do_help() 
Cmd.onecmd(str)
precmd() 
postcmd() 
default() 
Cmd.emptyline()
Cmd.default(line)
Cmd.completedefault(text, line, begidx, endidx)
Cmd.precmd(line)
onecmd() 
precmd() 
Cmd.postcmd(stop, line)
postcmd() 
onecmd() 
Cmd.preloop()
cmdloop() 
Cmd.postloop()
cmdloop() 
cmdloop() 
cmdloop() 
cmdloop() 
input() 
sys.stdout.write() 
sys.stdin.readline() 
forward() 
do_forward() 
precmd() 
do_playback() 
shlex.get_token()
push_token() 
shlex.push_token(str)
shlex.read_token()
shlex.sourcehook(filename)
open() 
close() 
push_source() 
pop_source() 
shlex.push_source(newstream, newfile=None)
sourcehook() 
shlex.pop_source()
shlex.error_leader(infile=None, lineno=None)
close() 
__import__() 
__import__() 
__import__() 
__import__() 
__import__() 
__import__() 
find_spec() 
find_spec() 
mpf.find_spec("foo", None, None) 
mpf.find_spec("foo.bar", foo.__path__, None) 
mpf.find_spec("foo.bar.baz", foo.bar.__path__, None) 
find_spec() 
find_module() 
find_module() 
find_spec() 
if spec.loader is not None and hasattr(spec.loader, 'create_module'):
module = spec.loader.create_module(spec)
module = ModuleType(spec.name)
_init_module_attrs(spec, module)
elif not hasattr(spec.loader, 'exec_module'):
module = spec.loader.load_module(spec.name)
spec.loader.exec_module(module)
exec_module() 
exec_module() 
find_spec() 
create_module() 
create_module() 
create_module() 
load_module() 
exec_module() 
load_module() 
exec_module() 
load_module() 
load_module() 
exec_module() 
load_module() 
exec_module() 
create_module() 
exec_module() 
create_module() 
loader.module_repr() 
module_repr() 
find_spec() 
find_spec() 
find_spec() 
stat() 
find_spec() 
find_spec() 
find_spec() 
find_loader() 
find_module() 
find_spec() 
find_spec() 
find_spec() 
find_module() 
find_module() 
find_module() 
find_loader() 
find_module() 
find_module() 
find_loader() 
__import__() 
parent(s) 
XXX * (import_machinery.rst) 
find_module() 
find_loader() 
json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
print(json.dumps("\"foo\bar"))
print(json.dumps('\u1234'))
print(json.dumps('\\'))
print(json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True))
io = StringIO()
json.dump(['streaming API'], io)
io.getvalue()
json.dumps([1, 2, 3, {'4': 5, '6': 7}], separators=(',', ':'))
print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4))
json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
json.loads('"\\"foo\\bar"')
io = StringIO('["streaming API"]')
json.load(io)
def as_complex(dct):
return complex(dct['real'], dct['imag'])
json.loads('1.1', parse_float=decimal.Decimal)
Decimal('1.1')
ComplexEncoder(json.JSONEncoder)
def default(self, obj):
if isinstance(obj, complex):
return json.JSONEncoder.default(self, obj)
ComplexEncoder().encode
ComplexEncoder().iterencode
write() 
fp.write() 
default() 
dump() 
dump() 
loads(dumps(x)) != x
read() 
float(num_str) 
int(num_str) 
load() 
number (int)
number (real)
float(num_str) 
int(num_str) 
decode(s)
raw_decode(s)
default() 
default(o)
default() 
def default(self, o):
iterable = iter(o)
return list(iterable)
return json.JSONEncoder.default(self, o)
encode(o)
json.JSONEncoder().encode({"foo": ["bar", "baz"]})
iterencode(o)
for chunk in json.JSONEncoder().iterencode(bigobject):
mysocket.write(chunk)
json.JSONDecodeError(msg, doc, pos)
json.dumps(float('-inf'))
json.dumps(float('nan'))
json.loads('-Infinity')
json.loads('NaN')
json.loads(weird_json)
mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=[])
os.system() 
findmatch() 
mailcap.getcaps()
findmatch() 
d = mailcap.getcaps()
mailcap.findmatch(d, 'video/mpeg', filename='tmp1223')
add() 
remove() 
discard() 
lock() 
unlock() 
add(message)
remove(key)
__delitem__(key)
discard(key)
remove() 
__delitem__() 
discard() 
discard() 
__setitem__(key, message)
add() 
iterkeys()
keys()
iterkeys() 
keys() 
itervalues()
__iter__()
values()
itervalues() 
__iter__() 
values() 
__iter__() 
iteritems()
items()
iteritems() 
items() 
get(key, default=None)
__getitem__(key)
get() 
__getitem__() 
get_message(key)
get_bytes(key)
get_string(key)
get_file(key)
__contains__(key)
__len__()
clear()
pop(key, default=None)
popitem()
update(arg)
__setitem__() 
__setitem__() 
flush()
flush() 
lock()
unlock()
close()
mailbox.Maildir(dirname, factory=None, create=True)
list_folders()
get_folder(folder)
add_folder(folder)
remove_folder(folder)
clean()
add(message)
__setitem__(key, message)
update(arg)
flush()
lock()
unlock()
close()
get_file(key)
mailbox.mbox(path, factory=None, create=True)
get_file(key)
flush() 
close() 
lock()
unlock()
flock() 
lockf() 
mailbox.MH(path, factory=None, create=True)
list_folders()
get_folder(folder)
add_folder(folder)
remove_folder(folder)
get_sequences()
set_sequences(sequences)
pack()
get_sequences() 
remove(key)
__delitem__(key)
discard(key)
lock()
unlock()
flock() 
lockf() 
get_file(key)
flush()
close()
unlock() 
mailbox.Babyl(path, factory=None, create=True)
Control-Underscore ('\037') 
Control-L ('\014') 
get_labels()
get_file(key)
lock()
unlock()
flock() 
lockf() 
mailbox.MMDF(path, factory=None, create=True)
Control-A ('\001') 
get_file(key)
flush() 
close() 
lock()
unlock()
flock() 
lockf() 
mailbox.Message(message=None)
mailbox.MaildirMessage(message=None)
get_subdir()
msg.get_flags() 
set_subdir(subdir)
get_flags()
set_flags(flags)
add_flag(flag)
remove_flag(flag)
get_date()
set_date(date)
get_info()
set_info(info)
mailbox.mboxMessage(message=None)
get_from()
set_from(from_, time_=None)
time.strftime() 
time.gmtime() 
get_flags()
set_flags(flags)
add_flag(flag)
remove_flag(flag)
mailbox.MHMessage(message=None)
get_sequences()
set_sequences(sequences)
add_sequence(sequence)
remove_sequence(sequence)
mailbox.BabylMessage(message=None)
get_labels()
set_labels(labels)
add_label(label)
remove_label(label)
get_visible()
set_visible(visible)
update_visible()
mailbox.MMDFMessage(message=None)
get_from()
set_from(from_, time_=None)
time.strftime() 
time.gmtime() 
get_flags()
set_flags(flags)
add_flag(flag)
remove_flag(flag)
for message in mailbox.mbox('~/mbox'):
if subject and 'python' in subject.lower():
print(subject)
destination = mailbox.MH('~/Mail')
destination.lock()
for message in mailbox.Babyl('~/RMAIL'):
destination.add(mailbox.MHMessage(message))
destination.flush()
destination.unlock()
list_names = ('python-list', 'python-dev', 'python-bugs')
boxes = {name: mailbox.mbox('~/email/%s' % name) for name in list_names}
inbox = mailbox.Maildir('~/Maildir', factory=None)
for key in inbox.iterkeys():
box.lock()
box.add(message)
box.flush()
box.unlock()
inbox.lock()
inbox.discard(key)
inbox.flush()
inbox.unlock()
for box in boxes.itervalues():
box.close()
init() 
init() 
mimetypes.guess_type(url, strict=True)
mimetypes.guess_all_extensions(type, strict=True)
guess_type() 
guess_type() 
mimetypes.guess_extension(type, strict=True)
guess_type() 
guess_type() 
mimetypes.init(files=None)
init() 
mimetypes.read_mime_types(filename)
dot ('.') 
mimetypes.add_type(type, ext, strict=True)
init() 
mimetypes.init()
read() 
readfp() 
guess_extension(type, strict=True)
guess_extension() 
guess_type(url, strict=True)
guess_type() 
guess_all_extensions(type, strict=True)
guess_all_extensions() 
read(filename, strict=True)
readfp() 
readfp(fp, strict=True)
read_windows_registry(strict=True)
base64.b64encode(s, altchars=None)
base64.b64decode(s, altchars=None, validate=False)
base64.standard_b64encode(s)
base64.standard_b64decode(s)
base64.urlsafe_b64encode(s)
base64.urlsafe_b64decode(s)
base64.b32encode(s)
base64.b32decode(s, casefold=False, map01=None)
base64.b16encode(s)
base64.b16decode(s, casefold=False)
base64.b85encode(b, pad=False)
base64.b85decode(b)
base64.decode(input, output)
input.readline() 
base64.decodebytes(s)
base64.encode(input, output)
input.read() 
encode() 
2045 (MIME) 
base64.encodebytes(s)
2045 (MIME) 
data = base64.b64decode(encoded)
binhex.binhex(input, output)
write() 
close() 
binhex.hexbin(input, output)
read() 
close() 
binascii.a2b_uu(string)
binascii.a2b_base64(string)
binascii.a2b_qp(data, header=False)
binascii.b2a_qp(data, quotetabs=False, istext=True, header=False)
binascii.a2b_hqx(string)
binascii.rledecode_hqx(data)
binascii.rlecode_hqx(data)
binascii.b2a_hqx(data)
binascii.crc_hqx(data, value)
binascii.crc32(data[, value])
print('crc32 = {:#010x}'.format(crc))
crc32(data) & 0xffffffff
binascii.b2a_hex(data[, sep[, bytes_per_sep=1]])
binascii.hexlify(data[, sep[, bytes_per_sep=1]])
binascii.a2b_hex(hexstr)
binascii.unhexlify(hexstr)
b2a_hex() 
quopri.decode(input, output, header=False)
quopri.encode(input, output, quotetabs, header=False)
quopri.decodestring(s, header=False)
decode() 
quopri.encodestring(s, quotetabs=False, header=False)
encode() 
encode() 
uu.decode(in_file, out_file=None, mode=None, quiet=False)
decode() 
uu.decode() 
lc_letter (lc_letter | "_")
html.escape(s, quote=True)
html.unescape(s)
class MyHTMLParser(HTMLParser
def handle_starttag(self, tag, attrs):
print("Encountered a start tag:", tag)
def handle_endtag(self, tag):
print("Encountered an end tag :", tag)
def handle_data(self, data):
print("Encountered some data  :", data)
parser = MyHTMLParser()
HTMLParser.feed(data)
close() 
HTMLParser.close()
close() 
HTMLParser.reset()
HTMLParser.getpos()
HTMLParser.get_starttag_text()
handle_startendtag() 
HTMLParser.handle_starttag(tag, attrs)
handle_starttag('a', [('href', 'https://www.cwi.nl/')]) 
HTMLParser.handle_endtag(tag)
HTMLParser.handle_startendtag(tag, attrs)
handle_starttag() 
handle_starttag() 
handle_endtag() 
HTMLParser.handle_data(data)
HTMLParser.handle_entityref(name)
HTMLParser.handle_charref(name)
HTMLParser.handle_comment(data)
HTMLParser.handle_decl(decl)
HTMLParser.handle_pi(data)
handle_pi("proc color='red'") 
HTMLParser.unknown_decl(data)
class MyHTMLParser(HTMLParser
def handle_starttag(self, tag, attrs):
print("Start tag:", tag)
print("     attr:", attr)
def handle_endtag(self, tag):
print("End tag  :", tag)
def handle_data(self, data):
print("Data     :", data)
def handle_comment(self, data):
print("Comment  :", data)
def handle_entityref(self, name):
c = chr(name2codepoint[name])
print("Named ent:", c)
def handle_charref(self, name):
if name.startswith('x'):
c = chr(int(name[1:], 16))
c = chr(int(name))
print("Num ent  :", c)
def handle_decl(self, data):
print("Decl     :", data)
parser = MyHTMLParser()
parser.feed('<img src="python-logo.png" alt="The Python logo">')
parser.feed('<h1>Python</h1>')
parser.feed('<style type="text/css">#python { color: green }</style>')
alert("<strong>hello!</strong>")
parser.feed('&gt;&#62;&#x3E;')
feed() 
handle_data() 
parser.feed(chunk)
parser.feed('<p><a class=link href=#main>tag soup</p ></a>')
html.unescape() 
tree = ET.parse('country_data.xml')
root = tree.getroot()
root = ET.fromstring(country_data_as_string)
fromstring() 
print(child.tag, child.attrib)
XMLPullParser.feed() 
XMLPullParser.read_events() 
parser = ET.XMLPullParser(['start', 'end'])
parser.feed('<mytag>sometext')
list(parser.read_events())
parser.feed(' more text</mytag>')
for event, elem in parser.read_events():
print(event)
print(elem.tag, 'text=', elem.text)
iterparse() 
Element.iter() 
for neighbor in root.iter('neighbor'):
print(neighbor.attrib)
Element.findall() 
Element.find() 
Element.get() 
for country in root.findall('country'):
rank = country.find('rank').text
name = country.get('name')
print(name, rank)
ElementTree.write() 
Element.set() 
Element.append() 
for rank in root.iter('rank'):
new_rank = int(rank.text) + 1
rank.text = str(new_rank)
rank.set('updated', 'yes')
tree.write('output.xml')
Element.remove() 
for country in root.findall('country'):
root.findall() 
rank = int(country.find('rank').text)
root.remove(country)
tree.write('output.xml')
SubElement() 
a = ET.Element('a')
b = ET.SubElement(a, 'b')
c = ET.SubElement(a, 'c')
d = ET.SubElement(c, 'd')
ET.dump(a)
find() 
findall() 
root = fromstring(xml_text)
for actor in root.findall('{http://people.example.com}actor'):
name = actor.find('{http://people.example.com}name')
print(name.text)
for char in actor.findall('{http://characters.example.com}character'):
print(' |-->', char.text)
for actor in root.findall('real_person:actor', ns):
name = actor.find('real_person:name', ns)
print(name.text)
for char in actor.findall('role:character', ns):
print(' |-->', char.text)
root = ET.fromstring(countrydata)
root.findall(".")
root.findall("./country/neighbor")
root.findall(".//year/..[@name='Singapore']")
root.findall(".//*[@name='Singapore']/year")
root.findall(".//neighbor[2]")
root.findall(".//{http://purl.org/dc/elements/1.1/}title")
last() 
last()-1
print(canonicalize(xml_data))
with open("c14n_output.xml", mode='w', encoding='utf-8') as out_file:
canonicalize(xml_data, out=out_file)
with open("c14n_output.xml", mode='w', encoding='utf-8') as out_file:
canonicalize(from_file="inputfile.xml", out=out_file)
xml.etree.ElementTree.Comment(text=None)
xml.etree.ElementTree.dump(elem)
dump() 
xml.etree.ElementTree.fromstring(text, parser=None)
xml.etree.ElementTree.fromstringlist(sequence, parser=None)
xml.etree.ElementTree.indent(tree, space=" ", level=0)
xml.etree.ElementTree.iselement(element)
xml.etree.ElementTree.iterparse(source, events=None, parser=None)
iterparse() 
iterparse() 
xml.etree.ElementTree.parse(source, parser=None)
xml.etree.ElementTree.ProcessingInstruction(target, text=None)
xml.etree.ElementTree.register_namespace(prefix, uri)
xml.etree.ElementTree.SubElement(parent, tag, attrib={}, **extra)
tostring() 
tostringlist() 
xml.etree.ElementTree.XML(text, parser=None)
xml.etree.ElementTree.XMLID(text, parser=None)
tree = ElementTree.parse("document.xml")
root = tree.getroot()
ElementInclude.include(root)
Copyright (c) <xi
Copyright (c) 
xml.etree.ElementInclude.default_loader(href, parse, encoding=None)
xml.etree.ElementInclude.include(elem, loader=None, base_url=None, max_depth=6)
xml.etree.ElementTree.Element(tag, attrib={}, **extra)
itertext() 
join(element.itertext()) 
clear()
get(key, default=None)
items()
keys()
set(key, value)
append(subelement)
extend(subelements)
find(match, namespaces=None)
findall(match, namespaces=None)
findtext(match, default=None, namespaces=None)
insert(index, subelement)
iter(tag=None)
iterfind(match, namespaces=None)
itertext()
makeelement(tag, attrib)
SubElement() 
remove(subelement)
len(elem) 
element = root.find('foo')
print("element not found, or element has no subelements")
print("element not found")
def reorder_attributes(root):
for el in root.iter():
if len(attrib) > 1:
attribs = sorted(attrib.items())
attrib.clear()
attrib.update(attribs)
xml.etree.ElementTree.ElementTree(element=None, file=None)
_setroot(element)
find(match, namespaces=None)
Element.find() 
findall(match, namespaces=None)
Element.findall() 
findtext(match, default=None, namespaces=None)
Element.findtext() 
getroot()
iter(tag=None)
iterfind(match, namespaces=None)
Element.iterfind() 
parse(source, parser=None)
write() 
tree = ElementTree()
tree.parse("index.xhtml")
p = tree.find("body/p")     
links = list(p.iter("a"))   
tree.write("output.xhtml")
xml.etree.ElementTree.QName(text_or_uri, tag=None)
close()
data(data)
end(tag)
start(tag, attrs)
comment(text)
pi(target, text)
doctype(name, pubid, system)
start_ns(prefix, uri)
end_ns(prefix)
close()
close() 
feed(data)
XMLParser.feed() 
start(tag, attrs_dict) 
end(tag) 
data(data). For
class. XMLParser.close() 
close(). XMLParser
def start(self, tag, attrib):   
def end(self, tag):             
def data(self, data):
def close(self):    
target = MaxDepth()
parser = XMLParser(target=target)
parser.feed(exampleXml)
parser.close()
xml.etree.ElementTree.XMLPullParser(events=None)
feed(data)
close()
XMLParser.close() 
read_events() 
read_events()
read_events() 
read_events() 
getDOMImplementation() 
Model (DOM) 
Model (DOM) 
xml.dom.registerDOMImplementation(name, factory)
hasFeature() 
Model (DOM) 
DOMImplementation.hasFeature(feature, version)
DOMImplementation.createDocument(namespaceUri, qualifiedName, doctype)
createDocumentType() 
DOMImplementation.createDocumentType(qualifiedName, publicId, systemId)
Node.hasAttributes()
Node.hasChildNodes()
Node.isSameNode(other)
Node.appendChild(newChild)
Node.insertBefore(newChild, refChild)
Node.removeChild(oldChild)
unlink() 
Node.replaceChild(newChild, oldChild)
Node.normalize()
Node.cloneNode(deep)
getElementsByTagName() 
getElementsByTagNameNS() 
NodeList.item(i)
__len__() 
__getitem__() 
len() 
__setitem__() 
__delitem__() 
Document.createElement(tagName)
insertBefore() 
appendChild() 
Document.createElementNS(namespaceURI, tagName)
insertBefore() 
appendChild() 
Document.createTextNode(data)
Document.createComment(data)
Document.createProcessingInstruction(target, data)
Document.createAttribute(name)
setAttributeNode() 
Document.createAttributeNS(namespaceURI, qualifiedName)
setAttributeNode() 
Document.getElementsByTagName(tagName)
Document.getElementsByTagNameNS(namespaceURI, localName)
Element.getElementsByTagName(tagName)
Element.getElementsByTagNameNS(namespaceURI, localName)
Element.hasAttribute(name)
Element.hasAttributeNS(namespaceURI, localName)
Element.getAttribute(name)
Element.getAttributeNode(attrname)
Element.getAttributeNS(namespaceURI, localName)
Element.getAttributeNodeNS(namespaceURI, localName)
Element.removeAttribute(name)
Element.removeAttributeNode(oldAttr)
Element.removeAttributeNS(namespaceURI, localName)
Element.setAttribute(name, value)
Element.setAttributeNode(newAttr)
Element.setAttributeNodeNS(newAttr)
Element.setAttributeNS(namespaceURI, qname, value)
NamedNodeMap.item(index)
NamedNodeMap.removeNamedItem() 
_get_someValue()
_get_anotherValue() 
_set_anotherValue()
getElementsByTagName() 
dom1 = parse('c:\\temp\\mydata.xml')  
datasource = open('c:\\temp\\mydata.xml')
dom2 = parse(datasource)  
dom3 = parseString('<myxml>Some data<empty/> some more data</myxml>')
parse() 
xml.dom.minidom.parse(filename_or_file, parser=None, bufsize=None)
parseString() 
xml.dom.minidom.parseString(string, parser=None)
parse() 
parse() 
parseString() 
getDOMImplementation() 
impl = getDOMImplementation()
newdoc = impl.createDocument(None, "some_tag", None)
text = newdoc.createTextNode('Some textual content.')
top_element.appendChild(text)
dom3 = parseString("<myxml>Some data</myxml>")
unlink() 
unlink() 
unlink() 
Model (DOM) 
Node.unlink()
with xml.dom.minidom.parse(datasource) as dom:
Node.writexml(writer, indent="", addindent="", newl="", encoding=None, standalone=None)
write() 
writexml() 
Node.toxml(encoding=None, standalone=None)
toxml() 
Node.toprettyxml(indent="\t", newl="\n", encoding=None, standalone=None)
toxml() 
toprettyxml() 
dom = xml.dom.minidom.parseString(document)
def getText(nodelist):
rc.append(node.data)
return ''.join(rc)
def handleSlideshow(slideshow):
print("<html>")
handleSlideshowTitle(slideshow.getElementsByTagName("title")[0])
slides = slideshow.getElementsByTagName("slide")
handleToc(slides)
handleSlides(slides)
print("</html>")
def handleSlides(slides):
handleSlide(slide)
def handleSlide(slide):
handleSlideTitle(slide.getElementsByTagName("title")[0])
handlePoints(slide.getElementsByTagName("point"))
def handleSlideshowTitle(title):
print("<title>%s</title>" % getText(title.childNodes))
def handleSlideTitle(title):
print("<h2>%s</h2>" % getText(title.childNodes))
def handlePoints(points):
print("<ul>")
handlePoint(point)
print("</ul>")
def handlePoint(point):
print("<li>%s</li>" % getText(point.childNodes))
def handleToc(slides):
title = slide.getElementsByTagName("title")[0]
print("<p>%s</p>" % getText(title.childNodes))
handleSlideshow(dom)
_get_foo() 
_set_foo() 
parser = make_parser()
parser.setFeature(feature_external_ges, True)
parse(filename, parser=parser)
doc = pulldom.parse('sales_items.xml')
if int(node.getAttribute('price')) > 50:
doc.expandNode(node)
print(node.toxml())
DOMEventStream.expandNode() 
xml.dom.pulldom.PullDom(documentFactory=None)
xml.dom.pulldom.SAX2DOM(documentFactory=None)
xml.dom.pulldom.parse(stream_or_string, parser=None, bufsize=None)
parseString() 
xml.dom.pulldom.parseString(string, parser=None)
parse() 
parse() 
xml.dom.pulldom.DOMEventStream(stream, parser, bufsize)
getEvent()
expandNode() 
expandNode(node)
doc = pulldom.parseString(xml)
print(node.toxml())
doc.expandNode(node)
print(node.toxml())
reset()
XML (SAX) 
setFeature() 
xml.sax.make_parser(parser_list=[])
xml.sax.parse(filename_or_stream, handler, error_handler=handler.ErrorHandler())
xml.sax.parseString(string, handler, error_handler=handler.ErrorHandler())
parse() 
xml.sax.SAXException(msg, exception=None)
xml.sax.SAXParseException(msg, exception, locator)
xml.sax.SAXNotRecognizedException(msg, exception=None)
xml.sax.SAXNotSupportedException(msg, exception=None)
SAXException.getMessage()
SAXException.getException()
ContentHandler.setDocumentLocator(locator)
ContentHandler.startDocument()
setDocumentLocator() 
ContentHandler.endDocument()
ContentHandler.startPrefixMapping(prefix, uri)
startPrefixMapping() 
endPrefixMapping() 
startPrefixMapping() 
endPrefixMapping() 
startPrefixMapping() 
startElement() 
endPrefixMapping() 
endElement() 
ContentHandler.endPrefixMapping(prefix)
startPrefixMapping() 
endElement() 
endPrefixMapping() 
ContentHandler.startElement(name, attrs)
copy() 
ContentHandler.endElement(name)
startElement() 
ContentHandler.startElementNS(name, qname, attrs)
copy() 
ContentHandler.endElementNS(name, qname)
startElementNS() 
ContentHandler.characters(content)
ContentHandler.ignorableWhitespace(whitespace)
ContentHandler.processingInstruction(target, data)
ContentHandler.skippedEntity(name)
DTDHandler.notationDecl(name, publicId, systemId)
DTDHandler.unparsedEntityDecl(name, publicId, systemId, ndata)
EntityResolver.resolveEntity(publicId, systemId)
ErrorHandler.error(exception)
ErrorHandler.fatalError(exception)
ErrorHandler.warning(exception)
xml.sax.saxutils.escape(data, entities={})
xml.sax.saxutils.unescape(data, entities={})
xml.sax.saxutils.quoteattr(data, entities={})
escape() 
quoteattr() 
print("<element attr=%s>" % quoteattr("ab ' cd \" ef"))
xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1', short_empty_elements=False)
xml.sax.saxutils.XMLFilterBase(base)
xml.sax.saxutils.prepare_input_source(source, base='')
parse() 
create_parser() 
xml.sax.make_parser() 
parse() 
parse() 
xml.sax.xmlreader.InputSource(system_id=None)
XMLReader.parse() 
xml.sax.xmlreader.AttributesImpl(attrs)
startElement() 
xml.sax.xmlreader.AttributesNSImpl(attrs, qnames)
startElementNS() 
XMLReader.parse(source)
XMLReader.getContentHandler()
XMLReader.setContentHandler(handler)
XMLReader.getDTDHandler()
XMLReader.setDTDHandler(handler)
XMLReader.getEntityResolver()
XMLReader.setEntityResolver(handler)
XMLReader.getErrorHandler()
XMLReader.setErrorHandler(handler)
XMLReader.setLocale(locale)
XMLReader.getFeature(featurename)
XMLReader.setFeature(featurename, value)
XMLReader.getProperty(propertyname)
XMLReader.setProperty(propertyname, value)
IncrementalParser.feed(data)
IncrementalParser.close()
IncrementalParser.reset()
Locator.getColumnNumber()
Locator.getLineNumber()
Locator.getPublicId()
Locator.getSystemId()
InputSource.setPublicId(id)
InputSource.getPublicId()
InputSource.setSystemId(id)
InputSource.getSystemId()
InputSource.setEncoding(encoding)
InputSource.getEncoding()
InputSource.setByteStream(bytefile)
InputSource.getByteStream()
InputSource.setCharacterStream(charfile)
InputSource.getCharacterStream()
copy()
get()
__contains__()
items()
keys()
values() 
Attributes.getLength()
Attributes.getNames()
Attributes.getType(name)
Attributes.getValue(name)
AttributesNS.getValueByQName(name)
AttributesNS.getNameByQName(name)
AttributesNS.getQNameByName(name)
AttributesNS.getQNames()
ParserCreate() 
xml.parsers.expat.ErrorString(errno)
xml.parsers.expat.ParserCreate(encoding=None, namespace_separator=None)
ISO-8859-1 (Latin1)
chr(0)
xmlparser.Parse(data[, isfinal])
xmlparser.ParseFile(file)
read(nbytes) 
xmlparser.SetBase(base)
ExternalEntityRefHandler() 
NotationDeclHandler()
UnparsedEntityDeclHandler() 
xmlparser.GetBase()
SetBase() 
SetBase() 
xmlparser.GetInputContext()
xmlparser.ExternalEntityParserCreate(context[, encoding])
ExternalEntityRefHandler() 
xmlparser.SetParamEntityParsing(flag)
xmlparser.UseForeignDTD([flag])
Parse() 
ParseFile() 
CharacterDataHandler() 
Parse() 
ParseFile() 
ErrorString() 
xmlparser.XmlDeclHandler(version, encoding, standalone)
xmlparser.StartDoctypeDeclHandler(doctypeName, systemId, publicId, has_internal_subset)
xmlparser.EndDoctypeDeclHandler()
xmlparser.ElementDeclHandler(name, model)
xmlparser.AttlistDeclHandler(elname, attname, type, default, required)
xmlparser.StartElementHandler(name, attributes)
xmlparser.EndElementHandler(name)
xmlparser.ProcessingInstructionHandler(target, data)
xmlparser.CharacterDataHandler(data)
xmlparser.UnparsedEntityDeclHandler(entityName, base, systemId, publicId, notationName)
xmlparser.EntityDeclHandler(entityName, is_parameter_entity, value, base, systemId, publicId, notationName)
xmlparser.NotationDeclHandler(notationName, base, systemId, publicId)
xmlparser.StartNamespaceDeclHandler(prefix, uri)
xmlparser.EndNamespaceDeclHandler(prefix)
xmlparser.CommentHandler(data)
xmlparser.StartCdataSectionHandler()
xmlparser.EndCdataSectionHandler()
xmlparser.DefaultHandler(data)
xmlparser.DefaultHandlerExpand(data)
DefaultHandler() 
xmlparser.NotStandaloneHandler()
xmlparser.ExternalEntityRefHandler(context, base, systemId, publicId)
SetBase() 
ExternalEntityParserCreate(context) 
p = ParserCreate()
p.Parse(some_xml_document)
print("Error:", errors.messages[err.code])
def start_element(name, attrs):
print('Start element:', name, attrs)
def end_element(name):
print('End element:', name)
def char_data(data):
print('Character data:', repr(data))
p = xml.parsers.expat.ParserCreate()
UseForeignDTD() 
audioop.add(fragment1, fragment2, width)
audioop.adpcm2lin(adpcmfragment, width, state)
lin2adpcm() 
audioop.alaw2lin(fragment, width)
audioop.avg(fragment, width)
audioop.avgpp(fragment, width)
audioop.bias(fragment, width, bias)
audioop.byteswap(fragment, width)
audioop.cross(fragment, width)
audioop.findfactor(fragment, reference)
rms(add(fragment, mul(reference, -F))) 
len(fragment) 
audioop.findfit(fragment, reference)
findfactor() 
findfactor() 
audioop.findmax(fragment, length)
rms(fragment[i*2:(i+length)* 2]) 
len(fragment) 
audioop.getsample(fragment, width, index)
audioop.lin2adpcm(fragment, width, state)
lin2adpcm() 
audioop.lin2alaw(fragment, width)
audioop.lin2lin(fragment, width, newwidth)
new_frames = audioop.lin2lin(frames, old_width, 1)
new_frames = audioop.bias(new_frames, 1, 128)
audioop.lin2ulaw(fragment, width)
audioop.max(fragment, width)
audioop.maxpp(fragment, width)
audioop.minmax(fragment, width)
audioop.mul(fragment, width, factor)
audioop.ratecv(fragment, width, nchannels, inrate, outrate, state[, weightA[, weightB]])
ratecv() 
audioop.reverse(fragment, width)
audioop.rms(fragment, width)
sqrt(sum(S_i^2)/n) 
audioop.tomono(fragment, width, lfactor, rfactor)
audioop.tostereo(fragment, width, lfactor, rfactor)
audioop.ulaw2lin(fragment, width)
mul() 
max() 
def mul_stereo(sample, width, lfactor, rfactor):
lsample = audioop.tomono(sample, width, 1, 0)
rsample = audioop.tomono(sample, width, 0, 1)
lsample = audioop.mul(lsample, width, lfactor)
rsample = audioop.mul(rsample, width, rfactor)
lsample = audioop.tostereo(lsample, width, 1, 0)
rsample = audioop.tostereo(rsample, width, 0, 1)
return audioop.add(lsample, rsample, width)
lin2adpcm() 
def echocancel(outputdata, inputdata):
pos = audioop.findmax(outputdata, 800)    
ipos, factor = audioop.findfit(in_test, out_test)
in_test[ipos*2:ipos*2+len(out_test)]
prefill = '\0'*(pos+ipos)*2
postfill = '\0'*(len(inputdata)-len(prefill)-len(outputdata))
outputdata = prefill + audioop.mul(outputdata, 2, -factor) + postfill
return audioop.add(inputdata, outputdata, 2)
aifc.open(file, mode=None)
writeframesraw() 
setnframes() 
open() 
close() 
open() 
aifc.getnchannels()
aifc.getsampwidth()
aifc.getframerate()
aifc.getnframes()
aifc.getcomptype()
aifc.getcompname()
aifc.getparams()
namedtuple() 
aifc.getmarkers()
aifc.getmark(id)
getmarkers() 
aifc.readframes(nframes)
aifc.rewind()
readframes() 
aifc.setpos(pos)
aifc.tell()
aifc.close()
open() 
readframes() 
setpos() 
writeframes() 
writeframesraw() 
aifc.aiff()
aifc.aifc()
aifc.setnchannels(nchannels)
aifc.setsampwidth(width)
aifc.setframerate(rate)
aifc.setnframes(nframes)
aifc.setcomptype(type, name)
aifc.setparams(nchannels, sampwidth, framerate, comptype, compname)
setparams() 
getparams() 
aifc.setmark(id, pos, name)
close() 
aifc.tell()
setmark() 
aifc.writeframes(data)
aifc.writeframesraw(data)
writeframes() 
aifc.close()
sunau.open(file, mode)
open() 
AU_read.close()
AU_read.getnchannels()
AU_read.getsampwidth()
AU_read.getframerate()
AU_read.getnframes()
AU_read.getcomptype()
AU_read.getcompname()
getcomptype() 
AU_read.getparams()
namedtuple() 
AU_read.readframes(n)
AU_read.rewind()
AU_read.setpos(pos)
tell() 
AU_read.tell()
AU_read.getmarkers()
AU_read.getmark(id)
open() 
AU_write.setnchannels(n)
AU_write.setsampwidth(n)
AU_write.setframerate(n)
AU_write.setnframes(n)
AU_write.setcomptype(type, name)
AU_write.setparams(tuple)
AU_write.tell()
AU_read.tell() 
AU_read.setpos() 
AU_write.writeframesraw(data)
AU_write.writeframes(data)
AU_write.close()
writeframes() 
writeframesraw() 
wave.open(file, mode=None)
close() 
open() 
Wave_read.close() 
Wave_write.close() 
open() 
Wave_read.close()
Wave_read.getnchannels()
Wave_read.getsampwidth()
Wave_read.getframerate()
Wave_read.getnframes()
Wave_read.getcomptype()
Wave_read.getcompname()
getcomptype() 
Wave_read.getparams()
namedtuple() 
Wave_read.readframes(n)
Wave_read.rewind()
Wave_read.getmarkers()
Wave_read.getmark(id)
Wave_read.setpos(pos)
Wave_read.tell()
close() 
setnframes() 
setparams() 
writeframesraw() 
writeframes() 
writeframes() 
open() 
Wave_write.close()
Wave_write.setnchannels(n)
Wave_write.setsampwidth(n)
Wave_write.setframerate(n)
Wave_write.setnframes(n)
Wave_write.setcomptype(type, name)
Wave_write.setparams(tuple)
Wave_write.tell()
Wave_read.tell() 
Wave_read.setpos() 
Wave_write.writeframesraw(data)
Wave_write.writeframes(data)
writeframes() 
writeframesraw() 
Format (AIFF/AIFF-C) 
Format (RMFF)
chunk.Chunk(file, align=True, bigendian=True, inclheader=False)
read() 
seek() 
tell() 
getname()
getsize()
close()
close() 
isatty()
seek(pos, whence=0)
tell()
read(size=-1)
skip()
read() 
colorsys.rgb_to_yiq(r, g, b)
colorsys.yiq_to_rgb(y, i, q)
colorsys.rgb_to_hls(r, g, b)
colorsys.hls_to_rgb(h, l, s)
colorsys.rgb_to_hsv(r, g, b)
colorsys.hsv_to_rgb(h, s, v)
colorsys.rgb_to_hsv(0.2, 0.4, 0.4)
colorsys.hsv_to_rgb(0.5, 0.5, 0.4)
imghdr.what(filename, h=None)
what() 
what() 
imghdr.what('bass.gif')
namedtuple() 
sndhdr.what(filename)
whathdr() 
sndhdr.whathdr(filename)
open()
write() 
ioctl() 
ossaudiodev.open(mode)
ossaudiodev.open(device, mode)
read() 
write() 
fileno() 
ossaudiodev.openmixer([device])
setfmt() 
channels() 
speed() 
setparameters() 
setparameters() 
open() 
oss_audio_device.close()
oss_audio_device.fileno()
oss_audio_device.read(size)
read() 
oss_audio_device.write(data)
--- writeall() 
oss_audio_device.writeall(data)
write() 
writeall() 
ioctl() 
setfmt() 
sync() 
ioctl() 
oss_audio_device.nonblock()
oss_audio_device.getfmts()
oss_audio_device.setfmt(format)
getfmts() 
oss_audio_device.channels(nchannels)
oss_audio_device.speed(samplerate)
oss_audio_device.sync()
sync() 
sync() 
oss_audio_device.reset()
reset() 
oss_audio_device.post()
ioctl() 
ioctl() 
oss_audio_device.setparameters(format, nchannels, samplerate[, strict=False])
setfmt() 
channels() 
speed() 
setparameters() 
setfmt() 
channels() 
speed() 
dsp.setparameters(fmt, channels, rate)
fmt = dsp.setfmt(fmt)
channels = dsp.channels(channels)
rate = dsp.rate(rate)
oss_audio_device.bufsize()
oss_audio_device.obufcount()
oss_audio_device.obuffree()
oss_mixer_device.close()
oss_mixer_device.fileno()
oss_mixer_device.controls()
mixer=ossaudiodev.openmixer()
if mixer.controls() & (1 << ossaudiodev.SOUND_MIXER_PCM):
oss_mixer_device.stereocontrols()
controls() 
controls() 
oss_mixer_device.reccontrols()
controls() 
oss_mixer_device.get(control)
oss_mixer_device.set(control, (left, right))
oss_mixer_device.get_recsrc()
oss_mixer_device.set_recsrc(bitmask)
mixer.setrecsrc (1 << ossaudiodev.SOUND_MIXER_MIC)
def perm(l):
if len(l) <= 1:
for i in range(len(l)):
p = perm(s)
r.append(l[i:i+1] + x)
def perm(l):                       
for i in range(len(l)):             
p = perm(l[:i] + l[i+1:])   
r.append(l[i:i+1] + x)
bytesprefix(shortbytes | longbytes)
str() 
repr() 
ascii() 
format() 
__format__() 
He said his name is {repr(name)}.
repr() is equivalent
value = decimal.Decimal("12.34567")
today = datetime(year=2017, month=1, day=27)
newline: {ord('\n')}
newline = ord('\n')
def foo():
str.format() 
open() 
webbrowser.open(url, new=0, autoraise=True)
webbrowser.open_new(url)
webbrowser.open_new_tab(url)
open_new() 
webbrowser.get(using=None)
get() 
get() 
get() 
get() 
Mozilla('mozilla')
Mozilla('mozilla')
Mozilla('netscape')
Galeon('galeon')
Galeon('epiphany')
BackgroundBrowser('skipstone')
Konqueror()
Konqueror()
Konqueror()
BackgroundBrowser('mosaic')
Opera()
Grail()
GenericBrowser('links')
Elinks('elinks')
GenericBrowser('lynx')
GenericBrowser('w3m')
MacOSX('default')
MacOSX('safari')
Chrome('google-chrome')
Chrome('chrome')
Chromium('chromium')
Chromium('chromium-browser')
webbrowser.open_new_tab(url)
webbrowser.open_new(url)
controller.open(url, new=0, autoraise=True)
controller.open_new(url)
open_new() 
controller.open_new_tab(url)
open_new() 
print("Content-Type: text/html")    
print()                             
print("<TITLE>CGI script output</TITLE>")
print("<H1>This is my first CGI script</H1>")
print("Hello, world!")
cgitb.enable()
cgitb.enable(display=0, logdir="/path/to/logdir")
keys() 
len() 
form = cgi.FieldStorage()
print("<H1>Error</H1>")
print("Please fill in the name and addr fields.")
print("<p>name:", form["name"].value)
print("<p>addr:", form["addr"].value)
getvalue() 
getvalue() 
form.getvalue(key) 
getlist() 
value = form.getlist("username")
usernames = ",".join(value)
getvalue() 
read() 
readline() 
line = fileitem.file.readline()
item = form.getvalue("item")
if isinstance(item, list):
user = form.getvalue("user").upper()
getvalue("user") 
upper() 
getfirst() 
getlist() 
FieldStorage.getfirst(name, default=None)
FieldStorage.getlist(name)
form = cgi.FieldStorage()
for item in form.getlist("item"):
do_something(item)
cgi.parse(fp=None, environ=os.environ, keep_blank_values=False, strict_parsing=False, separator="&")
cgi.parse_multipart(fp, pdict, encoding="utf-8", errors="replace", separator="&")
cgi.parse_header(string)
cgi.test()
cgi.print_environ()
cgi.print_form(form)
cgi.print_directory()
cgi.print_environ_usage()
os.system() 
os.popen() 
sys.path.insert(0, "/usr/home/joe/lib/python")
sys.path.insert(0, "/usr/local/lib/python")
test() 
cgi.test()
cgitb.enable()
print("Content-Type: text/plain")
print()
cgitb.enable() 
cgitb.enable()
enable() 
cgitb.enable(display=1, logdir=None, context=5, format="html")
cgitb.text(info, context=5)
sys.exc_info() 
cgitb.html(info, context=5)
sys.exc_info() 
cgitb.handler(info=None)
sys.exc_info() 
sys.exc_info() 
Interface (WSGI) 
wsgiref.util.guess_scheme(environ)
wsgiref.util.request_uri(environ, include_query=True)
wsgiref.util.application_uri(environ)
request_uri() 
wsgiref.util.shift_path_info(environ)
shift_path_info() 
wsgiref.util.setup_testing_defaults(environ)
def simple_app(environ, start_response):
setup_testing_defaults(environ)
headers = [('Content-type', 'text/plain; charset=utf-8')]
start_response(status, headers)
encode("utf-8")
value in environ.items()
with make_server('', 8000, simple_app) as httpd:
print("Serving on port 8000...")
httpd.serve_forever()
wsgiref.util.is_hop_by_hop(header_name)
wsgiref.util.FileWrapper(filelike, blksize=8192)
__getitem__() 
__iter__() 
read() 
read() 
close() 
close() 
close() 
filelike = StringIO("This is an example file-like object"*10)
wrapper = FileWrapper(filelike, blksize=5)
print(chunk)
wsgiref.headers.Headers([headers])
__getitem__() 
get() 
__setitem__() 
setdefault() 
__delitem__() 
__contains__() 
keys() 
values() 
items() 
keys() 
items() 
len() 
items() 
items() 
bytes() 
get_all(name)
add_header(name, value, **_params)
h.add_header('content-disposition', 'attachment', filename='bud.gif')
shift_path_info() 
wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)
with make_server('', 8000, demo_app) as httpd:
print("Serving HTTP on port 8000...")
httpd.serve_forever()
httpd.handle_request()
wsgiref.simple_server.demo_app(environ, start_response)
wsgiref.simple_server.WSGIServer(server_address, RequestHandlerClass)
make_server() 
serve_forever() 
handle_request() 
set_app(application)
get_app()
set_app() 
make_server() 
get_app() 
wsgiref.simple_server.WSGIRequestHandler(request, client_address, server)
make_server() 
get_environ()
get_stderr()
handle()
wsgiref.validate.validator(application)
def simple_app(environ, start_response):
headers = [('Content-type', 'text/plain')]  
start_response(status, headers)
validator_app = validator(simple_app)
with make_server('', 8000, validator_app) as httpd:
print("Listening on port 8000....")
httpd.serve_forever()
CGIHandler().run(app) 
wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True, multiprocess=False)
wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multithread=True, multiprocess=False)
__init__() 
get_stdin() 
get_stderr() 
add_cgi_vars() 
_write() 
_flush() 
run(app)
_write(data)
_flush()
_write() 
get_stdin()
get_stderr()
add_cgi_vars()
get_scheme()
guess_scheme() 
setup_environ()
get_stdin() 
get_stderr() 
add_cgi_vars() 
log_exception(exc_info)
log_exception() 
error_output(environ, start_response)
sys.exc_info() 
sendfile()
_write() 
_flush() 
wsgiref.handlers.read_environ()
def hello_world_app(environ, start_response):
headers = [('Content-type', 'text/plain; charset=utf-8')]  
start_response(status, headers)
with make_server('', 8000, hello_world_app) as httpd:
print("Serving on port 8000...")
httpd.serve_forever()
def app(environ, respond):
fn = os.path.join(path, environ['PATH_INFO'][1:])
if '.' not in fn.split(os.path.sep)[-1]:
fn = os.path.join(fn, 'index.html')
type = mimetypes.guess_type(fn)[0]
if os.path.exists(fn):
respond('200 OK', [('Content-Type', type)])
return util.FileWrapper(open(fn, "rb"))
respond('404 Not Found', [('Content-Type', 'text/plain')])
path = sys.argv[1] if len(sys.argv) > 1 else os.getcwd()
port = int(sys.argv[2]) if len(sys.argv) > 2 else 8000
httpd = simple_server.make_server('', port, app)
print("Serving {} on port {}, control-C to stop".format(path, port))
httpd.serve_forever()
print("Shutting down.")
httpd.server_close()
ssl.SSLContext.load_verify_locations() 
urllib.request.urlopen() 
ssl.SSLContext.load_cert_chain() 
ssl.create_default_context() 
urllib.request.install_opener(opener)
urlopen() 
OpenerDirector.open() 
urllib.request.pathname2url(path)
quote() 
urllib.request.url2pathname(path)
unquote() 
urllib.request.getproxies()
urllib.request.Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)
add_header() 
http.cookiejar.request_host(self) 
urllib.request.HTTPCookieProcessor(cookiejar=None)
urllib.request.ProxyHandler(proxies=None)
getproxies() 
urllib.request.AbstractBasicAuthHandler(password_mgr=None)
urllib.request.HTTPBasicAuthHandler(password_mgr=None)
urllib.request.ProxyBasicAuthHandler(password_mgr=None)
urllib.request.AbstractDigestAuthHandler(password_mgr=None)
urllib.request.HTTPDigestAuthHandler(password_mgr=None)
urllib.request.ProxyDigestAuthHandler(password_mgr=None)
urllib.request.HTTPSHandler(debuglevel=0, context=None, check_hostname=None)
get_method() 
get_method() 
Request.get_method()
Request.add_header(key, val)
Request.add_unredirected_header(key, header)
Request.has_header(header)
Request.remove_header(header)
Request.get_full_url()
Request.set_proxy(host, type)
Request.get_header(header_name, default=None)
Request.header_items()
OpenerDirector.add_handler(handler)
protocol>_open() --- signal
protocol>_error() --- signal
from (non-http) 
protocol>_request() --- signal
protocol>_response() --- signal
OpenerDirector.open(url, data=None[, timeout])
urlopen() 
urlopen() 
open() 
OpenerDirector.error(proto, *args)
urlopen() 
open() 
error() 
BaseHandler.add_parent(director)
BaseHandler.close()
defining <protocol>_request() 
or <protocol>_response() 
BaseHandler.default_open(req)
open() 
protocol>_open(req)
default_open() 
BaseHandler.unknown_open(req)
default_open() 
BaseHandler.http_error_default(req, fp, code, msg, hdrs)
urlopen() 
BaseHandler.http_error_<nnn>(req, fp, code, msg, hdrs)
http_error_default() 
protocol>_request(req)
protocol>_response(req, response)
urlopen() 
urlopen() 
HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)
HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)
HTTPRedirectHandler.http_error_302(req, fp, code, msg, hdrs)
http_error_301() 
HTTPRedirectHandler.http_error_303(req, fp, code, msg, hdrs)
http_error_301() 
HTTPRedirectHandler.http_error_307(req, fp, code, msg, hdrs)
http_error_301() 
protocol>_open(request)
HTTPPasswordMgr.add_password(realm, uri, user, passwd)
HTTPPasswordMgr.find_user_password(realm, authuri)
HTTPPasswordMgrWithPriorAuth.add_password(realm, uri, user, passwd, is_authenticated=False)
HTTPPasswordMgr.add_password() 
HTTPPasswordMgrWithPriorAuth.find_user_password(realm, authuri)
HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)
HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)
AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)
HTTPBasicAuthHandler.http_error_401(req, fp, code, msg, hdrs)
ProxyBasicAuthHandler.http_error_407(req, fp, code, msg, hdrs)
AbstractDigestAuthHandler.http_error_auth_reqed(authreq, host, req, headers)
HTTPDigestAuthHandler.http_error_401(req, fp, code, msg, hdrs)
ProxyDigestAuthHandler.http_error_407(req, fp, code, msg, hdrs)
HTTPHandler.http_open(req)
req.has_data() 
HTTPSHandler.https_open(req)
req.has_data() 
FileHandler.file_open(req)
DataHandler.data_open(req)
FTPHandler.ftp_open(req)
CacheFTPHandler.setTimeout(t)
CacheFTPHandler.setMaxConns(m)
UnknownHandler.unknown_open()
HTTPErrorProcessor.http_response(request, response)
HTTPErrorProcessor.https_response(request, response)
http_response() 
with urllib.request.urlopen('http://www.python.org/') as f:
print(f.read(300))
with urllib.request.urlopen('http://www.python.org/') as f:
print(f.read(100).decode('utf-8'))
f = urllib.request.urlopen('http://www.python.org/')
print(f.read(100).decode('utf-8'))
with urllib.request.urlopen(req) as f:
print(f.read().decode('utf-8'))
data = sys.stdin.read()
print('Content-type: text/plain\n\nGot Data: "%s"' % data)
req = urllib.request.Request(url='http://localhost:8080', data=DATA,method='PUT')
with urllib.request.urlopen(req) as f:
print(f.status)
print(f.reason)
auth_handler = urllib.request.HTTPBasicAuthHandler()
opener = urllib.request.build_opener(auth_handler)
urllib.request.install_opener(opener)
urllib.request.urlopen('http://www.example.com/login.html')
build_opener() 
proxy_handler = urllib.request.ProxyHandler({'http': 'http://www.example.com:3128/'})
proxy_auth_handler = urllib.request.ProxyBasicAuthHandler()
proxy_auth_handler.add_password('realm', 'host', 'username', 'password')
opener = urllib.request.build_opener(proxy_handler, proxy_auth_handler)
opener.open('http://www.example.com/login.html')
req = urllib.request.Request('http://www.example.com/')
req.add_header('Referer', 'http://www.python.org/')
req.add_header('User-Agent', 'urllib-example/0.1 (Contact: . . .)')
r = urllib.request.urlopen(req)
opener = urllib.request.build_opener()
opener.addheaders = [('User-agent', 'Mozilla/5.0')]
opener.open('http://www.example.com/')
urlopen() 
OpenerDirector.open()
params = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
with urllib.request.urlopen(url) as f:
print(f.read().decode('utf-8'))
data = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
data = data.encode('ascii')
with urllib.request.urlopen("http://requestb.in/xrbl82xr", data) as f:
print(f.read().decode('utf-8'))
opener = urllib.request.FancyURLopener(proxies)
with opener.open("http://www.python.org") as f:
f.read().decode('utf-8')
opener = urllib.request.FancyURLopener({})
with opener.open("http://www.python.org/") as f:
f.read().decode('utf-8')
urllib.request.urlretrieve(url, filename=None, reporthook=None, data=None)
urlopen() 
info() 
urlopen() 
local_filename, headers = urllib.request.urlretrieve('http://python.org/')
html = open(local_filename)
html.close()
urllib.parse.urlencode() 
urlretrieve() 
urllib.request.urlcleanup()
urlretrieve() 
urllib.request.URLopener(proxies=None, **x509)
urlopen() 
open(fullurl, data=None)
open_unknown() 
urlopen() 
open_unknown(fullurl, data=None)
retrieve(url, filename=None, reporthook=None, data=None)
tempfile.mktemp() 
urllib.parse.urlencode() 
http_error_default() 
prompt_user_passwd() 
prompt_user_passwd() 
prompt_user_passwd(host, realm)
urlretrieve() 
urlopen() 
urlretrieve() 
urlopen() 
urlretrieve() 
urllib.parse.urlparse(urlstring, scheme='', allow_fragments=True)
o = urlparse('http://www.cwi.nl:80/%7Eguido/Python.html')
o.geturl()
urlparse('//www.cwi.nl:80/%7Eguido/Python.html')
urlparse('www.cwi.nl/%7Eguido/Python.html')
urlparse('help/Python.html')
u = urlparse('//www.cwi.nl:80/%7Eguido/Python.html')
u._replace(scheme='http')
urllib.parse.parse_qs(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace', max_num_fields=None, separator='&')
bytes.decode() 
urllib.parse.urlencode() 
urllib.parse.parse_qsl(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace', max_num_fields=None, separator='&')
bytes.decode() 
urllib.parse.urlencode() 
urllib.parse.urlunparse(parts)
urlparse() 
urllib.parse.urlsplit(urlstring, scheme='', allow_fragments=True)
urlparse()
urlparse() 
urllib.parse.urlunsplit(parts)
urlsplit() 
urllib.parse.urljoin(base, url, allow_fragments=True)
URL(url)
URL ("絶対 URL") 
urljoin('http://www.cwi.nl/%7Eguido/Python.html', 'FAQ.html')
urlparse() 
urlsplit() 
urlunsplit() 
urllib.parse.urldefrag(url)
urllib.parse.unwrap(url)
encode() 
decode() 
encode() 
decode() 
urlparse()
urlsplit()
urldefrag() 
urllib.parse.SplitResult.geturl()
urldefrag() 
urlsplit() 
urlparse() 
r1 = urlsplit(url)
r1.geturl()
r2 = urlsplit(r1.geturl())
r2.geturl()
urllib.parse.DefragResult(url, fragment)
urldefrag() 
encode() 
urllib.parse.ParseResult(scheme, netloc, path, params, query, fragment)
urlparse() 
encode() 
urllib.parse.SplitResult(scheme, netloc, path, query, fragment)
urlsplit() 
encode() 
urllib.parse.DefragResultBytes(url, fragment)
urldefrag() 
decode() 
urllib.parse.ParseResultBytes(scheme, netloc, path, params, query, fragment)
urlparse() 
decode() 
urllib.parse.SplitResultBytes(scheme, netloc, path, query, fragment)
urlsplit() 
decode() 
urllib.parse.quote(string, safe='/', encoding=None, errors=None)
str.encode() 
quote(string, safe, encoding, errors) 
quote_from_bytes(string.encode(encoding, errors), safe) 
quote('/El Niño/') 
urllib.parse.quote_plus(string, safe='', encoding=None, errors=None)
quote_plus('/El Niño/') 
urllib.parse.quote_from_bytes(bytes, safe='/')
quote() 
urllib.parse.unquote(string, encoding='utf-8', errors='replace')
unquote('/El%20Ni%C3%B1o/') 
urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')
unquote_plus('/El+Ni%C3%B1o/') 
urllib.parse.unquote_to_bytes(string)
unquote_to_bytes('a%26%EF') 
urllib.parse.urlencode(query, doseq=False, safe='', encoding=None, errors=None, quote_via=quote_plus)
urlopen() 
quote_plus() 
+' 文字に、 '/' 文字は %2F にクォートされます。これは GET リクエストの標準に準拠します (application/x-www-form-urlencoded)。 quote_via として渡すことができる別の関数は quote() です。それはスペースを %20 にエンコードし、 '
parse_qs() 
parse_qsl() 
Identifiers (URI)
Name (URN) 
Locator (URL) 
Locators (URL)
urlopen() 
urllib.error.ContentTooShortError(msg, content)
urlretrieve() 
urllib.robotparser.RobotFileParser(url='')
set_url(url)
read()
parse(lines)
can_fetch(useragent, url)
mtime()
modified()
crawl_delay(useragent)
request_rate(useragent)
site_maps()
rp = urllib.robotparser.RobotFileParser()
rp.set_url("http://www.musi-cal.com/robots.txt")
rp.read()
rrate = rp.request_rate("*")
rp.crawl_delay("*")
rp.can_fetch("*", "http://www.musi-cal.com/cgi-bin/search?city=San+Francisco")
rp.can_fetch("*", "http://www.musi-cal.com/")
list(HTTPStatus)
7.1 (Experimental)
3 (Experimental)
8.1 (Experimental)
7.2 (Experimental)
7 (Experimental)
h1 = http.client.HTTPConnection('www.python.org')
h2 = http.client.HTTPConnection('www.python.org:80')
h3 = http.client.HTTPConnection('www.python.org', 80)
h4 = http.client.HTTPConnection('www.python.org', 80, timeout=10)
ssl._create_unverified_context() 
ssl.SSLContext.load_cert_chain() 
ssl.create_default_context() 
http.client.HTTPResponse(sock, debuglevel=0, method=None, url=None)
http.client.parse_headers(fp)
parse_headers() 
BadStatusLine('') 
HTTPConnection.getresponse()
HTTPConnection.set_debuglevel(level)
HTTPConnection.set_tunnel(host, port=None, headers=None)
set_tunnel() 
conn = http.client.HTTPSConnection("localhost", 8080)
conn.set_tunnel("www.python.org")
conn.request("HEAD","/index.html")
HTTPConnection.connect()
HTTPConnection.close()
request() 
HTTPConnection.putrequest(method, url, skip_host=False, skip_accept_encoding=False)
HTTPConnection.send(data)
endheaders() 
getresponse() 
HTTPResponse.read([amt])
HTTPResponse.readinto(b)
len(b) 
HTTPResponse.getheader(name, default=None)
HTTPResponse.getheaders()
HTTPResponse.fileno()
HTTPResponse.geturl()
HTTPResponse.info()
HTTPResponse.getstatus()
conn = http.client.HTTPSConnection("www.python.org")
conn.request("GET", "/")
r1 = conn.getresponse()
print(r1.status, r1.reason)
data1 = r1.read()  
conn.request("GET", "/")
r1 = conn.getresponse()
while chunk := r1.read(200):
print(repr(chunk))
conn = http.client.HTTPSConnection("docs.python.org")
conn.request("GET", "/parrot.spam")
r2 = conn.getresponse()
print(r2.status, r2.reason)
data2 = r2.read()
conn.close()
conn = http.client.HTTPSConnection("www.python.org")
conn.request("HEAD", "/")
res = conn.getresponse()
print(res.status, res.reason)
data = res.read()
print(len(data))
params = urllib.parse.urlencode({'@number': 12524, '@type': 'issue', '@action': 'show'})
conn = http.client.HTTPConnection("bugs.python.org")
conn.request("POST", "", params, headers)
response = conn.getresponse()
print(response.status, response.reason)
data = response.read()
conn.close()
conn = http.client.HTTPConnection("localhost", 8080)
conn.request("PUT", "/file", BODY)
response = conn.getresponse()
print(response.status, response.reason)
ftp = FTP('ftp.us.debian.org')  
ftp.login()                     
ftp.cwd('debian')               
ftp.retrlines('LIST')           
with open('README', 'wb') as fp:
ftp.retrbinary('RETR README', fp.write)
ftp.quit()
with FTP("ftp1.at.proftpd.org") as ftp:
ftp.login()
ftp.dir()
prot_p() 
ssl.SSLContext.load_cert_chain() 
ssl.create_default_context() 
ftps = FTP_TLS('ftp.pureftpd.org')
ftps.login()
ftps.prot_p()
ftps.nlst()
FTP.set_debuglevel(level)
FTP.connect(host='', port=0, timeout=None, source_address=None)
FTP.getwelcome()
FTP.login(user='anonymous', passwd='', acct='')
FTP.abort()
FTP.sendcmd(cmd)
FTP.voidcmd(cmd)
FTP.retrbinary(cmd, callback, blocksize=8192, rest=None)
FTP.retrlines(cmd, callback=None)
FTP.set_pasv(val)
FTP.storbinary(cmd, fp, blocksize=8192, callback=None, rest=None)
FTP.storlines(cmd, fp, callback=None)
FTP.transfercmd(cmd, rest=None)
FTP.ntransfercmd(cmd, rest=None)
transfercmd() 
transfercmd() 
FTP.mlsd(path="", facts=[])
mlsd() 
retrlines() 
mlsd() 
FTP.rename(fromname, toname)
FTP.delete(filename)
FTP.cwd(pathname)
FTP.mkd(pathname)
FTP.pwd()
FTP.rmd(dirname)
FTP.size(filename)
FTP.quit()
close() 
FTP.close()
quit() 
close() 
quit() 
login() 
FTP_TLS.auth()
FTP_TLS.ccc()
FTP_TLS.prot_p()
FTP_TLS.prot_c()
poplib.POP3(host, port=POP3_PORT[, timeout])
poplib.POP3_SSL(host, port=POP3_SSL_PORT, keyfile=None, certfile=None, timeout=None, context=None)
ssl.SSLContext.load_cert_chain() 
ssl.create_default_context() 
POP3.set_debuglevel(level)
POP3.getwelcome()
POP3.capa()
POP3.user(username)
POP3.pass_(password)
quit() 
POP3.apop(user, secret)
POP3.rpop(user)
POP3.stat()
POP3.list([which])
POP3.retr(which)
POP3.dele(which)
POP3.rset()
POP3.noop()
POP3.quit()
POP3.top(which, howmuch)
POP3.uidl(which=None)
POP3.utf8()
POP3.stls(context=None)
M = poplib.POP3('localhost')
M.user(getpass.getuser())
M.pass_(getpass.getpass())
numMessages = len(M.list()[1])
for i in range(numMessages):
for j in M.retr(i+1)[1]:
print(j)
imaplib.IMAP4(host='', port=IMAP4_PORT, timeout=None)
with IMAP4("domain.org") as M:
M.noop()
imaplib.IMAP4_SSL(host='', port=IMAP4_SSL_PORT, keyfile=None, certfile=None, ssl_context=None, timeout=None)
ssl.SSLContext.load_cert_chain() 
ssl.create_default_context() 
imaplib.IMAP4_stream(command)
subprocess.Popen() 
imaplib.Internaldate2tuple(datestr)
imaplib.Int2AP(num)
imaplib.ParseFlags(flagstr)
imaplib.Time2Internaldate(date_time)
IMAP4.append(mailbox, flags, date_time, message)
IMAP4.authenticate(mechanism, authobject)
data = authobject(response)
IMAP4.check()
IMAP4.close()
IMAP4.copy(message_set, new_mailbox)
IMAP4.create(mailbox)
IMAP4.delete(mailbox)
IMAP4.deleteacl(mailbox, who)
IMAP4.enable(capability)
enable() 
IMAP4.expunge()
IMAP4.fetch(message_set, message_parts)
IMAP4.getacl(mailbox)
IMAP4.getannotation(mailbox, entry, attribute)
IMAP4.getquota(root)
IMAP4.getquotaroot(mailbox)
IMAP4.list([directory[, pattern]])
IMAP4.login(user, password)
IMAP4.login_cram_md5(user, password)
IMAP4.logout()
IMAP4.lsub(directory='""', pattern='*')
IMAP4.myrights(mailbox)
IMAP4.namespace()
IMAP4.noop()
IMAP4.open(host, port, timeout=None)
IMAP4.partial(message_num, message_part, start, length)
IMAP4.proxyauth(user)
IMAP4.read(size)
IMAP4.readline()
IMAP4.recent()
IMAP4.rename(oldmailbox, newmailbox)
IMAP4.response(code)
typ, msgnums = M.search(None, 'FROM', '"LDJ"')
typ, msgnums = M.search(None, '(FROM "LDJ")')
IMAP4.select(mailbox='INBOX', readonly=False)
IMAP4.send(data)
IMAP4.setacl(mailbox, who, what)
IMAP4.setquota(root, limits)
IMAP4.shutdown()
IMAP4.logout() 
IMAP4.socket()
IMAP4.starttls(ssl_context=None)
IMAP4.status(mailbox, names)
IMAP4.store(message_set, command, flag_list)
typ, data = M.search(None, 'ALL')
for num in data[0].split():
M.store(num, '+FLAGS', '\\Deleted')
M.expunge()
IMAP4.subscribe(mailbox)
IMAP4.unsubscribe(mailbox)
IMAP4.unselect()
M = imaplib.IMAP4()
M.login(getpass.getuser(), getpass.getpass())
M.select()
typ, data = M.search(None, 'ALL')
for num in data[0].split():
typ, data = M.fetch(num, '(RFC822)')
print('Message %s\n%s\n' % (num, data[0][1]))
M.close()
M.logout()
s = nntplib.NNTP('news.gmane.io')
resp, count, first, last, name = s.group('gmane.comp.python.committers')
print('Group', name, 'has', count, 'articles, range', first, 'to', last)
resp, overviews = s.over((last - 9, last))
print(id, nntplib.decode_header(over['subject']))
s.quit()
s = nntplib.NNTP('news.gmane.io')
f = open('article.txt', 'rb')
s.post(f)
s.quit()
nntplib.NNTP(host, port=119, user=None, password=None, readermode=None, usenetrc=False[, timeout])
with NNTP('news.gmane.io') as n:
n.group('gmane.comp.python.committers')
nntplib.NNTP_SSL(host, port=563, user=None, password=None, ssl_context=None, readermode=None, usenetrc=False[, timeout])
connect() 
socket.getfqdn() 
connect() 
with SMTP("domain.org") as smtp:
smtp.noop()
starttls() 
ssl.SSLContext.load_cert_chain() 
ssl.create_default_context() 
smtplib.LMTP(host='', port=LMTP_PORT, local_hostname=None, source_address=None[, timeout])
SMTP.sendmail() 
SMTP.set_debuglevel(level)
SMTP.docmd(cmd, args='')
SMTP.connect(host='localhost', port=0)
SMTP.helo(name='')
sendmail() 
SMTP.ehlo(name='')
has_extn() 
has_extn() 
sendmail() 
SMTP.ehlo_or_helo_if_needed()
SMTP.has_extn(name)
SMTP.verify(address)
data = authobject(challenge=None)
SMTP.starttls(keyfile=None, certfile=None, context=None)
ehlo() 
ssl.SSLContext.load_cert_chain() 
ssl.create_default_context() 
mail() 
rcpt() 
data() 
SMTP.quit()
def prompt(prompt):
return input(prompt).strip()
fromaddr = prompt("From: ")
toaddrs  = prompt("To: ").split()
print("Enter message, end with ^D (Unix) or ^Z (Windows):")
join(toaddrs)
line = input()
print("Message length is", len(msg))
server = smtplib.SMTP('localhost')
server.set_debuglevel(1)
server.sendmail(fromaddr, toaddrs, msg)
server.quit()
send_message() 
SMTP (email) 
smtpd.SMTPServer(localaddr, remoteaddr, data_size_limit=33554432, map=None, enable_SMTPUTF8=False, decode_data=False)
process_message(peer, mailfrom, rcpttos, data, **kwargs)
process_message() 
smtpd.DebuggingServer(localaddr, remoteaddr)
smtpd.PureProxy(localaddr, remoteaddr)
smtpd.MailmanProxy(localaddr, remoteaddr)
smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432, map=None, enable_SMTPUTF8=False, decode_data=False)
telnetlib.Telnet(host=None, port=0[, timeout])
open() 
close() 
with Telnet('localhost', 23) as tn:
tn.interact()
Telnet.read_until(expected, timeout=None)
Telnet.read_all()
Telnet.read_some()
Telnet.read_very_eager()
Telnet.read_eager()
Telnet.read_lazy()
Telnet.read_very_lazy()
Telnet.read_sb_data()
Telnet.open(host, port=0[, timeout])
Telnet.msg(msg, *args)
Telnet.set_debuglevel(debuglevel)
Telnet.close()
Telnet.get_socket()
Telnet.fileno()
Telnet.write(buffer)
Telnet.interact()
Telnet.mt_interact()
interact() 
Telnet.expect(list, timeout=None)
Telnet.set_option_negotiation_callback(callback)
command (DO/DONT/WILL/WONT)
user = input("Enter your remote account: ")
word = getpass.getpass()
tn = telnetlib.Telnet(HOST)
user.encode('ascii') + b
word.encode('ascii') + b
print(tn.read_all().decode('ascii'))
uuid1()
uuid3()
uuid4()
uuid5()
uuid1() 
uuid4() 
uuid1() 
uuid4() 
uuid1() 
UUID('{12345678-1234-5678-1234-567812345678}')
UUID('12345678123456781234567812345678')
UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
UUID(int=0x12345678123456781234567812345678)
str(uuid) 
uuid.getnode()
uuid.uuid1(node=None, clock_seq=None)
getnode() 
uuid.uuid3(namespace, name)
uuid.uuid4()
uuid.uuid5(namespace, name)
uuid3() 
uuid5() 
IDentifier (UUID) 
uuid.uuid1()
UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')
uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')
uuid.uuid4()
UUID('16fd2706-8baf-433b-82eb-8c7fada847da')
uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')
x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')
str(x)
uuid.UUID(bytes=x.bytes)
UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')
http.cookies.BaseCookie([input])
load() 
http.cookies.SimpleCookie([input])
BaseCookie.value_decode(val)
BaseCookie.value_encode(val)
value_encode() 
value_decode() 
BaseCookie.output(attrs=None, header='Set-Cookie:', sep='\r\n')
output() 
BaseCookie.js_output(attrs=None)
output() 
BaseCookie.load(rawdata)
for k, v in rawdata.items():
__eq__() 
set() 
Morsel.set(key, value, coded_value)
Morsel.isReservedKey(K)
Morsel.output(attrs=None, header='Set-Cookie:')
Morsel.js_output(attrs=None)
output() 
Morsel.OutputString(attrs=None)
output() 
Morsel.update(values)
Morsel.copy(value)
Morsel.setdefault(key, value=None)
dict.setdefault() 
C = cookies.SimpleCookie()
print(C) 
print(C.output()) 
C = cookies.SimpleCookie()
print(C.output(header="Cookie:"))
print(C.output(attrs=[], header="Cookie:"))
C = cookies.SimpleCookie()
C.load("chips=ahoy; vienna=finger") 
print(C)
C = cookies.SimpleCookie()
C.load('keebler="E=everybody; L=\\"Loves\\"; fudge=\\012;";')
print(C)
C = cookies.SimpleCookie()
print(C)
C = cookies.SimpleCookie()
C = cookies.SimpleCookie()
C["number"] = str(7)
print(C)
http.cookiejar.CookieJar(policy=None)
http.cookiejar.FileCookieJar(filename, delayload=None, policy=None)
load() 
revert() 
http.cookiejar.DefaultCookiePolicy(blocked_domains=None, allowed_domains=None, netscape=True, rfc2965=False, rfc2109_as_netscape=None, hide_cookie2=False, strict_domain=False, strict_rfc2965_unverifiable=True, strict_ns_unverifiable=False, strict_ns_domain=DefaultCookiePolicy.DomainLiberal, strict_ns_set_initial_dollar=False, strict_ns_set_path=False, secure_protocols=("https", "wss"))
CookieJar.add_cookie_header(request)
get_origin_req_host() 
CookieJar.extract_cookies(response, request)
CookiePolicy.set_ok() 
get_origin_req_host() 
CookieJar.set_policy(policy)
CookieJar.make_cookies(response, request)
extract_cookies() 
CookieJar.set_cookie_if_ok(cookie, request)
CookieJar.set_cookie(cookie)
CookieJar.clear([domain[, path[, name]]])
CookieJar.clear_session_cookies()
save() 
FileCookieJar.save(filename=None, ignore_discard=False, ignore_expires=False)
load() 
revert() 
FileCookieJar.load(filename=None, ignore_discard=False, ignore_expires=False)
save() 
FileCookieJar.revert(filename=None, ignore_discard=False, ignore_expires=False)
revert() 
load() 
http.cookiejar.MozillaCookieJar(filename, delayload=None, policy=None)
http.cookiejar.LWPCookieJar(filename, delayload=None, policy=None)
CookiePolicy.set_ok(cookie, request)
CookieJar.extract_cookies() 
CookiePolicy.return_ok(cookie, request)
CookieJar.add_cookie_header() 
CookiePolicy.domain_return_ok(domain, request)
domain_return_ok() 
path_return_ok() 
return_ok() 
domain_return_ok() 
path_return_ok() 
path_return_ok() 
return_ok() 
path_return_ok() 
return_ok() 
return_ok() 
domain_return_ok() 
path_return_ok() 
return_ok() 
CookiePolicy.path_return_ok(path, request)
domain_return_ok() 
MyCookiePolicy(http.cookiejar.DefaultCookiePolicy)
def set_ok(self, cookie, request):
if not http.cookiejar.DefaultCookiePolicy.set_ok(self, cookie, request):
if i_dont_want_to_store_this_cookie(cookie):
blocked_domains() 
set_blocked_domains() 
DefaultCookiePolicy.blocked_domains()
DefaultCookiePolicy.set_blocked_domains(blocked_domains)
DefaultCookiePolicy.is_blocked(domain)
DefaultCookiePolicy.allowed_domains()
DefaultCookiePolicy.set_allowed_domains(allowed_domains)
DefaultCookiePolicy.is_not_allowed(domain)
is_expired() 
Cookie.has_nonstandard_attr(name)
Cookie.get_nonstandard_attr(name, default=None)
Cookie.set_nonstandard_attr(name, value)
Cookie.is_expired(now=None)
cj = http.cookiejar.CookieJar()
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
r = opener.open("http://example.com/")
cj = http.cookiejar.MozillaCookieJar()
cj.load(os.path.join(os.path.expanduser("~"), ".netscape", "cookies.txt"))
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
r = opener.open("http://example.com/")
cj = CookieJar(policy)
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
r = opener.open("http://example.com/")
xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler, logRequests=True, allow_none=False, encoding=None, bind_and_activate=True, use_builtin_types=False)
server_bind() 
server_activate() 
loads() 
xmlrpc.server.CGIXMLRPCRequestHandler(allow_none=False, encoding=None, use_builtin_types=False)
loads() 
SimpleXMLRPCServer.register_function(function=None, name=None)
register_function() 
SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)
register_function() 
_dispatch() 
_dispatch() 
_dispatch(self, method, params) 
func(*params) 
_dispatch() 
_dispatch() 
_dispatch() 
SimpleXMLRPCServer.register_introspection_functions()
SimpleXMLRPCServer.register_multicall_functions()
class RequestHandler(SimpleXMLRPCRequestHandler
rpc_paths = ('/RPC2',)
server.register_introspection_functions()
pow() 
server.register_function(pow)
def adder_function(x, y):
server.register_function(adder_function, 'add')
def mul(self, x, y):
server.register_instance(MyFuncs())
server.serve_forever()
s = xmlrpc.client.ServerProxy('http://localhost:8000')
print(s.pow(2,3))  
print(s.add(2,3))  
print(s.mul(5,2))  
print(s.system.listMethods())
register_function() 
class RequestHandler(SimpleXMLRPCRequestHandler
rpc_paths = ('/RPC2',)
server.register_introspection_functions()
pow() 
server.register_function(pow)
server.register_function(name='add')
def adder_function(x, y):
def mul(x, y):
server.serve_forever()
def getData(self):
def getCurrentTime():
return datetime.datetime.now()
with SimpleXMLRPCServer(("localhost", 8000)) as server:
server.register_function(pow)
server.register_function(lambda x,y: x+y, 'add')
server.register_instance(ExampleService(), allow_dotted_names=True)
server.register_multicall_functions()
print('Serving XML-RPC on localhost port 8000')
server.serve_forever()
print("\nKeyboard interrupt received, exiting.")
sys.exit(0)
server = ServerProxy("http://localhost:8000")
print(server.currentTime.getCurrentTime())
print("ERROR", v)
multi = MultiCall(server)
multi.getData()
multi.pow(2,9)
multi.add(1,2)
for response in multi():
print(response)
print("ERROR", v)
CGIXMLRPCRequestHandler.register_function(function=None, name=None)
register_function() 
CGIXMLRPCRequestHandler.register_instance(instance)
register_function() 
_dispatch() 
_dispatch() 
_dispatch() 
CGIXMLRPCRequestHandler.register_introspection_functions()
CGIXMLRPCRequestHandler.register_multicall_functions()
CGIXMLRPCRequestHandler.handle_request(request_text=None)
def mul(self, x, y):
handler = CGIXMLRPCRequestHandler()
handler.register_function(pow)
handler.register_function(lambda x,y: x+y, 'add')
handler.register_introspection_functions()
handler.register_instance(MyFuncs())
handler.handle_request()
xmlrpc.server.DocXMLRPCServer(addr, requestHandler=DocXMLRPCRequestHandler, logRequests=True, allow_none=False, encoding=None, bind_and_activate=True, use_builtin_types=True)
DocXMLRPCServer.set_server_title(server_title)
DocXMLRPCServer.set_server_name(server_name)
DocXMLRPCServer.set_server_documentation(server_documentation)
DocCGIXMLRPCRequestHandler.set_server_title(server_title)
DocCGIXMLRPCRequestHandler.set_server_name(server_name)
DocCGIXMLRPCRequestHandler.set_server_documentation(server_documentation)
repr() 
+ (starred_expression | yield_expression)
inst = Cls()
property() 
__setitem__() 
print(x)
augop (expression_list | yield_expression)
a[i] += f(x) 
f(x) 
__setitem__() 
__setattr__() 
raise AssertionError(expression2)
def f(arg): 
nothing (yet)
methods (yet)
with_traceback() 
raise Exception("foo occurred").with_traceback(tracebackobj)
print(1 / 0)
raise RuntimeError("Something bad happened") from exc
print(1 / 0)
raise RuntimeError("Something bad happened")
print(1 / 0)
raise RuntimeError("Something bad happened") from None
exec() 
compile() 
compile() 
exec() 
eval() 
compile() 
tkinter.Tk(screenName=None, baseName=None, className='Tk', useTk=1)
tkinter.Tcl(screenName=None, baseName=None, className='Tk', useTk=0)
Tcl() 
Tcl() 
loadtk() 
Application(tk.Frame)
def __init__(self, master=None):
super().__init__(master)
self.pack()
self.create_widgets()
def create_widgets(self):
self.hi_there = tk.Button(self)
self.hi_there["text"] = "Hello World\n(click me)"
self.hi_there.pack(side="top")
self.quit.pack(side="bottom")
def say_hi(self):
print("hi there, everyone!")
root = tk.Tk()
app = Application(master=root)
app.mainloop()
someAction(fred, someOptions) 
fred.someAction(someOptions) 
fred = Button()
fred = Button(panel)
config() 
fred = Button(panel, fg="red")
fred.config(fg="red")
fred.invoke()
fred.pack(side="left")
_tkinter (C)
Tk (C)
Xlib (C)
fred = Button(self, fg="red", bg="blue")
config()
fred.config(fg="red", bg="blue")
options(3) 
config() 
keys() 
config() 
print(fred.config())
pack() 
pack() 
fred.pack()                     
fred.pack(side="left")
fred.pack(expand=1)
get() 
set() 
App(tk.Frame)
def __init__(self, master):
super().__init__(master)
self.pack()
self.entrythingy = tk.Entry()
self.entrythingy.pack()
self.contents = tk.StringVar()
self.contents.set("this is a variable")
def print_contents(self, event):
self.contents.get()
root = tk.Tk()
myapp = App(root)
myapp.mainloop()
_root() 
App(tk.Frame)
def __init__(self, master=None):
super().__init__(master)
self.pack()
myapp = App()
myapp.master.title("My Do-Nothing Application")
myapp.master.maxsize(1000, 400)
myapp.mainloop()
def print_it():
print("hi there")
set() 
def bind(self, sequence, func, add=''):
def turn_red(self, event):
self.button.bind("<Enter>", self.turn_red)
turn_red() 
menu.invoke()
menu.entryconfig()
menu.activate() 
widget = tkinter.Tk()
widget.tk.createfilehandler(file, mask, callback)
widget.tk.deletefilehandler(file)
read() 
readline() 
recv() 
recvfrom() 
os.read(file.fileno(), maxbytecount) 
Widget.tk.createfilehandler(file, mask, func)
fileno() 
callback(file, mask)
Widget.tk.deletefilehandler(file)
tkinter.scrolledtext.ScrolledText(master=None, **kw)
l1 = tkinter.Label(text="Test", fg="black", bg="white")
l2 = tkinter.Label(text="Test", fg="black", bg="white")
style = ttk.Style()
style.configure("BW.TLabel", foreground="black", background="white")
l1 = ttk.Label(text="Test", style="BW.TLabel")
l2 = ttk.Label(text="Test", style="BW.TLabel")
Scrollbar.set() 
Style.map() 
Widget.state() 
tkinter.Widget.cget() 
tkinter.Widget.configure() 
identify(x, y)
instate(statespec, callback=None, *args, **kw)
state(statespec=None)
Widget.cget()
Widget.configure()
Widget.identify()
Widget.instate()
Widget.state()
Entry.bbox()
Entry.delete()
Entry.icursor()
Entry.index()
Entry.insert()
Entry.selection()
Entry.xview()
current(newindex=None)
get()
set(value)
get()
set(value)
grid() 
Notebook.enable_traversal() 
Notebook.index() 
add(child, **kw)
forget(tab_id)
hide(tab_id)
add() 
identify(x, y)
index(tab_id)
insert(pos, child, **kw)
select(tab_id=None)
tab(tab_id, option=None, **kw)
tabs()
enable_traversal()
start(interval=None)
Progressbar.step() 
step(amount=None)
stop()
Progressbar.start() 
Treeview.xview() 
Treeview.yview() 
Treeview.focus() 
Treeview.selection() 
bbox(item, column=None)
get_children(item=None)
set_children(item, *newchildren)
column(column, option=None, **kw)
detach(*items)
exists(item)
focus(item=None)
heading(column, option=None, **kw)
identify(component, x, y)
identify_row(y)
identify_column(x)
identify_region(x, y)
identify_element(x, y)
index(item)
insert(parent, index, iid=None, **kw)
item(item, option=None, **kw)
move(item, parent, index)
next(item)
parent(item)
prev(item)
reattach(item, parent, index)
Treeview.move() 
see(item)
selection()
selection() 
selection_set(*items)
selection_add(*items)
selection_remove(*items)
selection_toggle(*items)
set(item, column=None, value=None)
tag_bind(tagname, sequence=None, callback=None)
tag_configure(tagname, option=None, **kw)
tag_has(tagname, item=None)
xview(*args)
yview(*args)
Misc.winfo_class() (somewidget.winfo_class()) 
configure(style, query_opt=None, **kw)
root = tkinter.Tk()
ttk.Style().configure
btn = ttk.Button(text="Sample")
btn.pack()
root.mainloop()
map(style, query_opt=None, **kw)
root = tkinter.Tk()
style = ttk.Style()
foreground=[('pressed', 'red'), ('active', 'blue')]
background=[('pressed', '!disabled', 'black'), ('active', 'white')]
colored_btn = ttk.Button(text="Test", style="C.TButton").pack()
root.mainloop()
lookup(style, option, state=None, default=None)
print(ttk.Style().lookup("TButton", "font"))
layout(style, layoutspec=None)
root = tkinter.Tk()
style = ttk.Style()
mbtn = ttk.Menubutton(text='Text')
mbtn.pack()
root.mainloop()
element_create(elementname, etype, *args, **kw)
element_create() 
element_names()
element_options(elementname)
theme_create(themename, parent=None, settings=None)
theme_settings() 
theme_settings(themename, settings)
Style.configure()
Style.map()
Style.layout()
Style.element_create() 
root = tkinter.Tk()
style = ttk.Style()
combo = ttk.Combobox().pack()
root.mainloop()
theme_names()
theme_use(themename=None)
Widget.identify() 
tkinter.tix.Tk(screenName=None, baseName=None, className='Tix')
root = tix.Tk()
root = tix.Tk()
root.tk.eval('package require Tix')
Motif(TM) 
Motif(TM) 
root = tix.Tk()
print(root.tix_configure())
tixCommand.tix_configure(cnf=None, **kw)
tixCommand.tix_cget(option)
tixCommand.tix_getbitmap(name)
tix_addbitmapdir() 
tix_getbitmap() 
tixCommand.tix_addbitmapdir(directory)
tix_getimage() 
tix_getbitmap() 
tix_addbitmapdir() 
tix_getimage() 
tix_getbitmap() 
tixCommand.tix_filedialog([dlgclass])
tix_filedialog() 
tixCommand.tix_getimage(self, name)
tix_addbitmapdir() 
tix_getimage() 
tixCommand.tix_option_get(name)
tixCommand.tix_resetoptions(newScheme, newFontSet[, newScmPrio])
tix_config() 
tix_resetoptions() 
exec() 
eval() 
eval() 
