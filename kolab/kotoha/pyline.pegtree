/**
 * Extracting Python Expression 
 * Authors:
 *   Kimio Kuramitsu (https://github.com/kkuramitsu/)
 * Parser Generator
 * pegtree pasm -g puppy.tpeg -f ts > parser.ts
 */
 
/* Top Level */

Source = {
    (&SOS Statement / . )*
    #Source
} EOF

/* Code Layout */

EOF          = !.
LF           = '\n' / EOF
S            = [ \t\u200B\v\r　] / '\\\n'

_            = ( S / BLOCKCOMMENT )*
_A           = ( S / BLOCKCOMMENT / LINECOMMENT )*
__           = ( S / '\n' / BLOCKCOMMENT / LINECOMMENT )*
SPC          = ( S / BLOCKCOMMENT / LINECOMMENT )+
_SKIP         = ('\n' _ &'\n')*

BLOCKCOMMENT = '/*' ( !'*/' . )* '*/'
LINECOMMENT  = '#' ( !LF . )*
SOS          = [A-Za-z0-9_+\-*/%]

EOL          = _ LF (_ LF)*
INDENT       = '\n' [ \t　]+

Statement = 
    / ClassDecl
    / ImportDecl
    / FromImportDecl
    / FuncDecl
    / IfStatement
    / ForStatement
    / WhileStatement
    / ControlStatement
    / AssertStatement
    / TryStatement
    / WithStatement 
    / AssignmentStatement
    / Expression

/* import */

ImportDecl = {
    "import" 
    name: ModuleName 
    ("as" alias: Name)?
    #ImportDecl
}

FromImportDecl = {
    "from" 
    name: ModuleName 
    "import"
    names: ( Names / Wildcard )
    #FromDecl
}

ModuleName = {
    [A-Za-z_] (W / '.')*
    #ModuleName
} _

// for (a,b) in A:
Names = { "("? Name (","  ([()] _)? Name ([()] _)? )* }
Wildcard = { '*' } _

/* class 定義 */

ClassDecl = {
    "class" 
    name: Name 
    ("(" extends: Names ")")? ":" 
    #ClassDecl
}

/* 関数定義 */

example Statement '''
@clicked(A)
def succ(x: int):
    #hoge
    return x+1
'''

FuncDecl = {
    "def" 
    name: Name 
    params: FuncParams ("->" type: Type)? {":"} 
    #FuncDecl
}

FuncParams = {
    "(" '*'* FuncParam? ( "," __ '*'* FuncParam )* __ ")"
    #FuncParam
}

FuncParam = {
    name: Name 
    ( ":" type: Type)?
    ( "=" value: Expression)?
    #ParamDecl
}

example Expression lambda: print(1)
example Expression lambda x: print(x)
example Expression lambda x,y: print(x,y)

LambdaExpression = {
    "lambda" 
    (params: LambdaParams)? ":"
    body: Expression
    #FuncExpr
}

LambdaParams = {
    LambdaFuncParam? ( "," LambdaFuncParam )* _
    #FuncParam
}

LambdaFuncParam = {
    name: Name 
    ( "=" value: Expression)?
    #ParamDecl
}

/* control statement */

ControlStatement =
    / ReturnStatement
    / BreakStatement
    / ContinueStatement
    / PassStatement
    / YieldStatement
    / RaiseStatement

ReturnStatement = {
    "return"
    (expr: (Expressions / Expression) )?
    #Return
} 

YieldStatement = { 
    "yield" 
    (expr: (Expressions / Expression) )?
    #Yield 
} 

PassStatement =  { "pass" #Pass }
BreakStatement = { "break" #Break }
ContinueStatement = { "continue"  #Continue }

RaiseStatement = {
    "raise" expr: Expression
    ("from" from: Expression)?
    #Raise
} 

/* if文 */

example Statement '''
if A == 1 :
    print(A)
    A = Ball()
else:
    print(A, B)
    
    A = 2
'''

example Statement '''
if A :
    A
elif B :
    B
elif C :
    C
else :
    D
'''

AssertStatement = {
    "assert" 
    cond: Expression 
    ("," expr: Expression)?    
    #Assert
}

IfStatement = {
    "el"? "if" 
    cond: Expression {":"} 
    #If
}

/* for文 (* *) */

ForStatement = {
    "for" 
    each: Names 
    "in" 
    list: Expression {":"} 
    #For
}

WhileStatement = {
    "while"
    cond: Expression {":"} 
    #While
}

/* try */

TryStatement = {
    "except" 
    (cond: Name ("as" as: Name)?)? {":"}
    #Except
}

WithStatement = {
    "with" expr: Expression 
    "as" name: Name
    {":"} 
    #With
}

/* Assignment */

AssignmentStatement =
    / GlobalStatement
    / NonLocalStatement
    / DeleteStatement
    / MultiAssignment
    / VarDecl
    / Assignment
    / SelfAssignment
    / VarTypeDecl

example Statement a,b = b,a

MultiAssignment = {
    left: { LeftHand ("," LeftHand)+ }
    "=" 
    right: (Expressions / Expression)
    #MultiAssignment
}

LeftHand =
    Name (
	     { recv:^ "." name: Name #GetExpr }
    	/ { recv:^ "[" index: Expression "]" #IndexExpr }
        / _SliceExpr
    )*

Expressions = {
    Expression ("," Expression)+ 
    #Tuple
}

example Statement a = 1
example Statement a[0] = 1
example Statement A += 1

VarDecl = {
    name: Name
    (':' _  type: Type)?
    "=" 
    expr: Expression
    #VarDecl
}

VarTypeDecl = {
    name: Name
    ':' _  type: Type
    #VarTypeDecl
}

Assignment = {
    left: LeftHand
    ":"? "=" 
    right: Expression
    #Assignment
}

SelfAssignment = {
    left: LeftHand
    name: SelfAssignOp
    right: Expression
    #SelfAssignment
}

SelfAssignOp = {
    ('<<' / '>>' / '**' / '//' / '-' / [+=*/%&|^]) ('=')
} _

GlobalStatement = {
    "global" Names
    #Global
} 

NonLocalStatement = {
    "nonlocal" Names
    #NonLocal
}

DeleteStatement = {
    "del" expr: LeftHand
    #Delete
}

/* Expression */

example Expression not 1 == 2
example Expression not 1 == 2 and 1 > 3

Expression = 
    / LambdaExpression
    / Operator (_IfExpr / _ForExpr*)?

_IfExpr = {
    then:^  
    "if" cond: Expression 
    "else" else: Expression 
    #IfExpr 
}

_ForExpr = {
    append:^
    "for"
    each: Names __
    "in"
    list: Expression __
    ("if" cond: Expression)? __
    #ForExpr
}

Operator =
	AndExpr (left:^ { OR _ right: AndExpr #Or })*

OR = 'or' !W / '||'

AndExpr =
	NotExpr (left:^ { AND _ right: NotExpr #And })*

AND = 'and' !W / '&&'

NotExpr =
	{ NOT _ NotExpr #Not } / EqExpr

NOT = 'not' !W / '!'

EqExpr =
	SumExpr (left:^ { name: { EQ #Name } _ right: SumExpr #Infix })*

EQ =
	/ '==' '='?  / '!=' '='? 
	/ '<=' !'=' / '>=' !'=' 
	/ '<'  !'<' / '>'  !'>' 
    / '=' !'=' / ':=' !'='
    / ('not' !W _)? 'in' !W
    / 'is' !W (_ 'not' !W)?

SumExpr =
	ProdExpr (left:^ { name: { SUM #Name } _ right: ProdExpr #Infix })*

SUM = [+\-|]

ProdExpr =
	PowExpr (left:^ { name: { PROD #Name } _ right: PowExpr #Infix })*

PROD =
    / '//' / '<<' / '>>'
	/ [*/%^&＊]

PowExpr = UnaryExpr (left:^ { name: { '**' #Name } _ right: UnaryExpr #Infix })*

UnaryExpr
	= { name: {PRE #Name } _ expr: UnaryExpr #Unary }
    / SuffixExpr

PRE = [+\-]

SuffixExpr =
	Primary (
	    recv:^ { "." name: Name "(" params: Arguments __ {")"} #MethodExpr }
	    / recv:^ { "." name: Name #GetExpr }
	    / name:^ { "(" params: Arguments __ {")"}  #ApplyExpr }
	    / recv:^ { "[" index: Expression {"]"} #IndexExpr }
        / _SliceExpr
	)*

_SliceExpr = { 
    recv:^
    "[" 
    (start: Expression)? (":" (end: Expression)? )?
    (":" (step: Expression)? )?  
    (
        "," (start2: Expression)? (":" (end2: Expression)?)?
        (":" (step2: Expression)? )?  
    )?
    {"]"} 
    #SliceExpr
}

example Expression a[1:2]
example Expression a[1:]
example Expression a[:2]

Arguments = {
	( '*'* Expression)? 
    ( "," '*'* Expression )*
    #Arguments
}

/* Primary */

Primary =
    / GroupExpr
    / ListExpr {^ "*" Expression #Mul }?
    / DataExpr
    / Constant
    / Name

GroupExpr = 
    / { "(" Expression ("," __ Expression)*  ","? __ ")" #Tuple }
    / { "(" Expression ")" #Group }

ListExpr = { "[" (Expression ("," __ Expression)* )? ","?  __ "]" #List }

DataExpr = 
    / { "{" (KeyValue ("," __ KeyValue)*)? ","? __ "}" #Data }
    / { "{" (Expression ("," __ Expression)* )? ","?  __ "}" #Set }

DELIM = [.:+\-*/%<>=!(){}[\],\n]

example GroupExpr （1, (1）)= 
example GroupExpr (1,(2))= 

KeyValue = {
	name: (Name /StringExpr / CharExpr / Expression)
	":"
	value: Expression
	#KeyValue
}

/* Type */

"[<" = [<[] _
">]" = [\]>] _
"->" = [=-] '>' _

Type = FuncType {^ ("|" Type)+ #UnionType }?

FuncType = PrimaryType {^ "->" Type #FuncType }*

PrimaryType =
    / { "(" (Type ("," Type)*)? ")" #TupleType } _ParamType*
    / { NAME #BaseType } _ _ParamType*

_ParamType = {^ "[<" (Type ("," Type)*)? ">]" #ParamType }

/* Name, Identifier */

Name = Identifier 

NAME = [A-Za-z_] W*

Identifier = {
    NAME
    #Name
} _

W = [A-Za-z0-9_]

/* Literal */

Constant =
    / FormatString
    / LongString
	/ StringExpr {^ "*" Expression #Mul}?
	/ CharExpr
	/ Number
	/ TrueExpr
	/ FalseExpr
	/ NullExpr

example Expression f'{a}+{1}'

FormatString = [Ff] (
    '\'\'\'' { FormatContent3* #Format } '\'\'\''
    / '\'' { FormatContent1* #Format } '\''
    / '"""' { FormatContent3D* #Format } '"""'
    / '"' { FormatContent1D* #Format } '"' ) _

FormatContent3 =
    '{' Expression FORMAT_OPTION? '}' / { (!'\'\'\'' !'{' .)* #StringPart }

FormatContent1 =
    '{' Expression FORMAT_OPTION? '}' / { (!'\'' !'{' .)* #StringPart }

FormatContent3D =
    '{' Expression FORMAT_OPTION? '}' / { (!'"""' !'{' .)* #StringPart }

FormatContent1D =
    '{' Expression FORMAT_OPTION? '}' / { (!'"' !'{' .)* #StringPart }

FORMAT_OPTION = ':' (!'}' .)*

LongString = 
    '\'\'' { '\'' ( ESCAPE / ![\\'] . / !'\'\'\'' '\'' )* '\'' #MultiString } '\'\'' _
    / '""' { '"' ( ESCAPE / ![\\"] . / !'"""' '"' )* '"' #MultiString } '""' _

StringExpr = 
    / { '"' STRING* '"' #QString } _
    / DQ { ZSTRING* #ZString } DQ _

CharExpr = 
    / { '\'' CHAR* '\'' #QString } _
    / SQ {  ZCHAR* #ZChar } SQ _

SQ = ['’‘＇]
DQ = ["”“＂]
STRING = ESCAPE / ![\"\n\\] .
CHAR   = ESCAPE / !['\n\\] .
ZSTRING = ESCAPE / !DQ ![\n\\] .
ZCHAR   = ESCAPE / !SQ ![\n\\] .

ESCAPE =
	'\\' ['\"\\bfnrt]
	/ '\\' [0-3] [0-7] [0-7]
    / '\\' [0-7] [0-7]
    / '\\' [0-7]
	/ '\\' [uU] HEX HEX HEX HEX
	/ '\\' [xX] HEX HEX

/* Number,Unit */

Number = FloatExpr / IntExpr

IntExpr = {
	(HEXADECIMAL / BINARY / DECIMAL )
	#Int
} _

DECIMAL = !'_' DIGIT ( DIGIT )*
HEXADECIMAL = '0' [xX] HEX ( '_'* HEX )*
BINARY = '0' [bB] [01] ( '_'* [01] )*
DIGIT = [0-9０-９_]
HEX = [a-fA-F0-9]
LONG_SUFFIX = [lL]

FloatExpr = {
	FLOAT #Double
} _

FLOAT = !'_' (
	FRACTION EXPONENT? / DIGIT+ EXPONENT
)

FRACTION =
	/ DIGIT* "." !'_' DIGIT+
    / DIGIT DIGIT* "." !'.'

EXPONENT =
	[eE] [+\-]? !'_' DIGIT+

/* Const */

TrueExpr  = { [Tt] 'rue' #True } _
FalseExpr = { [Ff] 'alse' #False } _
NullExpr  = { ('None' / 'null') #Null } _

/* Character */

HIRA = [ぁ-ん]
KATA = [ァ-ヶ]
KANJI = [㐀-䶵一-龠々〇〻ー]
TENIWOHA = [はがもをとにへまか]

//W     = [ァ-ヶ㐀-䶵一-龠々〇〻Ａ-Ｚー]
//DIGIT = [０-９]

"{" = [{] __
"}" = [}] _
"[" = [[] __
"]" = [\]] _
"(" = [(] __
")" = [)] _
"=" = [=] ![=] _
"." = [.] _
"," = [,] _
";" = ([;] _)+
":" = [:] _
"_" = [_]


example Source '''
assert _num <  10000
array = [ d [ i ] * V // v [ i ] for i in range ( n ) ]
ans = [ ]
ans . append ( w )
a = stack . pop ( - 1 )
ans = score [ : - 1 ]
ans = ans . format ( score , padding )
a , b = [ int ( i ) for i in input ( ) . split ( " " ) ]
a = [ int ( i ) for i in input ( ) . split ( " " ) ]
a , b = int ( t [ 1 ] ) , int ( t [ 2 ] )
a = int ( input ( ) )
ans = s . split ( "=" ) [ 1 ]
a , b = s . split ( "=" ) [ 0 ] . split ( "+" )
a = y [ 0 ] [ 0 ]
'''

