# 役に立ちそうなTIPS

カタカナ=カタカナ|片仮名
ひらがな=ひらがな|平仮名

("ァ" <= ch <= "ン")  @not @if @while
ch(文字)が[カタカナ]かどうか

("ぁ" <= ch <= "ん")  @not @if @while
ch(文字)が[ひらがな]かどうか

("一" <= ch <= "鿐")  @not @if @while
ch(文字)が[漢字]かどうか

re.search('[\u4E00-\u9FD0]', s)   @not @if
s(文字列)に漢字が含まれるかどうか

re.search('[あ-んア-ン一-鿐]', s)   @not @if
s(文字列)に日本語が含まれるかどうか

''.join([chr(ord(ch) - 96) if ("ァ" <= ch <= "ン") else ch for ch in s])
s(カタカナ)を[ひらがな]に[変換|]する
s(文字列)を[ひらがな]化する

''.join([chr(ord(ch) + 96) if ("ぁ" <= ch <= "ん") else ch for ch in s])
s(ひらがな)をカタカナに[変換|]する
s(ひらがな)を[カタカナ]化する

s.translate(str.maketrans("０１２３４５６７８９", "0123456789"))
s(全角数字)を半角数字に[変換|]する
s(文字列)の全角数字を半角数字に[変換|]する


list(itertools.product(A, B))
A(シーケンス)とB(シーケンス)の全組み合わせ

for x, y in itertools.product(A, B):
A(シーケンス)とB(シーケンス)の全組み合わせを繰り返す
AとBの二重ループを単ループにする

for x, y in itertools.product(A, B, C):
シーケンスA,B,Cの全組み合わせを繰り返す
A,B,Cの三重ループを単ループにする

for X in itertools.chain(A, B):
イテレータAとBを[連続して]繰り返す
B(イテレータ)をA(イテレータ)に続けて繰り返す

list(itertools.chain.from_iterable(a))
a(リスト)を[flattenする|平らにする|1次元にする]


vars()
ローカル変数の環境


"".join([random.choice('abcdefghijklmnopqrstuvwxyz') for x in range(10)])
ランダムに長さ10の文字列を生成する
ランダムに/文字列を生成する

シリアライズする=シリアライズする|保存する
デシリアライズする=デシリアライズする|読み込む|ロードする

with open("pickle.dump", "w") as f: pickle.dump(x, f)
オブジェクト(x)を"pickle.dump"(ファイル名)にシリアライズする

with open("pickle.dump", "w") as f: x = pickle.load(f)
オブジェクト(x)を"pickle.dump"(ファイル名)からデシリアライズする

with open("file") as f : data = f.read()
"file"(ファイル名)から[全|][テキスト|データ]を読み込む
"file"(ファイル名)から[全|][テキスト|データ]を読んでdataとする

with open("file") as f : data = [line.strip() for line in f.readlines()]
"file"(ファイル名)から行単位でテキストを読み込む

os.stat('file').st_mtime  @check
'file'(ファイル名)の[更新された|]タイムスタンプ

datetime.datetime.fromtimestamp(os.stat('file').st_mtime)  @check
'file'(ファイル名)の更新された日付

int(time.time() * 1000)
現在のミリ秒

int(time.time())
現在のエポック秒

datetime.datetime.fromtimestamp(time.time())
現在の日付

datetime.datetime.fromtimestamp(epoch)
epoch(エポック秒)を日付に[変換|]する
epoch(エポック秒)から日付を得る

datetime.datetime(2015, 6, 7)
2015年6月7日

datetime.fromisoformat('2011-11-04')
'2011-11-04'(文字列)から日付に[変換|]する

d + datetime.timedelta(weeks=3)
d(日付)を3週間後に[進める|する]
d(日付)に3週間[分|]、[加算する|加える]

d - datetime.timedelta(weeks=3)
d(日付)を3週間前に戻す
d(日付)から3週間[分|]、[減算する|引く]

d + datetime.timedelta(days=3)
d(日付)を3日後に[進める|する]
d(日付)に3日[分|]、[加算する|加える]

d - datetime.timedelta(days=3)
d(日付)を3日前に[戻す|する]
d(日付)から3日[分|]、[減算する|引く]

d + datetime.timedelta(hours=3)
d(日付)を3時間後に[進める|する]
d(日付)に3時間[分|]、[加算する|加える]

d - datetime.timedelta(hours=3)
d(日付)を3時間前に[戻す|する]
d(日付)から3時間[分|]、[減算する|引く]

d + datetime.timedelta(minutes=3)
d(日付)を3分後に[進める|する]
d(日付)に3分、[加算する|加える]

d - datetime.timedelta(minutes=3)
d(日付)を3分前に[戻す|する]
d(日付)から3分、[減算する|引く]

d + datetime.timedelta(seconds=3)
d(日付)を3秒後に[進める|する]
d(日付)に3秒、[加算する|加える]

d - datetime.timedelta(seconds=3)
d(日付)を3秒前に[戻す|する]
d(日付)から3秒、[減算する|引く]


logging.basicConfig(level=logging.DEBUG, format="%(asctime)s %(levelname)7s %(message)s")
オススメのログ出力を設定する

logging.basicConfig(filename="debug.log")
ログファイルの[出力|保存]先を"debug.log"に設定する
ログファイルの[出力|保存]先を設定する

logger = logging.getLogger(__name__)
ロッガーを初期化する
ロッガーを初期化して、loggerとする

ログ出力する=ログ出力する|出力する|ダンプする|ロギングする

logger.debug("message")
デバッグ[メッセージ|]"message"をログ出力する

logger.info("message")
通知[メッセージ|]"message"をログ出力する

logger.warning("message")
警告[メッセージ|]"message"をログ出力する

logger.error("message")
エラー[メッセージ|]"message"をログ出力する

except Exception as e: logging.exception('message')
[例外|エラー]のスタックトレースを[ダンプする|表示する|ログ出力する]

if __name__ == '__main__':
main関数を書きたい