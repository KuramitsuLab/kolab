# 基本定義

内=内|中|      # 例. データフレーム[内]の
存在する=ある@3|存在する
ファイル名=ファイル名@3|ファイル@2|ファイルパス@2|パス

先頭=最初|先頭
末尾=最後|末尾

確認する=確認する|見る|調べる|表示する|表示してみる # @check

# ローカル定義

データフレーム=データフレーム|表|表データ
カラム=コラム|列|表属性|カラム

インプレースする=置き換える|書き換える|インプレースする
インプレースで=置き換えで|書き換えで|破壊的に

# read

読み込む=読み込む|読む

pd.read_csv('file.csv', sep=',') @let:df
'file.csv'を/カンマ区切りで読み込む
データフレームを/'file.csv'(ファイル名)から/カンマ区切りで読み込む
'file.csv'を/','区切りで読み込む
データフレームを/'file.csv'(ファイル名)から/','区切りで読み込む

pd.read_csv('file.csv', sep='\t') @let:df
'file.csv'を/タブ区切りで読み込む
データフレームを/'file.csv'(ファイル名)からタブ区切りで読み込む

# 確認系

を選択する=を選択する|を抽出する|@5

df.head()         @check @dot @it:その
df(データフレーム)の[最初の|先頭の|先頭|上|]5行
[とりあえず|]df(データフレーム)の内容を確認する

df.head(10)        @check @dot @it:その
df(データフレーム)の[最初の|先頭の|先頭|上|]10行

df.tail()          @check @dot @it:その
df(データフレーム)の[最後の|末尾の|末尾|下]5行

df.tail(10)          @check @dot @it:その
df(データフレーム)の[最初の|末尾の|末尾|下]10行

df[100:106]        @check @dot
df(データフレーム)の100行[目|]から106行[目|]まで

df[100:]       @check @dot
df(データフレーム)の100行[目|]から[末尾]まで

df[:100]       @check @dot
df(データフレーム)の[先頭]から100行[目|]まで

df['age']         @check @dot
df(データフレーム)の'age'(カラム)[を選択する]

df[['name','age']]      @check @dot
df(データフレーム)のカラム'name'と'age'[を選択する]

df[['name','age','GPA']]        @check @dot
df(データフレーム)のカラム'name'、'age'、'GPA'[を選択する]

df[['name','age','GPA', 'addr']]      @check @dot
df(データフレーム)のカラム'name'、'age'、'GPA'、'addr'[を選択する]

#################### ここから先は未整備 ###########################

df.columns
dfの列の名前を取得する
dfのカラムを表示
dfのcolumnを確認
dfのカラムを確認する
dfのcolumnsを表示する

df.dtypes
dfのデータ型を表示
dfの各列のデータ型を確認
dfのデータ型を確認する
dfの形状を取得する

df.describe()
dfのそれぞれの行に対して重複をbool値で取得する
dfの統計情報を取得する
dfの各列の要約統計量を取得

df.index
dfのindexを表示する
dfのインデックスを表示
dfのindexを確認
dfのindexを表示する
dfのインデックスを確認する

df.isin(['?']).sum() @calc
df(データフレーム)[内][のそれぞれのカラム]に[存在する]'?'の個数の合計値 #を算出

df.shape
dfの形状を表示する
dfの行数および列数を表示
dfの大きさを表示する
dfの行数・列数を確認
dfの行数と列数を確認する

df.isnull().sum()
dfのそれぞれの列に対して欠損値の個数をカウントする
dfに含まれる欠損値の個数を列ごとに算出
dfの欠損値の個数を列単位で確認する

ピアソン係数=相関|相関係数|積率相関係数

sp.stats.pearsonr(df['G1'], df['G3'])     @calc
df(データフレーム)の'G1'(カラム), 'G3'(カラム)のピアソン係数 #を算出
(df['G1'])(カラム)と(df['G3'])(カラム)のピアソン係数

df['age'].describe()     @get
df(データフレーム)の'age'についての要約統計量 #を取得
(df['age'])(カラム)の要約統計量

df['age'].median()      @get
df(データフレーム)の'age'についての中央値 #を取得
(df['age'])(カラム)の中央値

df['age'].mode()      @get
df(データフレーム)の'age'についての最頻値 #を取得
(df['age'])(カラム)の最頻値

df['age'].std()     @get
df(データフレーム)の'age'(カラム)についての標準偏差
(df['age'])(カラム)の標準偏差

df['age'].var()     @get
df(データフレーム)の'age'(カラム)についての分散
(df['age'])(カラム)の分散


# ドロップ系

ドロップする=削除する|消す|落とす|ドロップする

df.drop('price', axis=1) @let_self　@inplace
df(データフレーム)の'price'(カラム)をドロップする

欠損値=欠損値|欠損|NaN

df.replace('?', np.nan).dropna()
df(データフレーム)内の'?'をNaNに置換し、欠損値が[存在する]行をドロップする
(df.replace('?', np.nan))(データフレーム)内の欠損値が[存在する]行をドロップする

df.replace('?', np.nan)
df(データフレーム)内に[存在する|ある]'?'を欠損値に置換する

df[['price', 'horsepower', 'width', 'height']] @let
df(データフレーム)から[カラム]'price', 'horsepower', 'width', 'height'を取り出す
df(データフレーム)から(['price', 'horsepower', 'width', 'height'])(カラム)を取り出す



# グループ化

データ数=データの数|データ数

df.groupby('flg-50K').size() 　@get
df(データフレーム)の'flg-50K'(カラム)をグループ化して、値ごとの[データ数]


df.groupby(['month', 'period'])['sales'].sum()
dfの'month'列と'period'列ごとに'sales'列の値の和を計算する
'month'、'period'を2軸として'sales'の合計値を求める
dfについて、列'month', 列'period'の値ごとに'soldout'の数をカウント

df.groupby(['weather'])['temperature'].mean()
dfについて、列'weather'の値ごとに'temperature'の平均を算出
dfの'weather'列ごとに'temperature'列の値の平均を計算する
'weather'を軸に'temperature'の平均値を求める

df.groupby(['week'])['soldout'].count()
dfの'week'列ごとに'soldout'列の値をカウントする
dfについて、列'week'の値ごとに'soldout'の数をカウント
'week'を軸に'soldout'の個数をカウントする

df.assign(price=pd.to_numeric(df['price'])) @FIXME
df(データフレーム)の('price')(カラム)を数値型に変換する

df.drop(['remarks'], axis=1, inplace=True)
dfの'remarks'列を削除する
dfから列'remarks'を削除

df.drop_duplicates()
dfから重複した行を削除したデータを取得する
dfのうち、重複した行を削除
重複している行をdfから削除する

df.dropna(subset=['kcal'], axis=0, inplace=True)
列'kcal'の列に欠損値がある行を削除する
dfの'kcal'列に欠損値がある行を削除する
dfの列'kcal'に欠損値がある行を削除する

df.dropna(subset=['temperature_diff', 'temperature_rolling_mean', 'temperature_pct_change'], axis=0, inplace=True)
dfのうち、列'temperature_diff', 'temperature_rolling_mean', 'temperature_pct_change'に1つでも欠損値がある行は削除
'temperature_diff', 'temperature_rolling_mean', 'temperature_pct_change'の行のいずれかに欠損値がある列は削除する
dfの'temperature_diff'列、'temperature_rolling_mean'列、'temperature_pct_change'列に欠損値がある行を削除する


df.fillna(value={'payday': 0.0}, inplace=True)
列'payday'に欠損値があれば0.0に置換する
dfの列'payday'にある欠損値を'0.0'に置換
dfの'paypay'列に含まれる欠損値を0.0に置き換える



df.iloc[[1,2,4],[0,2]]
dfのうち、1,2,4行目の0,2列目を取得
dfの1,2,4行目と0,2列目を抽出する
dfの1、2、4行目の0、2列目であるものを取得する

df.index = pd.to_datetime(df.index, format='%Y-%m-%d')
dfのインデックスをdatetime型に変換する
dfのインデックスをdatetime64[ns]型の年月日をハイフン区切りにしたものに変更
df.indexを参照し、年月日をハイフン区切りの形式に変更する

df.loc[100]
dfのうち、indexが100の行のみを取得
dfのインデックスが100の行を抽出する
dfの100列目を取得する

df.plot(kind='hist', y='sales' , bins=10, figsize=(16,4), alpha=0.5)
dfの'sales'列の値を横16縦4のサイズで透過率が0.5のヒストグラムとして表示する
y軸='sales'、階級数=10、サイズ=(16, 4)、透過率=0.5のヒストグラムを描く
y軸を'sales'として、図のサイズ16×4、ビンのサイズ10、透過率0.5のヒストグラムを表示

df.plot(kind='scatter', x='kcal', y='sales')
x軸に'kcal'、y軸に'sales'と設定したdfの散布図を描く
x軸を'kcal'、y軸を'sales'とした散布図を表示
dfの'kcal'列をx軸、'sales'列をy軸とした散布図を表示する

df.plot(y=['temperature', 'temperature_rolling_mean', 'temperature_pct_change'], figsize=(16,4), alpha=0.5)
y軸=['temperature', 'temperature_rolling_mean', 'temperature_pct_change']、サイズ=(16, 4)、透過率=0.5の折れ線グラフを描く
dfの'temperature'列、'temperature_rolling'列、'temperature_pct_change'列の値を、横16縦4のサイズで透過率が0.5の折れ線グラフとして表示する
列'temperature', 列'temperature_rolling_mean', 列'temperature_pct_change'の値をサイズ16×4、透過度0.5の折れ線グラフで表示

df.rename(columns={'y': 'sales'}, inplace=True)
列の名前を'y'から'sales'に変更する
dfの列'y'のカラム名を'sales'に変更
dfの'y'列を'sales'列とする

df.set_index('datetime', inplace=True)
datetime'列をdfのインデックスとする
datetime列をindexに設定する
dfの列'datatime'をインデックスとして設定

df.sort_values(['sales', 'temperature'], ascending=False).head()
'sales'、'temperature'をそれぞれ降順に並び替えた後、カッコ内の列の初めの5行を表示する
dfの列'sales'と列'temprature'を照準で並び替え、最初の5行を表示
'sales'列と'temperature'列が降順になるようdfをソートし、上5行を表示する

df.sort_values(by="sales", ascending=True).head()
"sales"列が昇順になるようdfをソートし、上5行を表示する
"sales"を参照して昇順に並び替えた後、dfの初めの5行を表示する
dfの列"sales"を降順で並び替え、最初の5行を表示

df['precipitation'] = df['precipitation'].str.replace('--', 0).astype(float)
dfの'percipitation'列内の'--'を0.0に置き換える
列'precipitation'の要素をstr型にした後に'--' を 0に置き換えて、float型にデータ型を変換する
dfの列'precipitation' の型タイプをfloatに変更すると同時に、 '--' を 0に置換

df['remarks'].unique()
dfの列'remarks'に存在する値を重複を省いて取得
'remarks'の中身を重複を除いて取得する
dfの'remarks'列に含まれるデータを確認する

df['sales'].plot()
dfの'sales'列の値を折れ線グラフとして表示する
dfの列'sales'の値を折れ線グラフとしてプロット
'sales'の値を二次元グラフにプロットする

df['temperature_diff'] = df['temperature'].diff(periods=1)
dfの'temperature'列内の前の行との差を計算し、'temperature_diff'列とする
'temperature'を参照して1行前の値との差分を算出し、'temperature_diff'という列に代入する

df['temperature_rolling_mean'] = df['temperature'].rolling(window=3).mean()
列'temperature'を参照において、自身も含めた後ろ3つの要素の平均値を、列'temperature_rolling_mean'に格納する
dfの'temperature'列の移動平均をwindowサイズを3として計算し、'temperature_rolling_mean'列とする
dfの列'temperature'について、頭からwindowサイズ3で移動平均を算出

df['weather'].value_counts()
dfの列'weather'について、値の集計をとる
dfの'wether'列の値をカウントする
dfの'weather'を参照し、各要素の出現回数を取得する


df[['kcal', 'sales']].corr()
dfの'kcal'列と'sales'列の[相関|相関係数]を[求める|算出する|取得する]

df[['name', 'kcal']].head()
dfの'name'列と'kcal'列だけ上5行を表示する
dfの列 'name'、列 'kcal'の最初の5行を表示
dfの'name', 'kcal'の列の初めの5行を表示する
dfのnameとkcalを抽出し、先頭5行を表示する

df[['name', 'kcal']].query('kcal > 450 and name == "豚肉の生姜焼"')
'kcak'列が450より大きい、かつ'name'列が"豚肉の生姜焼"にあてはまる行の'name'列と'kcal'列をdfから抽出する
dfのうち、列'kcal'が450よりも大きく、列'name'の値が"豚肉の生姜焼"の行のみを取得
'name'と'kcal'の列の、'kcal'が450より大きいかつ、'name'が"豚肉の生姜焼き"である行を取得する

df[['temperature','temperature_diff']].head()
dfの列'temperature',列'temperature_diff'について最初の5行を表示
dfの'temperature', 'temperature_diff'の列の初めの5行を表示する
dfの'temperature'列と'temperature_diff'列の上5行を表示する

df[df.isnull().any(axis=1)].head()
dfのそれぞれの行に対して欠損値を含むか否かbool値で取得し、True限定で初めの5行を表示する
dfの欠損値が含まれている行を抽出し、上5行を表示する
dfに含まれる欠損値の有無を行ごとに判定し、初めの5行について結果を表示

df[df.isnull().any(axis=1)].shape
dfのそれぞれの行に対して欠損値を含むか否かbool値で取得し、Trueだけを抽出したときに形状を取得する
dfに含まれる欠損値の有無を行ごとに判定し、欠損値が含まれるもののみを抽出したときの形状を取得
dfの欠損値が含まれている行を抽出し、その列数と行数を確認する

df[df['kcal'] > 450]
dfの'kcal'列が450より大きいものを抽出する
dfの'kcal'列を参照し、450より大きいものだけ表示する
dfのうち、列'kcal'が450よりも大きい行のみを取得

dummy_df = pd.get_dummies(df, columns=['week', 'name', 'event', 'weather', 'period'])
dfの'week'列、'name'列、'event'列、'weather'列、'period'列をダミー化したものをdummy_dfとする
dfを参照して、列=['week', 'name', 'event', 'weather', 'period']のダミー変数を生成する
列'week', 列'name', 列'event', 列'weather', 列'period'を全てダミー化したものをdummy_dfとする

dummy_df.to_csv('./data/processed_datamart.csv', encoding='utf-8')
dummy_dfを'./data/processed_datamart.csv'にutf-8で保存する
dummy_dfを、文字コードをutf-8で'./data/processed_datamart.csv'という名前のcsvファイルにして保存する
dummy_dfを'./data/processed_datamart.csv'にutf-8で保存

from pandas import Series, DataFrame
pandasからSeriesとDataFrameをインポート
pandasのSeriesとDataFrameをインポートする
pandasのSeries,DataFrameをインポートする

from sklearn import linear_model
sklearnからliner_modelをインポート
sklearnのlinear_modelをインポートする
sklearnからlinear_modelをインポートする

from sklearn.linear_model import LinearRegression
sklearn_linearからLinearRegressionをインポート
sklearn.linear_modelからLogisticRegressionをインポート
sklearn.linear_modelからRidgeをインポート

import matplotlib as mpl
matplotlibをmplとしてインポートする
matplotlibをmplとしてインポートする
matplotlibをmplと名前を付けてインポート

import matplotlib.pyplot as plt
matplotlib.pyplotをpltと名前を付けてインポート
matplotlib.pyplotをpltとしてインポートする
matplotlib.pyplotをpltという名前でインポートする
matplotlib.pyplotをpltとしてインポートする
matplotlib.pyplotをpltと名前を付けてインポート
matplotlib.pyplot'を'plt'としてインポートする

import numpy as np
numpyをnpと名前を付けてインポート
numpyをnpとしてインポートする


import numpy.random as random
numpy.randomをrandomと名前を付けてインポート
numpy.randomをrandomとしてインポートする
numpyのrandomモジュールをrandomとしてインポートする

import pandas as pd
pandasをpdとしてインポートする
pandasをインポートし以降pdとして扱う
pandasをpdと名前を付けてインポート
pandasをpdとしてインポート
pandasをpdとしてインポートする

import scipy as sp
scipyをspという名前でインポートする
scipyをspと名前を付けてインポート
scipyをspとしてインポートする

import seaborn as sns
seabornをsnsとしてインポートする
seabornをsnsと名前を付けてインポート
seabornをsnsとしてインポートする

import sklearn
`sklearn`をインポートする

np.corrcoef([df['G1'], df['G3']])
df(データフレームのG1, G3について相関行列を算出

np.cov(df['G1'], df['G3'])
df(データフレーム)のG1, G3について共分散行列を算出

pd.DataFrame(df['sales'].mask(df['sales'] > 80, 100)).head()
データフレームの'sales'の値が80よりも大きければ、その値を100に置換し、最初の5行を出力
列'sales'の値が0より大きいとき100に置き換えて、初めの5行を表示する
dfの'sales'列が80より大きければ100に置換し、上5行を表示する

pd.set_option('display.max_columns', 160)
160番目までの列を表示させる
最大表示列数を160列に設定する

pivot_monthly_df.plot(kind='bar', alpha=0.6, figsize=(12,3))
pivot_monthly_dfを参照して透過率=0.6、サイズ=(12, 3)の垂直棒グラフを描く
monthly_dfのインデックスをリセットし、'month'列をインデックス、'period'列をカラム、'sales'列を値としたピボットテーブルを表示する

plt.bar(x, y, align='center', width = 0.5)
横軸をx、縦軸をyとして、幅0.5の棒グラフを表示する
X軸をx、Y軸をyとして幅0.5の棒グラフをxのメモリの真ん中の位置に来るように配置

plt.barh(x, y, align = 'center')
横軸をx、縦軸をyとして、幅0.5の棒グラフを横向きに表示する
Xの軸とYの軸を入れ替えた棒グラフをxのメモリの真ん中の位置に来るように配置

plt.boxplot([df['G1'], df['G2'], df['G3']])
df(データフレーム)の'G1', 'G2', 'G3'[列|]についての箱ひげ図をプロットする
df(データフレーム)のG1についての箱ひげ図を表示

plt.figure(figsize=(20, 6))
グラフの大きさを20×6に指定
グラフの大きさを横20縦6とする
グラフのサイズをfigsize=(20, 6)に設定する

plt.grid(True)
グラフに/グリッドを[表示する|加える]

plt.hist(df['age'])
df(データフレーム)の'age'についてのヒストグラム
df(データフレーム)の'age'[カラム|]のヒストグラムをプロットする

plt.hist(col)
col(カラム)のヒストグラムをプロットする

ヒストグラム=度数分布図|ヒストグラム

plt.legend()
[グラフ内に|]凡例を[表示する|加える]


plt.legend(loc = 'best')
凡例を最適な位置に配置
凡例を最適な位置に表示する

plt.plot(X, reg.predict(X))
線形回帰直線を引く

plt.plot(df['G1'], df['G3'], 'o')
df(データフレーム)の'G1', 'G3'についての散布図をプロットを'o'として表示

plt.plot(x, y, color="#0F0F0F")
グラフの色をカラーコードで"#0F0F0F"の色に指定して、xとyからグラフをプロットする
16進数表記のカラーコードを"#0F0F0F"と指定して、xとyの値からプロット
色を"#0F0F0F"とし、x,yの値を折れ線グラフとして表示する

plt.plot(x, y, color=(0,0,1))
色をRGB=(0,0,1)とし、x,yの値を折れ線グラフとして表示する
RGBを(0,0,1)と指定して、xとyの値からプロット
グラフの色をRGBで(0,0,1)の色に指定して、xとyからグラフをプロットする

plt.plot(x, y, label="test")
ラベルを"test"として、xとyの値からプロット
ラベルを"test"とし、x,yの値を折れ線グラフとして表示する
ラベル名を"test"と定義し、xとyからグラフをプロットする

プロット = グラフ@4|プロット@2|図

plt.savefig("foo.png")
プロットを/"foo.png"として保存する
プロットを/{"foo.png"という}名前で保存する

plt.show()
プロットを[描画する|表示する]

plt.subplot(x,y,2) @FIXME
x行y列のグラフの2つ目を指定
複数のグラフを1つにまとめて表示して、これはx行y列の2番目の位置にプロットする
グラフを2行1列のグラフの2つ目として指定

に設定する=に設定する|にセットする|に変更する|にする|と設定する|とセットする|とする

グラフタイトル=グラフのタイトル|タイトル|グラフの題名

plt.title('figure')
[グラフタイトル]を'figure'[に設定する]

付ける=付ける|つける
軸ラベル=軸ラベル|ラベル
x軸=x軸|グラフのx軸|x座標
y軸=y軸|グラフのy軸|y座標
z軸=z軸|グラフのz軸|z座標

plt.xlabel('X')
x軸の軸ラベルを'X'[に設定する]
x軸に/{'X'という}軸ラベルを付ける
x軸に/'X'(軸ラベル)を付ける

plt.xlabel('Y')
x軸の軸ラベルを'Y'[に設定する]
x軸に/{'Y'という}軸ラベルを付ける
x軸に/'Y'(軸ラベル)を付ける

plt.xticks(x, ['A Class', 'B Class', 'C Class'])
x軸のラベルをそれぞれ'A Class', 'B Class', 'C Class'とする
グラフのx軸の目盛り文字列をxから['A Class', 'B Class', 'C Class']に変更

plt.yticks(x, ['A Class','B Class','C Class'])
グラフのy軸の目盛り文字列をxから['A Class', 'B Class', 'C Class']に変更
y軸のラベルをそれぞれ'A Class', 'B Class', 'C Class'とする

random.seed(0)
ランダムシードを0に設定する
シード値を0として固定
シード値を0とする

線形回帰モデル=線形回帰モデル|回帰モデル|線形回帰|モデル

linear_model.LinearRegression() @let
線形回帰モデルをインスタンス化する
線形回帰モデル[のインスタンス|]を生成する
[新しい|初期化された]線形回帰モデル[を用意する|]

reg.coef_ @calc 
reg(線形回帰モデル)の回帰係数 #を算出

reg.intercept_ @calc
reg(線形回帰モデル)の切片 #を算出

reg.score(Y_test, Y_pred) @calc
reg(線形回帰モデル)の決定係数 #を算出する

sns.pairplot(df[['Dalc', 'Walc', 'G1', 'G3']])
df(データフレーム)のDalc, Walc, G1, G3について各変数のヒストグラムをすべて表示

sns.set()
グラフのスタイルをseabornに変更する
グラフのデザインをseabornのスタイルに適用する
seaboenのデフォルトスタイルを適用する

