#Python,PJ
random.random,0.0と1.0の範囲の乱数
random.choice,{}からランダムに選んだ要素
random.shuffle,{}をランダムにシャッフルする
random.randrange,0から{}未満までのランダムな整数
random.randrange,{}から{}未満までのランダムな整数
random.randint,{}と{}の範囲のランダムな整数
random.seed,乱数生成を初期化する
random.seed,{}をシードとして乱数生成を初期化する
os.system,コマンド{}を実行する
subprocess.call,コマンド{}を実行する
datetime.datetime.now,本日の日付と現在時刻
.date,{}から変換した日付
.strftime,{0}を{1}の書式でフォーマットした文字列
datetime.datetime.strptime,文字列{0}からテンプレート{1}を用いて構文解析された日付時間
.encode,{0}を文字コード{1}で復号化した文字列
.decode,{0}を文字コード{1}で符号化したバイト列
.decode,{0}を文字コード{1}で{2}ポリシーに基づき符号化したバイト列
math.pi,円周率
math.sqrt,{}の平方根
re.search,{1}において正規表現{0}が最初にマッチする位置
re.match,正規表現{0}を{1}にマッチさせた結果
re.fullmatch,{1}全体において正規表現{0}をマッチさせた結果
re.split,{1}を正規表現{0}で分割した文字列リスト
re.sub,{2}が正規表現{0}にマッチした箇所を{1}に置き換えた文字列
re.subn,{2}が正規表現{0}にマッチした箇所を{1}に置き換えた文字列の組
re.findall,{1}が正規表現{0}にマッチした文字列の列
re.compile,{}を正規表現にコンパイルした結果
flag=,{}オプションをつけて
#np
np.array,{}からの配列
dtype=,{}型の要素を用いて
#pd
.sum,{}の総和
pd.DataFrame,{}から作られた表データ
pd.read_csv,{}から読み込んだ表データ
pd.read_table,{}から読み込んだ表データ
names=,{}をカラム名として
index_col=,{}番目の列をインデックスとして
na_values=,{}を欠損値として
encoding=,エンコーディング{}を用いて
.astype,{}にしたがい型変換した表データ
axis=0,列方向に沿って
axis=1,行方向に沿って
pd.concat,{}を連結した表データ
ignore_index=True,インデックスを付け直しながら
index=,{}を新たなインデックスとして
pd.join,{}を結合した表データ
join='inner',内部ジョインとして
join='outer',外部ジョインとして



