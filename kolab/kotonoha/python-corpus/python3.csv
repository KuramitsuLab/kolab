Python,PJ
import:code,import {}
import,{}モジュールを用いる,use the {} module
assert:code,assert {}
assert,{}なければならない,
=:code,{0} = {1}
=,{1}を{0}とする,let {0} be {1}
=A:code,{0} = {1}
=A,{1}を{0}にする,let {0} be {1}
=SWAP:code,"{0}, {1} = {1}, {0}"
=SWAP,{0}と{1}を入れ替える,swap {0} and {1}
=D:code,{0} = {1}
=D,{1}を展開し順に{0}とする,let {0} be {1}
if:code,if {} :
if,{}とき、,if {}
if,{0}とき{1}、そうでなければ{2},{1} if {0}; otherwise {2}
elif:code,elif {} :
elif,そうでなく、{}とき、
else:code,else :
else:そうでなければ、
pass:code,pass
pass,何もしない,do nothing
while:code,while {} :
while,{}間、繰り返す
continue:code,continue
continue,最初からもう一度、繰り返す
break:code,break
break,繰り返すのを中断する 
for:code,for {} in {} :
for,{1}の各要素を順に{0}として、繰り返す 
for,{2}の各要素を{1}とし、{0}の列
for,{2}の各要素を{1}とし、{3}ときの{0}の列
def:code,def {} {} :
def,関数{0}を{1}のパラメータを持つように定義する
return:code,return {}
return,関数処理を中断する
return,{0}を関数出力とする
:code,{}
,{} 
+,{}に{}を加えた値
-,-{}
-,{}から{}を引いた値
*,{}を展開した引数
*,{}に{}を掛けた値
/,{}を{}で割った値
//,{}を{}で割った商
%,{}を{}で割った余り
**,{}の{}乗
+=,{}を{}だけ増加させる
-=,{}を{}だけ減少させる
*=,{}を{}倍にする
/=,{}を{}分の一にする
//=,{}を{}分の一にする
%=,{}を{}で割った余りにする
==,{}が{}かどうか
!=,{}が{}と等しくないかどうか
<,{}が{}より小さいかどうか,Whether {} is less than {}
<=,{}が{}以下かどうか,whether {} is less than or equal to {}
>,{}が{}より大きいかどうか,whether {} is greater than {}
>=,{}が{}以上かどうか,whether {} is greater than or equal to {}
in,{}が{}に含まれるかどうか,whether {} is contained in {}
None,未定値,none
True,真,true
False,偽,false
[],空列, an empty list
[],({})からなる列, a list of {}
(),({})の組, a tuple of {}
{},空辞書, an empty dictionary
{},({})からなる辞書, a dictionary of {}
KA,書くかどうか
KA2,書いたかどうか
KA3,検索したかどうか
KA4,検索されたかどうか
SA,探すかどうか
TA,勝つかどうか
NA,死ぬかどうか
MA,生むかどうか
RA,切るかどうか
WA,笑うかどうか
GA,防ぐかどうか
BA,遊ぶかどうか
V1,書けるかどうか
V2,読んだかどうか